<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自定义UI的高级指南</title>
      <link href="/blog/advanced-guide-to-custom-ui/"/>
      <url>/blog/advanced-guide-to-custom-ui/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tModLoader/tModLoader/wiki/Advanced-guide-to-custom-UI" target="_blank" rel="noopener">Advanced guide to custom UI</a></p><p>在本指南中，您将了解 vanilla 中存在的各种 UI 类，您可以使用它们来修改自己的 UI。在遵循本指南之前，您应该了解以下主题：</p><ul><li>类层次结构和继承</li><li>Abstract / virtual and override</li><li>面向对象编程（与类继承有关）</li></ul><h1 id="交待"><a href="#交待" class="headerlink" title="交待"></a>交待</h1><p>Terraria 中的 UI 由各种类组成，最值得注意的是：UIElement、UIState 和 UserInterface。我们将讨论每个类及其在创建 UI 过程中的重要性。</p><h1 id="对象关系"><a href="#对象关系" class="headerlink" title="对象关系"></a>对象关系</h1><p>自定义 UI 只不过是一个自定义 UserInterface，它的状态设置为自定义 UIState。一般来说，一个 UserInterface 可以有一个活动的 UIState（但是它可以保存状态历史，直到上限，您可以返回到该状态），然后该状态当前显示在该 UserInterface 中。</p><h1 id="UserInterface"><a href="#UserInterface" class="headerlink" title="UserInterface"></a>UserInterface</h1><p>没有理由创建派生自 UserInterface 的自定义类。 （虽然你可以，因为类不是密封的）在大多数情况下，只需在你的 mod 类（或专用的 UI 类）中声明一个 UserInterface 类型的新字段。我们稍后再讨论这个问题。</p><h1 id="UIState"><a href="#UIState" class="headerlink" title="UIState"></a>UIState</h1><p>UIState 代表界面所处的状态。类本身非常简单：它实际上是一个跨越整个屏幕宽度和高度的 UIElement，允许您在屏幕上的任何位置添加元素。</p><h1 id="UIElement"><a href="#UIElement" class="headerlink" title="UIElement"></a>UIElement</h1><p>UIElement 表示一个类，它是可以成为接口一部分的任何类型的 UIElement。普通示例是 UIPanel、UIImage 和 UIImageButton 类。每个都有特定的功能。 （分别显示背景面板、显示图像或显示可点击按钮图像）您可以通过从 UIElement 派生类来制作自己的自定义元素。我们将回到这一点。</p><h1 id="初始设置"><a href="#初始设置" class="headerlink" title="初始设置"></a>初始设置</h1><p>所以，你需要一个 UserInterface 和 UIState。首先在您的 Mod 类中定义这些新字段：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> UserInterface MyInterface<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于您的 UIState，您应该创建一个新的自定义类：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">TheUI</span> <span class="token punctuation">:</span> UIState <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在你的 Mod 类中为它创建一个字段：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> TheUI MyUI<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="初始化用户界面"><a href="#初始化用户界面" class="headerlink" title="初始化用户界面"></a>初始化用户界面</h1><p>因为 UI 是只有玩家才能看到的东西，所以你不应该在服务器上初始化 UI。这会浪费资源，服务器不玩游戏也看不到任何图形。仅在客户端上初始化。在您的 Mod.Load() 中，初始化您的 UI：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Main<span class="token punctuation">.</span>dedServ<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyUI <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyUI<span class="token punctuation">.</span><span class="token function">Activate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果未初始化，Activate 在 UIState 上调用 Initialize()，然后调用 OnActivate，然后在每个子元素上调用 Activate</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在您的 Mod.Unload() 中，您可以在 UI 上调用您可能需要的任何卸载操作，然后将其设置为 null：</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyUI<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">SomeKindOfUnload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果你持有需要卸载的数据，在OO-fashion中调用它</span>MyUI <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不建议在 UI 上卸载如上所示，因为通常让 UI 负责数据是不好的做法。但是，如果您的 UI 包含诸如纹理之类的静态引用，这将很有用。</p><h1 id="更新和绘制-UI"><a href="#更新和绘制-UI" class="headerlink" title="更新和绘制 UI"></a>更新和绘制 UI</h1><p>设置界面的状态很好，但 UI 不会被神奇地调用来更新或绘制自身。为此，您必须覆盖 Mod.UpdateUI(Gametime gameTime) 和 Mod.ModifyInterfaceLayers(List<GameInterfaceLayer> 层)：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> GameTime _lastUpdateUiGameTime<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">UpdateUI</span><span class="token punctuation">(</span>GameTime gameTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>  _lastUpdateUiGameTime <span class="token operator">=</span> gameTime<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>MyInterface<span class="token operator">?</span><span class="token punctuation">.</span>CurrentState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      MyInterface<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>gameTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码片段将在您的界面上调用 .Update 并将其传播到其状态和底层元素。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">ModifyInterfaceLayers</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>GameInterfaceLayer<span class="token operator">></span> layers<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> mouseTextIndex <span class="token operator">=</span> layers<span class="token punctuation">.</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>layer <span class="token operator">=</span><span class="token operator">></span> layer<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Vanilla: Mouse Text"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mouseTextIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    layers<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>mouseTextIndex<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LegacyGameInterfaceLayer</span><span class="token punctuation">(</span>        <span class="token string">"MyMod: MyInterface"</span><span class="token punctuation">,</span>        <span class="token keyword">delegate</span>            <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> _lastUpdateUiGameTime <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> MyInterface<span class="token operator">?</span><span class="token punctuation">.</span>CurrentState <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                MyInterface<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>spriteBatch<span class="token punctuation">,</span> _lastUpdateUiGameTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>               <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>           InterfaceScaleType<span class="token punctuation">.</span>UI<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码片段将一个自定义层添加到普通层列表中，如果它有状态，它将在你的界面上调用 .Draw。这将使您的 UI 真正绘制并显示在屏幕上。将 InterfaceScaleType 设置为 UI 以进行适当的 UI 缩放。</p><h1 id="显示-UI"><a href="#显示-UI" class="headerlink" title="显示 UI"></a>显示 UI</h1><p>出于测试目的，建议添加热键或其他易于访问的方式来切换 UI。要显示您的 UI，您需要将界面的状态设置为您的 UI 实例。你应该通过访问你的 mod 的实例并调用 .SetState 来做到这一点：</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyMod<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>MyInterface<span class="token punctuation">.</span><span class="token function">SetState</span><span class="token punctuation">(</span>MyMod<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span>MyUI<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此代码段将为您的 UI 设置状态，使其显示。如果要隐藏 UI，只需将 null 传递给方法调用。</p><p>您可以看到为什么为您的 UI 使用专用类很有用。为此制作辅助方法很有用，例如：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">ShowMyUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyInterface<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">SetState</span><span class="token punctuation">(</span>MyUI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">void</span> <span class="token function">HideMyUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MyInterface<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">SetState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后简单地调用它们：</p><pre class="line-numbers language-csharp"><code class="language-csharp">MyMod<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">ShowMyUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyMod<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">HideMyUI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="State-history"><a href="#State-history" class="headerlink" title="State history"></a>State history</h2><p>该接口跟踪状态历史。如果你想回到之前的状态，你可以调用 MyInterface.GoBack()，如果有的话，它会激活历史中之前的状态。请记住，它将从历史记录中删除激活状态，因此您需要调用 .SetState 或 .AddToHistory 将其恢复。历史记录最多可保存 32 个状态，如果您在历史记录中添加新状态（如果已有 32 个状态），则会删除最旧的 4 个状态。如果您的界面状态不断变化，例如如果是渐进式 UI（例如分页或选项卡），则状态历史记录很有用</p><h1 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h1><p>如果您现在激活您的 UI，您可能会感到困惑，因为没有任何显示。这是因为您的 UI 是空的。你可以向 UIState 添加任何你想要的元素，然后它们就会显示出来。</p><p>在您的 MyUI 类中，重写 OnInitialize 方法。例如添加一个新的 UIPanel 到状态：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 1</span>  UIPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>  panel<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>  panel<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>  <span class="token function">Append</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重写 OnInitialize 方法。当我们在加载我们的模组时初始化 UI 时调用它。</li><li>创建一个新的 UIPanel 实例。这是一个香草类，将在此元素上绘制香草风格的背景。</li><li>将宽度和高度设置为更大的值，以便我们可以看到它。</li><li>将面板附加到我们的 UIState。 Append 是 UIElement 类的一个方法，它允许您向该元素添加子元素。子元素相对于该元素放置。由于 UIState 覆盖了整个屏幕，我们的 UIPanel 将显示在屏幕的左上角。</li></ul><h2 id="添加一些文本"><a href="#添加一些文本" class="headerlink" title="添加一些文本"></a>添加一些文本</h2><p>让我们通过向我们的 UIPanel 添加一些文本来增加趣味性。我们可以用同样的方式做到这一点，但是这次将元素附加到我们的面板变量中：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UIPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Append</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  UIText text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  panel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>初始化 UIText</li><li>UIText 元素现在是 UIPanel 元素的子元素。文本应显示在 UIPanel 中。</li></ul><h2 id="中心元素"><a href="#中心元素" class="headerlink" title="中心元素"></a>中心元素</h2><p>您的大部分时间将花在完善 UI 中元素的位置上。您将弄乱 UIElement 类上的各种字段：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> StyleDimension Top<span class="token punctuation">;</span><span class="token keyword">public</span> StyleDimension Left<span class="token punctuation">;</span><span class="token keyword">public</span> StyleDimension Width<span class="token punctuation">;</span><span class="token keyword">public</span> StyleDimension Height<span class="token punctuation">;</span><span class="token keyword">public</span> StyleDimension MaxWidth <span class="token operator">=</span> StyleDimension<span class="token punctuation">.</span>Fill<span class="token punctuation">;</span><span class="token keyword">public</span> StyleDimension MaxHeight <span class="token operator">=</span> StyleDimension<span class="token punctuation">.</span>Fill<span class="token punctuation">;</span><span class="token keyword">public</span> StyleDimension MinWidth <span class="token operator">=</span> StyleDimension<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span><span class="token keyword">public</span> StyleDimension MinHeight <span class="token operator">=</span> StyleDimension<span class="token punctuation">.</span>Empty<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">bool</span> OverflowHidden<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> PaddingTop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> PaddingLeft<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> PaddingRight<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> PaddingBottom<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> MarginTop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> MarginLeft<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> MarginRight<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> MarginBottom<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> HAlign<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">float</span> VAlign<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使元素居中是修改器的常见用例。相对于其父元素居中元素很容易。为了使 UIPanel 中的文本居中，我们可以使用 HAlign 和 VAlign，并将两者都设置为 0.5f：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UIPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Append</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  UIText text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  text<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  text<span class="token punctuation">.</span>VAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  panel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这基本上是将我们的水平和垂直对齐设置为 50%，使我们的元素居中。</p><h3 id="类似标题的文本"><a href="#类似标题的文本" class="headerlink" title="类似标题的文本"></a>类似标题的文本</h3><p>如果需要，我们可以使用这些对齐技巧来像标题一样完美地对齐文本。我们可以将 HAlign 设置为 50% 以使文本水平居中，我们可以通过设置 Top 位置将 VAlign 设置为较低的值或固定的绝对值。推荐后者：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UIPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Append</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  UIText header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">"My UI Header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  header<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  header<span class="token punctuation">.</span>Top<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>  panel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li>将水平对齐设置为 50%</li></ol></li><li><ol start="2"><li>将顶部位置设置为 15 像素。文本应该相对于 UIPanel 向下 15 像素。请记住，您可以为此使用 VAlign，但它会随着您的 UIPanel 更改大小而缩放。当您更改 UIPanel 的大小时，这可能会搞砸事情。</li></ol></li></ul><h3 id="居中-UIPanel"><a href="#居中-UIPanel" class="headerlink" title="居中 UIPanel"></a>居中 UIPanel</h3><p>您的 UI 可能仍显示在 UIState 的左上角。大多数模组制作者都希望他们的 UI 显示在屏幕中央。因为 UIState 跨越整个屏幕大小，我们可以使用 HAlign 和 VAlign 技巧来使我们的 UIPanel 居中：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UIPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> panel<span class="token punctuation">.</span>VAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  <span class="token function">Append</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这是将两个字段设置为相同值的巧妙技巧。</li></ul><p>但是，如果您更改 UIState 跨越屏幕的方式，或者如果您的 UIPanel 未附加到 UIState 本身，则此技巧将不起作用。当心你的 UIPanel 的父级并相应地对齐它。</p><h1 id="与-UIElement-的交互"><a href="#与-UIElement-的交互" class="headerlink" title="与 UIElement 的交互"></a>与 UIElement 的交互</h1><p>模组制作者想要的最常见的交互是在单击某个项目时执行某些操作，例如按钮。让我们通过交互向 UI 添加一个按钮：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UIPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Append</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  UIText header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">"My UI Header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  header<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>  header<span class="token punctuation">.</span>Top<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>  UIPanel button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>  button<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  button<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>  button<span class="token punctuation">.</span>Top<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>  button<span class="token punctuation">.</span>OnClick <span class="token operator">+</span><span class="token operator">=</span> OnButtonClick<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>  panel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>  UIText text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">"Click me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  text<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> text<span class="token punctuation">.</span>VAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span>  button<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnButtonClick</span><span class="token punctuation">(</span>UIMouseEvent evt<span class="token punctuation">,</span> UIElement listeningElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// We can do stuff in here!</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li>初始化一个新的 UIPanel。因为没有 UIButton 类（只有 UIImageButton），我们将为此使用 UIPanel 和 UIText。</li></ol></li><li><ol start="2"><li>将顶部位置设置为略低于我们的标题。</li></ol></li><li><ol start="3"><li>添加新的 OnClick 事件。重要的是要注意事件将通过父子链传播。这意味着如果我们点击 UIText，点击事件也将在我们的 UIPanel（按钮）中结束，因为它是父级。出于这个原因，我们只需要将处理程序添加到 UIPanel。</li></ol></li><li><ol start="4"><li>设置文本对齐方式，使其在我们的按钮面板中居中。</li></ol></li><li><ol start="5"><li>将文本附加到我们的按钮。该按钮被附加到我们的背景面板。</li></ol></li></ul><p>OnButtonClick 目前什么都不做。让我们改变我们的文本。为了做到这一点，我们必须使我们的按钮文本成为类级别的字段，而不是仅限于 OnInitialize 方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> UIText text<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Init later</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ... code</span>    text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">"Click me!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... other code</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以在 OnButtonClick 方法中访问文本：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnButtonClick</span><span class="token punctuation">(</span>UIMouseEvent evt<span class="token punctuation">,</span> UIElement listeningElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    text<span class="token punctuation">.</span><span class="token function">SetText</span><span class="token punctuation">(</span><span class="token string">"I was clicked!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>有很多像 OnClick 这样的事件，这里是它们的列表：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMouseDown<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMouseUp<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMouseOver<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMouseOut<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnDoubleClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnRightMouseDown<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnRightMouseUp<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnRightClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnRightDoubleClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMiddleMouseDown<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMiddleMouseUp<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMiddleClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnMiddleDoubleClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton1MouseDown<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton1MouseUp<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton1Click<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton1DoubleClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton2MouseDown<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton2MouseUp<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton2Click<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>MouseEvent OnXButton2DoubleClick<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">event</span> UIElement<span class="token punctuation">.</span>ScrollWheelEvent OnScrollWheel<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="悬停工具提示-Tooltip"><a href="#悬停工具提示-Tooltip" class="headerlink" title="悬停工具提示(Tooltip)"></a>悬停工具提示(Tooltip)</h1><p>另一个有用的交互修改器通常希望在悬停元素时显示工具提示。这最好通过重写 OnUpdate 方法并检查鼠标是否悬停在元素上，然后更改 Main.hoverItemName 来完成。如果我们悬停按钮，让我们显示此工具提示：（您需要将按钮设置为类级别的字段，就像我们对文本所做的那样）</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span>GameTime gameTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span>IsMouseHovering <span class="token operator">||</span> button<span class="token punctuation">.</span>isMouseHovering<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Main<span class="token punctuation">.</span>hoverItemName <span class="token operator">=</span> <span class="token string">"Click to see what happens"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="UI-显示或隐藏时的交互"><a href="#UI-显示或隐藏时的交互" class="headerlink" title="UI 显示或隐藏时的交互"></a>UI 显示或隐藏时的交互</h1><p>覆盖方法 .OnActivate() 和 .OnDeactivate() 以分别在您的 UI 激活或停用时执行操作。例如，激活可用于检索最新数据以填充 UI，停用可重置存储此数据的变量。使用 deactivate 使您的 UI 在下次激活时保持新鲜，因此它在不使用时在内存中保存的项目更少。 （理想情况下将事物设置为 null 以取消分配内存）</p><h1 id="自定义-UIElement"><a href="#自定义-UIElement" class="headerlink" title="自定义 UIElement"></a>自定义 UIElement</h1><p>制作自己的元素很容易。您必须创建一个继承 UIElement 类的自定义类。 OnInitialize、OnActivate、OnDeactivate、DrawSelf 和 Update 方法将是要重写的主要方法。</p><p>一个简单的例子是制作我们自己的自定义按钮类来方便我们在上面做的事情。让我们从基础开始：首先定义我们的类是什么以及应该做什么。按钮类必须显示一些文本并且是可点击的，点击时可以执行指定的操作。很好，现在我们知道了该类的用例，我们可以对其进行建模：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UIClickableButton</span> <span class="token punctuation">:</span> UIElement <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1</span>    <span class="token keyword">private</span> <span class="token keyword">object</span> _text<span class="token punctuation">;</span>    <span class="token keyword">private</span> UIElement<span class="token punctuation">.</span>MouseEvent _clickAction<span class="token punctuation">;</span>    <span class="token keyword">private</span> UIPanel _uiPanel<span class="token punctuation">;</span>    <span class="token keyword">private</span> UIText _uiText<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2</span>    <span class="token keyword">public</span> <span class="token keyword">string</span> Text     <span class="token punctuation">{</span>        <span class="token keyword">get</span> <span class="token operator">=</span><span class="token operator">></span> _uiText<span class="token operator">?</span><span class="token punctuation">.</span>Text <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span>        <span class="token keyword">set</span> <span class="token operator">=</span><span class="token operator">></span> _text <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">UIClickableButton</span><span class="token punctuation">(</span><span class="token keyword">object</span> text<span class="token punctuation">,</span> UIElement<span class="token punctuation">.</span>MouseEvent clickAction<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 4</span>        _text <span class="token operator">=</span> text<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">;</span>        _clickAction <span class="token operator">=</span> clickAction<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         _uiPanel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>        _uiPanel<span class="token punctuation">.</span>Width <span class="token operator">=</span> StyleDimension<span class="token punctuation">.</span>Fill<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>        _uiPanel<span class="token punctuation">.</span>Height <span class="token operator">=</span> StyleDimension<span class="token punctuation">.</span>Fill<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span>        <span class="token function">Append</span><span class="token punctuation">(</span>_uiPanel<span class="token punctuation">)</span><span class="token punctuation">;</span>        _uiText <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>        _uiText<span class="token punctuation">.</span>VAlign <span class="token operator">=</span> _uiText<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 6</span>        _uiPanel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>_uiText<span class="token punctuation">)</span><span class="token punctuation">;</span>            _uiPanel<span class="token punctuation">.</span>OnClick <span class="token operator">+</span><span class="token operator">=</span> _clickAction<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 7</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span>GameTime gameTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_text <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 8</span>            _uiText<span class="token punctuation">.</span><span class="token function">SetText</span><span class="token punctuation">(</span>_text<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            _text <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token function">Recalculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>            <span class="token keyword">base</span><span class="token punctuation">.</span>MinWidth <span class="token operator">=</span> _uiText<span class="token punctuation">.</span>MinWidth<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>            <span class="token keyword">base</span><span class="token punctuation">.</span>MinHeight <span class="token operator">=</span> _uiText<span class="token punctuation">.</span>MinHeight<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 9</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有很多事情发生，让我们看看：</p><ul><li><ol><li>我们定义自定义按钮所需的变量。</li></ol></li><li><ol start="2"><li>一个公共属性，我们可以使用它来获取和设置文本支持字段。第 8 点对此进行了更多说明。</li></ol></li><li><ol start="3"><li>只需返回我们的 _uiText 的文本，如果它为 null，则返回空字符串。 （尚未初始化）</li></ol></li><li><ol start="4"><li>我们的构造函数。我们必须传递一个文本和点击动作。文本是对象类型，仿照 UIText 类。</li></ol></li><li><ol start="5"><li>创建一个新的 UIPanel 作为基础背景。我们将大小设置为Fill，相当于调用Set(0, 1f)； 1f 代表 100%，所以在这种情况下，我们将拉伸 UIPanel 与我们制作这个元素一样大。</li></ol></li><li><ol start="6"><li>创建一个新的 UIText，我们在 UIPanel 中居中对齐。</li></ol></li><li><ol start="7"><li>将点击操作注册到 UIPanel。请记住，子项上的单击操作通过父子链传播，因此单击事件将最终出现在我们的 UIPanel OnClick 处理程序上。</li></ol></li><li><ol start="8"><li>通过在更新期间更新 UIText 的文本，我们可以使我们的文本更改线程安全并避免在绘制文本时编辑文本时出现错误。</li></ol></li><li><ol start="9"><li>重新计算强制此元素及其子元素重新计算大小、填充等。如果内容发生更改，例如本例中的文本，则应执行此操作。在这种情况下，我们可以在 Recalculate() 期间复制从 UIText 类计算的最小宽度和最小高度。</li></ol></li></ul><p>现在我们可以使用这个类，而不是我们之前所做的：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> UIClickableButton _button<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">OnInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  UIPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">Append</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>  UIText header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIText</span><span class="token punctuation">(</span><span class="token string">"My UI Header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  header<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>  header<span class="token punctuation">.</span>Top<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  panel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>  _button <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UIClickableButton</span><span class="token punctuation">(</span><span class="token string">"Click me!"</span><span class="token punctuation">,</span> OnButtonClick<span class="token punctuation">)</span><span class="token punctuation">;</span>  _button<span class="token punctuation">.</span>Width<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    _button<span class="token punctuation">.</span>Height<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  _button<span class="token punctuation">.</span>HAlign <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>  _button<span class="token punctuation">.</span>Top<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   panel<span class="token punctuation">.</span><span class="token function">Append</span><span class="token punctuation">(</span>_button<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">OnButtonClick</span><span class="token punctuation">(</span>UIMouseEvent evt<span class="token punctuation">,</span> UIElement listeningElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>    _button<span class="token punctuation">.</span>Text <span class="token operator">=</span> <span class="token string">"I was clicked!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> tModLoader </tag>
            
            <tag> terraria </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPC 生成基础</title>
      <link href="/blog/basic-npc-spawning/"/>
      <url>/blog/basic-npc-spawning/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tModLoader/tModLoader/wiki/Basic-NPC-Spawning" target="_blank" rel="noopener">Basic NPC Spawning</a></p><h1 id="NPC-生成基础"><a href="#NPC-生成基础" class="headerlink" title="NPC 生成基础"></a>NPC 生成基础</h1><p>本指南将教授生成敌人的基础知识。</p><h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><p>您需要首先了解一些想法：</p><h2 id="平衡"><a href="#平衡" class="headerlink" title="平衡"></a>平衡</h2><p>很难猜测 ModNPC.SpawnChance 的返回值是否合适。与普通 NPC 相比，我们不希望我们的 NPC 频繁生成。通常 0.1f 或更小的值是好的，但你应该使用 <a href="https://forums.terraria.org/index.php?threads/modders-toolkit-a-mod-for-modders-doing-modding.55738/" target="_blank" rel="noopener">Modders Toolkit</a> 的 NPC Spawn Tool 来比较你的 NPC 与原版和其他 Mod 的 NPC 的生成率。</p><h2 id="Terraria-生成"><a href="#Terraria-生成" class="headerlink" title="Terraria 生成"></a>Terraria 生成</h2><p>泰拉瑞亚通过首先决定生成 NPC 的位置，然后询问每个 NPC 是否愿意在该位置生成来生成 NPC。每次泰拉瑞亚决定生成一个 NPC 时，它将与一个玩家对象 (NPCSpawnInfo.player) 结合使用。在多人游戏中，服务器处理所有生成决策。如果你在你的模组中创建了一个自定义生物群系并注意到生成在多人游戏中无法正常工作，你的 ModPlayer.SendCustomBiomes 和相关钩子需要正确实现，以便服务器知道自定义生物群系布尔值的正确值，以便它可以做出正确的决定。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>ModNPC.SpawnChance 钩子返回一个浮点数。不明白的谷歌一下。 ModNPC.CanTownNPCSpawn 钩子返回一个布尔值。</p><h2 id="ModNPC-SpawnChance"><a href="#ModNPC-SpawnChance" class="headerlink" title="ModNPC.SpawnChance"></a>ModNPC.SpawnChance</h2><p>这是本指南的主要重点。所有自然生成的非boss、非城镇NPC ModNPC 类都应该覆盖这个钩子：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">float</span> <span class="token function">SpawnChance</span><span class="token punctuation">(</span>NPCSpawnInfo spawnInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Code goes here</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ModNPC-CanTownNPCSpawn"><a href="#ModNPC-CanTownNPCSpawn" class="headerlink" title="ModNPC.CanTownNPCSpawn"></a>ModNPC.CanTownNPCSpawn</h2><p>仅适用于 townNPC ModNPC。请注意，此类返回布尔值而不是浮点数。在满足某些条件（例如击败boss）后，使用它让您的城镇 NPC 生成。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">CanTownNPCSpawn</span><span class="token punctuation">(</span><span class="token keyword">int</span> numTownNPCs<span class="token punctuation">,</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Code goes here</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="条件句（if-else）"><a href="#条件句（if-else）" class="headerlink" title="条件句（if-else）"></a>条件句（if-else）</h2><p>生成 NPC 归结为决定是否生成我们的 ModNPC。在<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/if-else" target="_blank" rel="noopener">此处</a>阅读 if-else。</p><h3 id="Not-Operator"><a href="#Not-Operator" class="headerlink" title="Not Operator (!)"></a>Not Operator (!)</h3><p>在<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/logical-negation-operator" target="_blank" rel="noopener">这里</a>阅读。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>dayTime<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// if day time</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Main<span class="token punctuation">.</span>dayTime<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// if night time</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="And-and-OR-amp-amp-and"><a href="#And-and-OR-amp-amp-and" class="headerlink" title="And and OR (&amp;&amp; and ||)"></a>And and OR (&amp;&amp; and ||)</h3><p>阅读 <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-and-operator" target="_blank" rel="noopener">&amp;&amp;</a> 和 <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-or-operator" target="_blank" rel="noopener">||</a>。请注意 &amp;&amp; 的优先级高于 ||。我们将使用它来组合条件。</p><h3 id="vs"><a href="#vs" class="headerlink" title="= vs =="></a>= vs ==</h3><p>不要把这两个混为一谈。 = 为变量赋值， == 比较两个值。确保永远不要做 if(Main.hardMode = true) 之类的事情，否则你会困惑为什么你的世界突然进入困难模式。</p><h3 id="三元"><a href="#三元" class="headerlink" title="三元"></a>三元</h3><p>if-else 条件的更紧凑版本是三元。在<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator" target="_blank" rel="noopener">这里</a>阅读它。基本上它会改变：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token number">1f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对此：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> condition <span class="token operator">?</span> <span class="token punctuation">.</span><span class="token number">1f</span> <span class="token punctuation">:</span> <span class="token number">0f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="NPCSpawnInfo"><a href="#NPCSpawnInfo" class="headerlink" title="NPCSpawnInfo"></a>NPCSpawnInfo</h1><p>NPCSpawnInfo 是一个结构，其中包含与泰拉瑞亚希望生成 NPC 的生成位置有关的所有信息。请参阅有关字段的<a href="http://tmodloader.github.io/tModLoader/html/struct_terraria_1_1_mod_loader_1_1_n_p_c_spawn_info.html" target="_blank" rel="noopener">文档</a>。我们将使用该结构中的值来指导我们的逻辑并做出最终决定。</p><h2 id="玩家生物群系"><a href="#玩家生物群系" class="headerlink" title="玩家生物群系"></a>玩家生物群系</h2><p>使用在 NPCSpawnInfo 中传入的玩家对象而不是 Main.LocalPlayer 在生成逻辑中使用玩家生物群系。<a href="http://tmodloader.github.io/tModLoader/html/struct_terraria_1_1_mod_loader_1_1_n_p_c_spawn_info.html#a894868167c60f17bea09fba0aea811a8" target="_blank" rel="noopener">List of Zone Booleans</a></p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span>spawnInfo<span class="token punctuation">.</span>player<span class="token punctuation">.</span>ZoneJungle<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Vanilla Biome aka Zone</span><span class="token keyword">if</span><span class="token punctuation">(</span>spawnInfo<span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token generic-method function">GetModPlayer<span class="token punctuation">&lt;</span>ExamplePlayer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ZoneExample<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Mod Biome</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Heights"><a href="#Heights" class="headerlink" title="Heights"></a>Heights</h2><p>生成世界时，会与世界一起保存一些值以指定各种高度。 Main.worldSurface 在 spawn 下方几格，而 Main.rockLayer 在岩石变得比泥土更普遍的地方。 Main.maxTilesY 是世界上 Y 的最大值，最低点。我们可以使用这些值和数学来驱动我们的生成条件。我们还可以使用如下图所示的预定义区域，而不是搞乱数学。<br><img src="https://camo.githubusercontent.com/38c32bf6a91f4f83f30a027f7f0bfc507f1e531af29eff461c140542d12202d3/68747470733a2f2f692e696d6775722e636f6d2f39724967534d742e706e67" alt=""><br>在图像的右侧，我们看到为我们预定义的区域，在左侧，我们看到驱动这些区域的数学。例如，以下是等价的：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span>spawnInfo<span class="token punctuation">.</span>player<span class="token punctuation">.</span>ZoneRockLayerHeight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span>spawnInfo<span class="token punctuation">.</span>spawnTileY <span class="token operator">&lt;=</span> Main<span class="token punctuation">.</span>maxTilesY <span class="token operator">-</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> spawnInfo<span class="token punctuation">.</span>spawnTileY <span class="token operator">></span> Main<span class="token punctuation">.</span>rockLayer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们可以使用简单的数学来制作更精确的基于高度的生成条件。例如 if(spawnInfo.spawnTileY &lt;= Main.maxTilesY - 200 &amp;&amp; spawnInfo.spawnTileY &gt; (Main.rockLayer + Main.maxTilesY - 200) / 2) 可用于指定 ZoneRockLayerHeight 下半部分的生成条件，如图所示多于。预定义的基于高度的区域易于使用，但请记住，您可以将数学用于更具体的行为。还请记住，Y 坐标在天空中从 0 开始，并且随着您在世界中下降，值会增加。不要被 WorldGen.lavaLine、WorldGen.waterLine、WorldGen.worldSurfaceHigh 以及这里没有提到的其他值所迷惑，它们不会保存在世界文件中，并且不适用于 NPC 生成。</p><h1 id="Other-Values"><a href="#Other-Values" class="headerlink" title="Other Values"></a>Other Values</h1><p>除了 NPCSpawnInfo，我们还可以在 SpawnChance 逻辑中使用其他字段：</p><ul><li><code>Main.dayTime</code> - 白天为true，晚上为false</li><li><code>NPC.downedGolemBoss</code> 和 <a href="https://github.com/tModLoader/tModLoader/wiki/NPC-Class-Documentation#downedboss1" target="_blank" rel="noopener">other</a> - 如果指定的 Boss 在这个世界上被击败，则为 true</li><li><code>Main.hardMode</code> - 如果处于困难模式，则为true</li><li><code>Main.expertMode</code> - 如果处于专家模式，则为 true</li><li><code>Main.time</code> - 白天介于 0 (4:30 AM) 和 54000 (7:30 PM) 之间以及夜间介于 0 (7:30 PM) 和 32400 (4:30 AM) 之间的值。与 Main.dayTime 一起使用。 Main.time 通常每个刻度增加 1。每个游戏小时是 3600 滴答声。<ul><li>示例：Main.dayTime &amp;&amp; Main.time &lt; 18000.0 - 早上 4:30 到 9:30 之间（因为 18000/3600 == 5）</li></ul></li><li><code>Main.raining</code> - 如果当前正在下雨则为 true</li><li><code>NPC.AnyNPCs(NPCID.IceGolem)</code> - 如果世界上有任何冰傀儡，则为 true。与 !以防止重复生成迷你 Boss。<ul><li>NPC.AnyNPCs(mod.NPCType<PartyZombie>()) 或 NPC.AnyNPCs(mod.NPCType(“PartyZombie”)) - 相同，但适用于修改后的 NPC</li></ul></li><li><code>NPC.CountNPCS(NPCID.AngryNimbus) &lt; 2</code> - 如果世界上存在的 NPC 少于 2 个，则为真</li><li><code>TileID.Sets.Conversion.Sand[spawnInfo.spawnTileType]</code> - 如果生成图块是任何类型的沙子图块，则为 true。 TileID.Sets.Conversion 中还有其他可能有用的集合</li><li><code>Math.Abs(spawnInfo.spawnTileX - Main.spawnTileX) &gt; Main.maxTilesX / 3</code> - 如果生成图块位于地图的外三分之一处，则为 true</li><li><code>NPC.waveNumber</code> - 事件期间的波数</li><li>需要更多？在 Discord 上向我们寻求帮助，我们可以在此列表中添加更多内容。</li></ul><h1 id="SpawnCondition"><a href="#SpawnCondition" class="headerlink" title="SpawnCondition"></a>SpawnCondition</h1><p>SpawnCondition 是一个包含一组即用型字段的类，这些字段模拟各种 Vanilla NPC 生成条件的逻辑。有关可用的 SpawnConditions，请参阅<a href="http://tmodloader.github.io/tModLoader/html/class_terraria_1_1_mod_loader_1_1_spawn_condition.html" target="_blank" rel="noopener">文档</a>。使用 SpawnCondition 字段可以简化 SpawnChance 逻辑。例如，可以像这样轻松实现白天的粘土</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> SpawnCondition<span class="token punctuation">.</span>OverworldDaySlime<span class="token punctuation">.</span>Chance <span class="token operator">*</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>与</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> Main<span class="token punctuation">.</span>dayTime <span class="token operator">&amp;&amp;</span> info<span class="token punctuation">.</span>spawnTileY <span class="token operator">&lt;=</span> Main<span class="token punctuation">.</span>worldSurface <span class="token operator">?</span> <span class="token number">0.1f</span> <span class="token punctuation">:</span> <span class="token number">0f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>下面的每个示例都好像它们在 ModNPC.SpawnChance 方法中一样：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">float</span> <span class="token function">SpawnChance</span><span class="token punctuation">(</span>NPCSpawnInfo spawnInfo<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Example Code Here</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在我的-Mod-块上生成"><a href="#在我的-Mod-块上生成" class="headerlink" title="在我的 Mod 块上生成"></a>在我的 Mod 块上生成</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> spawnInfo<span class="token punctuation">.</span>spawnTileType <span class="token operator">==</span> mod<span class="token punctuation">.</span><span class="token generic-method function">TileType<span class="token punctuation">&lt;</span>Tiles<span class="token punctuation">.</span>CrystalBlock<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">.</span><span class="token number">1f</span> <span class="token punctuation">:</span> <span class="token number">0f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如果玩家在自定义生物群系-区域中生成"><a href="#如果玩家在自定义生物群系-区域中生成" class="headerlink" title="如果玩家在自定义生物群系/区域中生成"></a>如果玩家在自定义生物群系/区域中生成</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> spawnInfo<span class="token punctuation">.</span>player<span class="token punctuation">.</span><span class="token generic-method function">GetModPlayer<span class="token punctuation">&lt;</span>CrystalPlayer<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ZoneCrystal <span class="token operator">?</span> <span class="token punctuation">.</span><span class="token number">1f</span> <span class="token punctuation">:</span> <span class="token number">0f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="生成于丛林神殿"><a href="#生成于丛林神殿" class="headerlink" title="生成于丛林神殿"></a>生成于丛林神殿</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> spawnInfo<span class="token punctuation">.</span>spawnTileType <span class="token operator">==</span> TileID<span class="token punctuation">.</span>LihzahrdBrick <span class="token operator">&amp;&amp;</span> spawnInfo<span class="token punctuation">.</span>lihzahrd <span class="token operator">?</span> <span class="token punctuation">.</span><span class="token number">1f</span> <span class="token punctuation">:</span> <span class="token number">0f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span><span class="token keyword">return</span> SpawnCondition<span class="token punctuation">.</span>JungleTemple<span class="token punctuation">.</span>Chance <span class="token operator">*</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="在日食期间生成"><a href="#在日食期间生成" class="headerlink" title="在日食期间生成"></a>在日食期间生成</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> spawnInfo<span class="token punctuation">.</span>spawnTileY <span class="token operator">&lt;=</span> Main<span class="token punctuation">.</span>worldSurface <span class="token operator">&amp;&amp;</span> Main<span class="token punctuation">.</span>dayTime <span class="token operator">&amp;&amp;</span> Main<span class="token punctuation">.</span>eclipse<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span><span class="token keyword">return</span> SpawnCondition<span class="token punctuation">.</span>SolarEclipse<span class="token punctuation">.</span>Chance <span class="token operator">*</span> <span class="token number">0.05f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记住要测试这个值是否平衡</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="玩家站在太阳板块上"><a href="#玩家站在太阳板块上" class="headerlink" title="玩家站在太阳板块上"></a>玩家站在太阳板块上</h3><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 这里我展示了两种将 boolean 转换为 int 的方法。 （false为 0，true 为 1）</span><span class="token keyword">return</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>tile<span class="token punctuation">[</span>spawnInfo<span class="token punctuation">.</span>playerFloorX<span class="token punctuation">,</span> spawnInfo<span class="token punctuation">.</span>playerFloorY<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TileID<span class="token punctuation">.</span>Sunplate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.2f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span><span class="token keyword">return</span> Convert<span class="token punctuation">.</span><span class="token function">ToInt32</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>tile<span class="token punctuation">[</span>spawnInfo<span class="token punctuation">.</span>playerFloorX<span class="token punctuation">,</span> spawnInfo<span class="token punctuation">.</span>playerFloorY<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TileID<span class="token punctuation">.</span>Sunplate<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.2f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// using System;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="组合片段"><a href="#组合片段" class="headerlink" title="组合片段"></a>组合片段</h1><p>就像上面的例子一样，我们结合逻辑片段来构建我们的最终决定。参见 !、&amp;&amp; 和 ||多于。</p><h2 id="结合-bool-和-float"><a href="#结合-bool-和-float" class="headerlink" title="结合 bool 和 float"></a>结合 bool 和 float</h2><p>SpawnCondition 字段返回代表机会的浮点值，而许多其他条件只是布尔值。这可能会导致一些棘手的代码。让我们尝试为应该在蜘蛛洞穴中但仅在晚上生成的 NPC 组合 SpawnChance 代码。我们可以为此使用 SpawnCondition.SpiderCave 和 Main.dayTime。</p><h3 id="简单的语法"><a href="#简单的语法" class="headerlink" title="简单的语法"></a>简单的语法</h3><p>如果你不是很了解 c#，就将 bool 和 float 分开。使用 !、&amp;&amp; 和 || 在 if 语句中使用布尔值如果需要，然后如果我们通过这些条件，请在返回中使用 SpawnCondition。如果条件失败，代码将返回 0，表示 NPC 不会生成：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Main<span class="token punctuation">.</span>dayTime<span class="token punctuation">)</span>    <span class="token keyword">return</span> SpawnCondition<span class="token punctuation">.</span>SpiderCave<span class="token punctuation">.</span>Chance <span class="token operator">*</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中等语法"><a href="#中等语法" class="headerlink" title="中等语法"></a>中等语法</h3><p>使用我们上面学到的三元组，我们可以使我们的生成条件逻辑更加紧凑。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> <span class="token operator">!</span>Main<span class="token punctuation">.</span>dayTime <span class="token operator">?</span> SpawnCondition<span class="token punctuation">.</span>SpiderCave<span class="token punctuation">.</span>Chance <span class="token operator">*</span> <span class="token number">0.1f</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="复杂的语法"><a href="#复杂的语法" class="headerlink" title="复杂的语法"></a>复杂的语法</h3><p>如果您发现将布尔值分别解释为 false 和 true 时的 0 和 1 时您的逻辑更有意义，那么您可以这样做。这种方法并不是很常见，但可能很有用：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>Main<span class="token punctuation">.</span>dayTime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> SpawnCondition<span class="token punctuation">.</span>SpiderCave<span class="token punctuation">.</span>Chance <span class="token operator">*</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h3 id="为什么我的世界突然进入困难模式？"><a href="#为什么我的世界突然进入困难模式？" class="headerlink" title="为什么我的世界突然进入困难模式？"></a>为什么我的世界突然进入困难模式？</h3><p>许多新程序员混淆了 = 和 ==。 = 为变量赋值， == 比较值。</p><p>如果你这样做 if(Main.hardMode = true) 你将 true 分配给 hardMode，本质上是让世界直接进入 hardmode，而不是你想要的。确保执行 if(Main.hardMode == true) 或更好的 if(Main.hardMode)。</p><h3 id="CS0161-‘-ClassName-SpawnChance-NPCSpawnInfo-’：并非所有代码路径都返回值"><a href="#CS0161-‘-ClassName-SpawnChance-NPCSpawnInfo-’：并非所有代码路径都返回值" class="headerlink" title="CS0161 ‘[ClassName].SpawnChance(NPCSpawnInfo)’：并非所有代码路径都返回值"></a>CS0161 ‘[ClassName].SpawnChance(NPCSpawnInfo)’：并非所有代码路径都返回值</h3><p>这意味着您的代码有机会不返回值。例如。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>spawnInfo<span class="token punctuation">.</span>granite<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0.2f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要像这样修复：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>spawnInfo<span class="token punctuation">.</span>granite<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0.2f</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="CS0029-无法将类型“bool”隐式转换为“float”"><a href="#CS0029-无法将类型“bool”隐式转换为“float”" class="headerlink" title="CS0029 无法将类型“bool”隐式转换为“float”"></a>CS0029 无法将类型“bool”隐式转换为“float”</h3><p>这意味着您可能忘记使用您的逻辑来决定要返回的值。往上看。</p><h1 id="相关参考资料"><a href="#相关参考资料" class="headerlink" title="相关参考资料"></a>相关参考资料</h1><ul><li><a href="http://tmodloader.github.io/tModLoader/html/class_terraria_1_1_mod_loader_1_1_mod_n_p_c.html#ae7713bbbd313012944b958e8eafc35e0" target="_blank" rel="noopener">ModNPC.SpawnChance Documentation</a></li><li><a href="http://tmodloader.github.io/tModLoader/html/struct_terraria_1_1_mod_loader_1_1_n_p_c_spawn_info.html" target="_blank" rel="noopener">NPCSpawnInfo Documentation</a></li><li><a href="http://tmodloader.github.io/tModLoader/html/class_terraria_1_1_mod_loader_1_1_spawn_condition.html" target="_blank" rel="noopener">SpawnCondition Documentation</a></li></ul><h1 id="基础级别未涵盖"><a href="#基础级别未涵盖" class="headerlink" title="基础级别未涵盖"></a>基础级别未涵盖</h1><ul><li>ModNPC.CheckConditions - 自定义 TownNPC 房屋条件（如 Truffle）</li><li>Mod Boss Booleans - 请参阅 ExampleMod 以了解正确的同步和使用</li><li>使用 ModNPC.SpawnNPC - 在生成时操纵 NPC</li><li>GlobalNPC.EditSpawnRate - 操纵最大生成和生成率（水蜡烛）</li><li>GlobalNPC.EditSpawnRange</li><li>GlobalNPC.EditSpawnPool - 填充选项后操作生成池</li><li>GlobalNPC.SpawnNPC</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> tModLoader </tag>
            
            <tag> terraria </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPC 掉落和战利品基础</title>
      <link href="/blog/basic-npc-drops-and-loot/"/>
      <url>/blog/basic-npc-drops-and-loot/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tModLoader/tModLoader/wiki/Basic-NPC-Drops-and-Loot" target="_blank" rel="noopener">Basic NPC Drops and Loot</a></p><h1 id="NPC-掉落和战利品基础"><a href="#NPC-掉落和战利品基础" class="headerlink" title="NPC 掉落和战利品基础"></a>NPC 掉落和战利品基础</h1><p>本指南将教授在杀死敌人时丢弃物品的基础知识。请注意，此页面仅适用于 1.3 tModLoader。 1.4 tModLoader 中的 NPC Loot 完全不同，请参阅 ExampleMod 中的 ModifyNPCLoot 用法示例和基本 NPC Drops and Loot 1.4。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>我们在 ModNPC 类或 GlobalNPC 类中使用 NPCLoot 方法来指定从敌人身上掉落的物品。</p><h3 id="ModNPC-NPCLoot-vs-GlobalNPC-NPCLoot"><a href="#ModNPC-NPCLoot-vs-GlobalNPC-NPCLoot" class="headerlink" title="ModNPC.NPCLoot() vs GlobalNPC.NPCLoot()"></a>ModNPC.NPCLoot() vs GlobalNPC.NPCLoot()</h3><p>我们可以在 2 个地方放置 NPC 战利品代码。如果我们的模组添加了一个 NPC 并且我们想要该 NPC 的特定掉落，请将相关代码放入该 ModNPC 类中。如果我们想为原版 NPC 添加掉落物，请将代码放入 GlobalNPC 类中。如果我们想为所有NPC添加掉落物，例如地牢宝箱钥匙或灵魂如何掉落，请将代码放在GlobalNPC中。请记住，组织是模组可维护性的关键。</p><h3 id="Item-NewItem"><a href="#Item-NewItem" class="headerlink" title="Item.NewItem"></a>Item.NewItem</h3><p>在本指南中，您将看到 Item.NewItem 方法被调用。请参阅<a href="https://github.com/tModLoader/tModLoader/wiki/Useful-Vanilla-Methods#public-static-int-newitemint-x-int-y-int-width-int-height-int-type-int-stack--1-bool-nobroadcast--false-int-pfix--0-bool-nograbdelay--false-bool-reverselookup--false" target="_blank" rel="noopener">有用的香草方法</a>以查看参数。此方法将一个项目生成到游戏世界中。该项目以参数指定的区域为中心生成。</p><h3 id="如何指定我的项目？"><a href="#如何指定我的项目？" class="headerlink" title="如何指定我的项目？"></a>如何指定我的项目？</h3><p>在下面的示例中，我们删除了一个普通项目：ItemID.BeeGun。这可以通过用 ModContent.ItemType<ItemName>() 替换你的 mod 中的一个项目</p><h3 id="一直掉落-1-件物品"><a href="#一直掉落-1-件物品" class="headerlink" title="一直掉落 1 件物品"></a>一直掉落 1 件物品</h3><p>下面显示了最基本的示例。每次杀死此 ModNPC 时，此代码将掉落 1 个蜜蜂枪。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">NPCLoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>BeeGun<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="额外的掉落"><a href="#额外的掉落" class="headerlink" title="额外的掉落"></a>额外的掉落</h3><p>我们可以通过添加其他代码行来添加额外的drop。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">)</span><span class="token punctuation">;</span>Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>HiveWand<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Stack-Size"><a href="#Stack-Size" class="headerlink" title="Stack Size"></a>Stack Size</h3><p>如果我们希望在 Stack 中掉落多个项目，请指定要掉落的数量。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="每个玩家或实例掉落"><a href="#每个玩家或实例掉落" class="headerlink" title="每个玩家或实例掉落"></a>每个玩家或实例掉落</h3><p>//每个玩家的 TODO</p><h4 id="Instanced"><a href="#Instanced" class="headerlink" title="Instanced"></a>Instanced</h4><p>如果你想让一个物品像 boss 包一样掉落（每个玩家一个，客户端（其他玩家不会看到属于其他玩家的掉落物）），请使用 npc.DropItemInstanced 方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp">npc<span class="token punctuation">.</span><span class="token function">DropItemInstanced</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span>position<span class="token punctuation">,</span> npc<span class="token punctuation">.</span>Size<span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Picksaw<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后两个参数是 stack 大小，以及 NPC 和玩家之间是否需要交互才能使其掉落。</p><h2 id="随机性"><a href="#随机性" class="headerlink" title="随机性"></a>随机性</h2><p>大多数时候，我们不希望物品一直掉落，而是希望有很小的机会。我们可以使用随机数生成器让我们的物品有机会掉落。我们将使用 Main.rand.[METHODNAME] 来执行此操作，通常是 Main.rand.Next。</p><h3 id="随机几率"><a href="#随机几率" class="headerlink" title="随机几率"></a>随机几率</h3><p>如果我们想要 1 in X 的机会，推荐使用以下代码。请注意，Next(int max) 方法返回一个从 0 到 max - 1 的数字。在以下示例中，返回值的可能性为：0、1、2、3、4、5 和 6。（绝不是 7！）另外，不要更改 0。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="随机数量"><a href="#随机数量" class="headerlink" title="随机数量"></a>随机数量</h3><p>请记住， Main.rand.Next(int) 可以返回 0 并且不返回最大值，因此请使用以下之一。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">+</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5, 6, or 7</span>Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5, 6, or 7</span><span class="token comment" spellcheck="true">// 错误的！不要使用，有几率掉落0：Item.NewItem(npc.getRect(), ItemID.Beenade, Main.rand.Next(5))；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="指定几率"><a href="#指定几率" class="headerlink" title="指定几率"></a>指定几率</h3><p>有时，X 比率中的 1 可能不是我们想要的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// a 2 in 7 chance</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们甚至可以做具体的百分比。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">NextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">.</span><span class="token number">1323f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 13.23% chance</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="其他条件"><a href="#其他条件" class="headerlink" title="其他条件"></a>其他条件</h2><p>有时我们想要检查其他条件，例如专家模式或当前生物群系。</p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><p>我们可以使用 AND (&amp;&amp;) 等逻辑运算符向 NPCLoot 代码添加条件</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Main<span class="token punctuation">.</span>expertMode<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 专家只放在这里。七分之一的机会进入专家世界。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="双专家模式掉落"><a href="#双专家模式掉落" class="headerlink" title="双专家模式掉落"></a>双专家模式掉落</h3><p>以下是加倍专家 mod 掉落的示例。你可以随心所欲地做，只要确保逻辑是合理的。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">NextBool</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>expertMode <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不同的专家模式掉落"><a href="#不同的专家模式掉落" class="headerlink" title="不同的专家模式掉落"></a>不同的专家模式掉落</h3><p>如果您想更具体地了解您的专家模式条件或任何其他条件，请使用 if-else 语句。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 专家模式下降 10-20，普通模式下降 20-30：</span><span class="token keyword">if</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>expertMode<span class="token punctuation">)</span>    Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生物群落或位置"><a href="#生物群落或位置" class="headerlink" title="生物群落或位置"></a>生物群落或位置</h3><p>下面显示了香草如何掉落光之魂的代码。请注意，此示例更适合 GlobalNPC 类而不是 NPCLoot 类，因为它会为所有在生物群落/区域中死亡的 NPC 添加掉落物。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 我们检查了一些过滤掉 Boss 和小动物的东西，以及 npc 死亡的深度。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>hardMode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>npc<span class="token punctuation">.</span>boss <span class="token operator">&amp;&amp;</span> npc<span class="token punctuation">.</span>lifeMax <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> npc<span class="token punctuation">.</span>damage <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>npc<span class="token punctuation">.</span>friendly <span class="token operator">&amp;&amp;</span> npc<span class="token punctuation">.</span>position<span class="token punctuation">.</span>Y <span class="token operator">></span> Main<span class="token punctuation">.</span>rockLayer <span class="token operator">*</span> <span class="token number">16.0</span> <span class="token operator">&amp;&amp;</span> npc<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">></span> <span class="token number">0f</span> <span class="token operator">&amp;&amp;</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">NextBool</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>expertMode <span class="token operator">?</span> <span class="token number">2</span> <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>player<span class="token punctuation">[</span>Player<span class="token punctuation">.</span><span class="token function">FindClosest</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span>position<span class="token punctuation">,</span> npc<span class="token punctuation">.</span>width<span class="token punctuation">,</span> npc<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ZoneHoly<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>SoulofLight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义生物群落"><a href="#自定义生物群落" class="headerlink" title="自定义生物群落"></a>自定义生物群落</h3><p>将上述示例中的 .ZoneHoly 替换为 .GetModPlayer<ExamplePlayer>().ZoneExample。</p><h3 id="杀死NPC的玩家"><a href="#杀死NPC的玩家" class="headerlink" title="杀死NPC的玩家"></a>杀死NPC的玩家</h3><p>有时我们想为最后攻击 NPC 的玩家做点什么。 NPC 有一个 lastInteraction 字段，默认为 255，这意味着没有玩家损坏过 NPC。如果 townNPC 或陷阱对 NPC 造成所有伤害，则 NPC 有可能在 lastInteraction 仍为 255 时死亡。因此，通常用于奖励或影响杀死 NPC 的玩家的代码可能看起来像这样，如果需要，可以使用 FindClosestPlayer：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> playerIndex <span class="token operator">=</span> npc<span class="token punctuation">.</span>lastInteraction<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Main<span class="token punctuation">.</span>player<span class="token punctuation">[</span>playerIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>active <span class="token operator">||</span> Main<span class="token punctuation">.</span>player<span class="token punctuation">[</span>playerIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>dead<span class="token punctuation">)</span><span class="token punctuation">{</span>    playerIndex <span class="token operator">=</span> npc<span class="token punctuation">.</span><span class="token function">FindClosestPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 因为 lastInteraction 可能是无效的玩家，所以回退到最近的玩家</span><span class="token punctuation">}</span>Player player <span class="token operator">=</span> Main<span class="token punctuation">.</span>player<span class="token punctuation">[</span>playerIndex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 其他影响玩家的代码。如果相关，可能需要 ModPackets。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="随机选择"><a href="#随机选择" class="headerlink" title="随机选择"></a>随机选择</h2><p>很多时候，我们想从一组选择中掉落一个随机项目。有幼稚的方法和更好的方法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> choice <span class="token operator">=</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>npc<span class="token punctuation">.</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>npc<span class="token punctuation">.</span>position<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> npc<span class="token punctuation">.</span>width<span class="token punctuation">,</span> npc<span class="token punctuation">.</span>height<span class="token punctuation">,</span> ModContent<span class="token punctuation">.</span><span class="token generic-method function">ItemType<span class="token punctuation">&lt;</span>PuritySpiritMask<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>npc<span class="token punctuation">.</span>position<span class="token punctuation">.</span>X<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>npc<span class="token punctuation">.</span>position<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> npc<span class="token punctuation">.</span>width<span class="token punctuation">,</span> npc<span class="token punctuation">.</span>height<span class="token punctuation">,</span> ModContent<span class="token punctuation">.</span><span class="token generic-method function">ItemType<span class="token punctuation">&lt;</span>BunnyMask<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码也可以用 switch 语句代替。<br>更好的方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>Utilities<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --------</span><span class="token keyword">var</span> dropChooser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeightedRandom</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dropChooser<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span><span class="token generic-method function">ItemType<span class="token punctuation">&lt;</span>Items<span class="token punctuation">.</span>Armor<span class="token punctuation">.</span>PuritySpiritMask<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dropChooser<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span><span class="token generic-method function">ItemType<span class="token punctuation">&lt;</span>Items<span class="token punctuation">.</span>Armor<span class="token punctuation">.</span>BunnyMask<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice <span class="token operator">=</span> dropChooser<span class="token punctuation">;</span>Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方法更容易维护。您还可以为不同的选择分配不同的权重。这种用法可能更高级或专家级别，但我想我会提到它。<br>另一种方法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> choices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ModContent<span class="token punctuation">.</span><span class="token generic-method function">ItemType<span class="token punctuation">&lt;</span>CarKey<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ModContent<span class="token punctuation">.</span><span class="token generic-method function">ItemType<span class="token punctuation">&lt;</span>ExampleLightPet<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>PinkJellyfishJar <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice <span class="token operator">=</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>choices<span class="token punctuation">)</span><span class="token punctuation">;</span>Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="What-about-Vanilla-NPC"><a href="#What-about-Vanilla-NPC" class="headerlink" title="What about Vanilla NPC?"></a>What about Vanilla NPC?</h2><p>如果您想从原版 NPC 中获得物品掉落，所有相同的想法都适用，只是我们将代码放入 GlobalNPC 类中，并使用 if 语句过滤掉我们没有的 npc 掉落，而不是将我们的代码放在 ModNPC 类中不想影响</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">class</span> <span class="token class-name">MyGlobalNPC</span> <span class="token punctuation">:</span> GlobalNPC<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">NPCLoot</span><span class="token punctuation">(</span>NPC npc<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span>type <span class="token operator">==</span> NPCID<span class="token punctuation">.</span>Frankenstein<span class="token punctuation">)</span>        <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//在这里添加指定的 Frankenstein NPC 调用物品</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果您想向其他原版 npc 添加掉落物，请在此处添加 if 语句。</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特别案例"><a href="#特别案例" class="headerlink" title="特别案例"></a>特别案例</h3><p>一些原版 Boss 需要特殊条件才能检测到它们何时被杀死并准备好掉落战利品。<br>世界吞噬者：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>npc<span class="token punctuation">.</span>boss <span class="token operator">&amp;&amp;</span> System<span class="token punctuation">.</span>Array<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> NPCID<span class="token punctuation">.</span>EaterofWorldsBody<span class="token punctuation">,</span> NPCID<span class="token punctuation">.</span>EaterofWorldsHead<span class="token punctuation">,</span> NPCID<span class="token punctuation">.</span>EaterofWorldsTail <span class="token punctuation">}</span><span class="token punctuation">,</span> npc<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>双胞胎：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>npc<span class="token punctuation">.</span>type <span class="token operator">==</span> NPCID<span class="token punctuation">.</span>Retinazer <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>NPC<span class="token punctuation">.</span><span class="token function">AnyNPCs</span><span class="token punctuation">(</span>NPCID<span class="token punctuation">.</span>Spazmatism<span class="token punctuation">)</span> <span class="token operator">||</span> npc<span class="token punctuation">.</span>type <span class="token operator">==</span> NPCID<span class="token punctuation">.</span>Spazmatism <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>NPC<span class="token punctuation">.</span><span class="token function">AnyNPCs</span><span class="token punctuation">(</span>NPCID<span class="token punctuation">.</span>Retinazer<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h3 id="NextBool"><a href="#NextBool" class="headerlink" title="NextBool"></a>NextBool</h3><p>如果您想使用它而不是将随机数与 0 进行比较，可以使用 NextBool 方法</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">NextBool</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Item<span class="token punctuation">.</span><span class="token function">NewItem</span><span class="token punctuation">(</span>npc<span class="token punctuation">.</span><span class="token function">getRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ItemID<span class="token punctuation">.</span>Beenade<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> tModLoader </tag>
            
            <tag> terraria </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹丸基础</title>
      <link href="/blog/basic-projectile/"/>
      <url>/blog/basic-projectile/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile" target="_blank" rel="noopener">Basic Projectile</a></p><h1 id="什么是弹丸"><a href="#什么是弹丸" class="headerlink" title="什么是弹丸"></a>什么是弹丸</h1><p>在开始修改射弹之前，您应该了解物品和射弹之间的区别。物品是可以存储在您的库存中的对象，而射弹是例如从武器或敌人射出的对象。</p><h1 id="怎么使用弹丸"><a href="#怎么使用弹丸" class="headerlink" title="怎么使用弹丸"></a>怎么使用弹丸</h1><p>泰拉瑞亚中的许多物品由于射弹而具有功能，包括枪和弓（分别是子弹和箭）、激光、炸弹和其他投掷物品，以及大多数魔法武器。您可能认为不是射弹的其他一些物品包括：抓钩、连枷、长矛、宠物、召唤物、钻头和悠悠球。许多敌人也会产生射弹。</p><h1 id="制作弹丸"><a href="#制作弹丸" class="headerlink" title="制作弹丸"></a>制作弹丸</h1><p>要在泰拉瑞亚中创建弹丸，您必须首先创建一个“继承”自 ModProjectile 的类。为此，请在您的 mod 源目录 (My Games\Terraria\ModLoader\Mod Sources\MyModName) 中创建一个 .cs 文件，然后在文本编辑器中打开该文件。将以下内容粘贴到该文件中，将 NameHere 替换为您的项目的内部名称，并将 ModNamespaceHere 替换为您的 mod 的文件夹名称/命名空间。 （一个常见的错误是在内部名称中使用撇号或空格，不要这样做，计算机不会理解。）</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> Terraria<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>ID<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>ModLoader<span class="token punctuation">;</span><span class="token keyword">namespace</span> ModNamespaceHere<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameHere</span> <span class="token punctuation">:</span> ModProjectile    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">SetStaticDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DisplayName<span class="token punctuation">.</span><span class="token function">SetDefault</span><span class="token punctuation">(</span><span class="token string">"English Display Name Here"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">SetDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            projectile<span class="token punctuation">.</span>arrow <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            projectile<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            projectile<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            projectile<span class="token punctuation">.</span>aiStyle <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            projectile<span class="token punctuation">.</span>friendly <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            projectile<span class="token punctuation">.</span>ranged <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            aiType <span class="token operator">=</span> ProjectileID<span class="token punctuation">.</span>WoodenArrowFriendly<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Additional hooks/methods here.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在您有了一个 .cs 文件，将您的纹理文件（您制作的一个 .png 图像文件）放入该 .cs 文件所在的文件夹中。确保阅读自动加载，这样您就知道如何满足计算机对其文件名和文件夹结构的期望。</p><h1 id="我找不到我的投射物"><a href="#我找不到我的投射物" class="headerlink" title="我找不到我的投射物"></a>我找不到我的投射物</h1><p>请记住，物品和射弹是不同的。一个常见的错误是模组制作者会制造弹丸，但不明白他们需要使用该弹丸制造一些东西。例如，对于投掷刀武器，您需要同时制作物品和射弹。弹药物品也需要一个与之相关的独特射弹。您并不总是需要和项目和射弹，例如如果射弹是由 npc 生成的。测试弹丸的最简单方法是制作一个物品并将 item.shoot 设置为弹丸。例如，item.shoot = ModContent.ProjectileType<MyProjectile>()。参见 ExampleMod 以获取由 Items 生成的 Projectiles 的许多示例，它们位于不同的文件夹中，但很容易找到。</p><h1 id="SetDefaults"><a href="#SetDefaults" class="headerlink" title="SetDefaults"></a>SetDefaults</h1><p>弹丸最重要的部分是 SetDefaults。 SetDefaults 是您为射弹设置值的地方，例如命中框的宽度和高度，射弹是友好还是敌对，以及射弹将使用哪个 AI。请参阅 <a href="https://github.com/tModLoader/tModLoader/wiki/Projectile-Class-Documentation" target="_blank" rel="noopener">Projectile 类文档</a>以查看 SetDefaults 中通常设置的值的含义。您还可以通过访问<a href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-Projectile-Field-Values" target="_blank" rel="noopener">Vanilla弹丸字段值</a>来查看Vanilla弹丸值。可以在 <a href="https://github.com/tModLoader/tModLoader/tree/master/ExampleMod/Projectiles" target="_blank" rel="noopener">ExampleMod.Projectiles</a> 中找到许多不同射弹的示例</p><h2 id="projectile-damage"><a href="#projectile-damage" class="headerlink" title="projectile.damage"></a>projectile.damage</h2><p>一个常见的错误是在 SetDefaults 中设置 projectile.damage，这不起作用，因为在生成射弹时，射弹的伤害值总是被传递给 Projectile.NewProjectile 的值覆盖。通常物品或生成该物品的NPC会影响伤害。</p><h2 id="drawOffsetX-drawOriginOffsetY-drawOffsetX"><a href="#drawOffsetX-drawOriginOffsetY-drawOffsetX" class="headerlink" title="drawOffsetX, drawOriginOffsetY, drawOffsetX"></a>drawOffsetX, drawOriginOffsetY, drawOffsetX</h2><p>这些是 ModProjectile 字段，与正确将命中框居中到精灵相关。阅读<a href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#drawing-and-collision" target="_blank" rel="noopener">绘图和碰撞</a>了解更多信息。</p><h1 id="其他-Hooks-Methods"><a href="#其他-Hooks-Methods" class="headerlink" title="其他 Hooks/Methods"></a>其他 Hooks/Methods</h1><p><a href="http://tmodloader.github.io/tModLoader/html/class_terraria_1_1_mod_loader_1_1_mod_projectile.html" target="_blank" rel="noopener">ModProjectile 文档</a>列出了您将要使用的许多其他 Hooks/Methods 来使您的射弹独一无二。例如，如果您想在弹丸击中时应用减益效果，您可以使用 OnHitNPC。要在弹丸击中 Tile 时执行某些操作，请使用 OnTileCollide。请参阅 ExampleMod 中的文档和用法以了解如何正确使用它们。</p><h1 id="什么是-AI"><a href="#什么是-AI" class="headerlink" title="什么是 AI"></a>什么是 AI</h1><p>射弹的 AI 是射弹最重要的方面，它控制射弹在生成后如何移动和动作。新模组最容易通过分配 projectile.aiStyle = #; 来首先依赖其他原版射弹中已经使用过的 AI 代码。和 aiType = ProjectileID.NameHere;。这被称为模仿Vanilla弹丸。当你渴望更高级的运动时，你会意识到模仿Vanilla射弹 AI 是非常有限的。我们将在下面讨论模仿和自定义 AI。</p><h1 id="使用-Vanilla-AI"><a href="#使用-Vanilla-AI" class="headerlink" title="使用 Vanilla AI"></a>使用 Vanilla AI</h1><p>我们可以使用Vanilla AI 来制作我们的射弹原型。让我们做一个回旋镖。使用与像回旋镖一样移动的Vanilla弹丸相同的aiStyle，我们可以制作回旋镖。您可以在 Vanilla Projectile Field Values 中查找回旋镖弹丸，您会发现回旋镖都使用 3 的 aiStyle：<br><img src="https://camo.githubusercontent.com/507c1c4b98cf977713066cbb25ed56bc96e857941f2615698fdb05e83132503c/68747470733a2f2f692e696d6775722e636f6d2f525361785636542e706e67" alt=""></p><p>我们现在可以使用 projectile.aiStyle = 3;在我们的代码中。为了使这个回旋镖更容易，我们可以使用 projectile.CloneDefaults(ProjectileID.EnchantedBoomerang)，它也将复制所有其他默认值。这样做，你会得到一个几乎和原版射弹一样的射弹：<br><img src="https://camo.githubusercontent.com/5f1a9878e94ecadf7955bdfdb4538b982150b3c5ba4ca828d811dc32ac297d4f/68747470733a2f2f692e696d6775722e636f6d2f434c324d7761462e706e67" alt=""></p><p>这是生成的代码。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">SetDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span><span class="token function">CloneDefaults</span><span class="token punctuation">(</span>ProjectileID<span class="token punctuation">.</span>EnchantedBoomerang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// projectile.aiStyle = 3; This line is not needed since CloneDefaults sets it.</span>    aiType <span class="token operator">=</span> ProjectileID<span class="token punctuation">.</span>EnchantedBoomerang<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那个灰尘很酷，但是如果你想改变那个灰尘或其他任何小东西的颜色，你不能依赖 aiStyle 和 aiType。要进行更改，您需要查阅 <a href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption" target="_blank" rel="noopener">Vanilla Code Adaption 指南</a>以调整现有代码或继续阅读以了解如何从头开始编写 AI 代码。请记住，使用 projectile.aiStyle 和 aiType 是一种原型设计工具，任何在 mod 中远程有趣的东西都可能需要编写自己的 AI 代码或改编 vanilla 代码。</p><h1 id="自定义-AI"><a href="#自定义-AI" class="headerlink" title="自定义 AI"></a>自定义 AI</h1><p>本节将讨论可以合并到 AI 中的元素。如果您使用 projectile.CloneDefaults 复制其他射弹默认值，请记住将 projectile.aiStyle 设置回 0。自定义 AI 的所有代码都进入 ModProjectile.AI 方法。</p><h2 id="Timers"><a href="#Timers" class="headerlink" title="Timers"></a>Timers</h2><p>许多射弹使用计时器来延迟动作。通常我们使用 projectile.ai[0] 或 projectile.ai[1] 因为这些值会自动同步，但我们也可以使用类字段。在这里，我们数到 30，或者换句话说，半秒。</p><pre class="line-numbers language-csharp"><code class="language-csharp">projectile<span class="token punctuation">.</span>ai<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1f</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>ai<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">30f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 半秒过去了。重置定时器</span>    projectile<span class="token punctuation">.</span>ai<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0f</span><span class="token punctuation">;</span>    projectile<span class="token punctuation">.</span>netUpdate <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在这里做点什么，也许换一个新的状态。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重力"><a href="#重力" class="headerlink" title="重力"></a>重力</h2><p>抛射物实际上并不存在重力，每个随着重力移动的抛射物实际上只是在其 AI 中具有代码。要实现重力，只需向 projectile.velocity.Y 添加一个小值：</p><pre class="line-numbers language-csharp"><code class="language-csharp">projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">0.1f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 箭重力0.1f，刀重力0.4f</span><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">></span> <span class="token number">16f</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这个检查实现了“终端速度”。我们不希望弹丸越来越快。超过 16f 这个射弹会穿过方块，所以这个检查很有用。</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">16f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="延迟重力"><a href="#延迟重力" class="headerlink" title="延迟重力"></a>延迟重力</h3><p>箭和飞刀射弹在受到重力影响之前都会等待几帧：</p><pre class="line-numbers language-csharp"><code class="language-csharp">projectile<span class="token punctuation">.</span>ai<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在应用重力之前使用计时器等待 15 个滴答声。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>ai<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">15f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span>ai<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15f</span><span class="token punctuation">;</span>    projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">></span> <span class="token number">16f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">16f</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抗风能力"><a href="#抗风能力" class="headerlink" title="抗风能力"></a>抗风能力</h2><p>通过减少 projectile.velocity.X 的多重性，我们可以轻松实现风阻。结合计时器有条件地产生这种效果。</p><pre class="line-numbers language-csharp"><code class="language-csharp">projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>X <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>X <span class="token operator">*</span> <span class="token number">0.97f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0.99f 用于滚动手榴弹减速。尝试 0.9f 和 0.99f 之间的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Rotation"><a href="#Rotation" class="headerlink" title="Rotation"></a>Rotation</h2><h3 id="恒定旋转"><a href="#恒定旋转" class="headerlink" title="恒定旋转"></a>恒定旋转</h3><p>我们可以增加 AI 中的 projectile.rotation 使其像回旋镖一样旋转。</p><pre class="line-numbers language-csharp"><code class="language-csharp">projectile<span class="token punctuation">.</span>rotation <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0.4f</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>projectile<span class="token punctuation">.</span>direction<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="面向前方"><a href="#面向前方" class="headerlink" title="面向前方"></a>面向前方</h3><p>沿行进方向旋转通常用于箭头等射弹。如果您的弹丸朝向正确，则无需添加 MathHelper.PiOver2（可在 Microsoft.Xna.Framework 中找到）。如果您的弹丸指向上方，则需要这样做。</p><pre class="line-numbers language-csharp"><code class="language-csharp">projectile<span class="token punctuation">.</span>rotation <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span><span class="token function">ToRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> MathHelper<span class="token punctuation">.</span>PiOver2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// projectile sprite faces up</span><span class="token comment" spellcheck="true">// or</span>projectile<span class="token punctuation">.</span>rotation <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span><span class="token function">ToRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// projectile faces sprite right</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="spriteDirection"><a href="#spriteDirection" class="headerlink" title="spriteDirection"></a>spriteDirection</h3><p>如果你的精灵在向左射击时是倒置的，你需要设置这个：projectile.spriteDirection = projectile.direction;有关说明和示例，请参阅<a href="https://github.com/tModLoader/tModLoader/wiki/Basic-Projectile#drawing-and-collision" target="_blank" rel="noopener">绘图和碰撞</a>。</p><h2 id="Dust"><a href="#Dust" class="headerlink" title="Dust"></a>Dust</h2><p>在 AI 中生成灰尘以获得视觉效果。随机放置、灰尘和频率在视觉上令人愉悦。这是 Enchanted Boomerang 尘土生成（aiStyle 3，aiType ProjectileID.EnchantedBoomerang）：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// only spawn 20% of the time</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> choice <span class="token operator">=</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// choose a random number: 0, 1, or 2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// use that number to select dustID: 15, 57, or 58</span>    <span class="token punctuation">{</span>        choice <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        choice <span class="token operator">=</span> <span class="token number">57</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        choice <span class="token operator">=</span> <span class="token number">58</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Spawn the dust</span>    Dust<span class="token punctuation">.</span><span class="token function">NewDust</span><span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>position<span class="token punctuation">,</span> projectile<span class="token punctuation">.</span>width<span class="token punctuation">,</span> projectile<span class="token punctuation">.</span>height<span class="token punctuation">,</span> choice<span class="token punctuation">,</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>X <span class="token operator">*</span> <span class="token number">0.25f</span><span class="token punctuation">,</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">*</span> <span class="token number">0.25f</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0.7f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dust-Trail"><a href="#Dust-Trail" class="headerlink" title="Dust Trail"></a>Dust Trail</h3><p>每次 AI 更新都会产生 1 个灰尘来完成一条灰尘轨迹。</p><h2 id="Lighting"><a href="#Lighting" class="headerlink" title="Lighting"></a>Lighting</h2><p>模组制作者对照明有许多不同的定义。如果要添加粒子，请参阅“灰尘”部分。如果您希望射弹纹理不受光照影响，请参阅 ModProjectile.GetAlpha。如果你想让弹丸发出白光，你可以设置 projectile.light = 1f; （或 0 到 1 之间的任何数字）在 SetDefaults 中。最后，如果你想发出彩色光而不是产生的灰尘，照亮附近 Tile 的光，在你的 AI 方法中使用 Lighting.AddLight：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Lighting<span class="token punctuation">.</span><span class="token function">AddLight</span><span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>Center<span class="token punctuation">,</span> <span class="token number">0.9f</span><span class="token punctuation">,</span> <span class="token number">0.1f</span><span class="token punctuation">,</span> <span class="token number">0.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// R G B 值从 0 到 1f。这是猩红之心宠物的红色</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Sound"><a href="#Sound" class="headerlink" title="Sound"></a>Sound</h2><h3 id="重复声音"><a href="#重复声音" class="headerlink" title="重复声音"></a>重复声音</h3><p>soundDelay 字段将自动减少每一帧。检查它是否为 0，然后将其设置为一个值并播放声音将导致重复声音。此示例来自回旋镖 aiStyle (3)。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>soundDelay <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span>soundDelay <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    Main<span class="token punctuation">.</span><span class="token function">PlaySound</span><span class="token punctuation">(</span>SoundID<span class="token punctuation">.</span>Item7<span class="token punctuation">,</span> projectile<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Splitting-Spawning-Projectiles"><a href="#Splitting-Spawning-Projectiles" class="headerlink" title="Splitting/Spawning Projectiles"></a>Splitting/Spawning Projectiles</h2><p>Crystal Bullet 和腐化者天灾 (EatersBite) 在死亡时都会生成新的投射物。我们通常会在 Kill 或 OnTileCollide 中看到生成的射弹，但我们也可以在 AI 中做到这一点。生成射弹时，我们需要注意多人游戏兼容性，并确保仅在 Main.myPlayer == projectile.owner 为 true 时生成射弹以防止出现问题。缩小射弹伤害是典型的。请参阅 Projectile.NewProjectile 以了解多人游戏的参数和用法。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 此代码生成 3 个与射弹相反方向的射弹，速度随机变化。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>OptionallySomeCondition <span class="token operator">&amp;&amp;</span> projectile<span class="token punctuation">.</span>owner <span class="token operator">==</span> Main<span class="token punctuation">.</span>myPlayer<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 计算其他射弹的新速度。</span>        <span class="token comment" spellcheck="true">// 以 40% 到 70% 的速度反弹，加上 -8 到 8 之间的随机值</span>        <span class="token keyword">float</span> speedX <span class="token operator">=</span> <span class="token operator">-</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>X <span class="token operator">*</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">NextFloat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">4f</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">7f</span><span class="token punctuation">)</span> <span class="token operator">+</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">NextFloat</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8f</span><span class="token punctuation">,</span> <span class="token number">8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> speedY <span class="token operator">=</span> <span class="token operator">-</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">*</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.01f</span> <span class="token operator">+</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.4f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// This is Vanilla code, a little more obscure.</span>        <span class="token comment" spellcheck="true">// 生成射弹。</span>        Projectile<span class="token punctuation">.</span><span class="token function">NewProjectile</span><span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>position<span class="token punctuation">.</span>X <span class="token operator">+</span> speedX<span class="token punctuation">,</span> projectile<span class="token punctuation">.</span>position<span class="token punctuation">.</span>Y <span class="token operator">+</span> speedY<span class="token punctuation">,</span> speedX<span class="token punctuation">,</span> speedY<span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>damage <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> projectile<span class="token punctuation">.</span>owner<span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Homing"><a href="#Homing" class="headerlink" title="Homing"></a>Homing</h2><p>// TODO 简而言之：您可以循环 Main.npc，并选择一个有效的目标。然后，对于您的射弹所具有的目标，您调整射弹的速度，使其向目标移动。</p><h2 id="Follow-Mouse"><a href="#Follow-Mouse" class="headerlink" title="Follow Mouse"></a>Follow Mouse</h2><p>// TODO 如果你想让弹丸正好在光标上，只需在 AI 中将 projectile.position 设置为 Main.MouseWorld： projectile.position = Main.MouseWorld</p><h2 id="Held-Projectile"><a href="#Held-Projectile" class="headerlink" title="Held Projectile"></a>Held Projectile</h2><p>// TODO</p><h2 id="Fade-In-Out"><a href="#Fade-In-Out" class="headerlink" title="Fade In/Out"></a>Fade In/Out</h2><p>许多子弹会逐渐消失，因此当它们产生时它们不会与它们出现的枪口重叠。您可以使用 projectile.alpha = 255 将弹丸设置为透明生成；在 SetDefaults 中。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>alpha <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span>alpha <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Decrease alpha, increasing visibility.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ExampleAnimatedPierce 显示同时使用淡入和淡出。</p><h2 id="Animation-Multiple-Frames"><a href="#Animation-Multiple-Frames" class="headerlink" title="Animation/Multiple Frames"></a>Animation/Multiple Frames</h2><p>弹丸动画，切换要绘制精灵的哪一帧，发生在 AI 中。确保设置 Main.projFrames[projectile.type] = #;首先在 SetStaticDefaults 中。您可以将 projectile.frame 设置为您想要绘制的任何帧。</p><h3 id="Looping-Cycling"><a href="#Looping-Cycling" class="headerlink" title="Looping/Cycling"></a>Looping/Cycling</h3><p>您可以使用 projectile.frameCounter 和 Main.projFrames[projectile.type] 来实现循环动画。示例：ExampleAnimatedPierce</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 循环遍历 4 个动画帧，每个帧花费 5 个刻度。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>projectile<span class="token punctuation">.</span>frameCounter <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span>frameCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>projectile<span class="token punctuation">.</span>frame <span class="token operator">>=</span> Main<span class="token punctuation">.</span>projFrames<span class="token punctuation">[</span>projectile<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        projectile<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Or, more compactly:</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>projectile<span class="token punctuation">.</span>frameCounter <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    projectile<span class="token punctuation">.</span>frameCounter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    projectile<span class="token punctuation">.</span>frame <span class="token operator">=</span> <span class="token operator">++</span>projectile<span class="token punctuation">.</span>frame <span class="token operator">%</span> Main<span class="token punctuation">.</span>projFrames<span class="token punctuation">[</span>projectile<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="AiStyle-1"><a href="#AiStyle-1" class="headerlink" title="AiStyle 1"></a>AiStyle 1</h3><p>弹丸AiStyle 1，用于游戏中的许多简单弹丸，长度超过3000行。如果您尝试使用 <a href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption" target="_blank" rel="noopener">Advanced Vanilla Code Adaption</a> 指南调整此 AI，您可能会感到沮丧。这是没有所有 ProjectileID 特定代码的 AiStyle 的简要概述：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 可选：如果弹丸应该淡入，淡入：</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>alpha <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        projectile<span class="token punctuation">.</span>alpha <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>alpha <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        projectile<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置旋转面向当前轨迹：</span>projectile<span class="token punctuation">.</span>rotation <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">Atan2</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>X<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.57f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 或者，这个版本更容易阅读：</span>projectile<span class="token punctuation">.</span>rotation <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span><span class="token function">ToRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> MathHelper<span class="token punctuation">.</span>PiOver2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 限制向下的速度，以防你向这个射弹添加重力</span><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">></span> <span class="token number">16f</span><span class="token punctuation">)</span>    projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>Y <span class="token operator">=</span> <span class="token number">16f</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，没有所有 ProjectileID 特定代码的 1 的 Projectile AiStyle 只有几行代码，并且与上面的淡入和旋转示例相匹配。</p><h1 id="Bounce-and-OnTileCollide"><a href="#Bounce-and-OnTileCollide" class="headerlink" title="Bounce and OnTileCollide"></a>Bounce and OnTileCollide</h1><p>许多射弹在与实心 Tile 碰撞时会反弹。这种行为在技术上不是 AI 的一部分，因为它发生在称为 OnTileCollide 的方法中。默认情况下，当弹丸与 Tile 碰撞时，速度会迅速降低，这样弹丸就会停下来，弹丸就会被杀死。通过覆盖 ModProjectile.OnTileCollide 并返回 false，我们可以避免该逻辑并实现我们自己的逻辑。如果我们返回 true，我们可以在保留原版逻辑的同时添加额外的逻辑。最常见的用途是让你的弹丸反弹。一些弹丸通过失去一些速度而真实地弹跳，而另一些弹丸则不切实际地弹跳并在新的方向上保持其原始速度。一些射弹的反弹有限，这通常是通过利用 projectile.penetrate 来完成的。当覆盖 ModProjectile.OnTileCollide 时，杀死射弹、产生 Tile 碰撞灰尘和播放碰撞声音都是可能需要实现的东西。</p><h2 id="OnTileCollide-示例"><a href="#OnTileCollide-示例" class="headerlink" title="OnTileCollide 示例"></a>OnTileCollide 示例</h2><p><a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/Projectiles/ExampleBullet.cs#L34" target="_blank" rel="noopener">ExampleBullet.cs</a> 展示了有限的反弹、Tile 碰撞灰尘、Tile 碰撞声音和弹跳，同时完全保持速度。</p><p><a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/Projectiles/ExampleCloneProjectile.cs#L24" target="_blank" rel="noopener">ExampleCloneProjectile.cs</a> 展示了返回 true 以保留原始碰撞逻辑，同时还产生少量次要射弹。</p><p><a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/Projectiles/SparklingBall.cs#L27" target="_blank" rel="noopener">SparklingBall.cs</a> 与 <a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/Projectiles/ExampleBullet.cs#L34" target="_blank" rel="noopener">ExampleBullet.cs</a> 类似，不同之处在于速度按 0.75f 缩放，从而在每次反弹时减慢弹丸的速度。</p><p><a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/Projectiles/ExampleFlailProjectile.cs#L134" target="_blank" rel="noopener">ExampleFlailProjectile.cs</a> 也类似，只是速度降低到原来速度的五分之一，让武器感觉很重。此代码还显示了使用弹丸的速度来影响声音和灰尘的产生。这允许连枷仅在速度足够快的情况下才会发出碰撞声音，而如果连枷只是缓慢滚动则静音。 ExampleFlailProjectile 也跳过使用 projectile.projectile 操作，因为它不会像 SparklingBall 和 ExampleBullet 那样在弹跳一定次数后杀死自己。</p><p>通过上述示例，您可以制作所需的 Tile 碰撞行为。如果您尝试克隆原版射弹行为，请在 Projectile.HandleMovement 中搜索 ProjectileID 编号或射弹 aiStyle 编号以查找相关代码。改编指南中的 <a href="https://github.com/tModLoader/tModLoader/wiki/Advanced-Vanilla-Code-Adaption#example-item-and-projectile-shadowbeam-staff-clone" target="_blank" rel="noopener">Shadowbeam Staff Clone</a> 示例显示了查找 AI 代码未涵盖的普通代码片段所需的这一思考过程和其他思考过程。</p><h1 id="Drawing-and-Collision"><a href="#Drawing-and-Collision" class="headerlink" title="Drawing and Collision"></a>Drawing and Collision</h1><p>你可能会发现自己注意到你的射弹在不应该撞到墙壁的时候会撞到墙壁，或者有一个奇怪的碰撞箱。首先，值得重申的是 projectile.width 和 projectile.height 对应于射弹的碰撞箱，而不是使用的精灵。您几乎从不希望宽度或高度不同，它应该是方形的。你也永远不想使用 projectile.scale 因为原版绘图代码并没有真正正确地考虑到它。 sprite 的绘制试图用 sprite 覆盖 hitbox，这个 sprite 的绘制受到 Main.DrawProj 方法中完成的各种数学位的影响。</p><h2 id="Vertical-Sprite-Example"><a href="#Vertical-Sprite-Example" class="headerlink" title="Vertical Sprite Example"></a>Vertical Sprite Example</h2><p>让我们通过这个例子来探索碰撞和绘图问题并努力解决它们。这是精灵，它是 48x70 像素：<br><img src="https://camo.githubusercontent.com/e90932fdde6de995464aeb36a3d1fd699eb606133f60cad535a0af811887935f/68747470733a2f2f692e696d6775722e636f6d2f79344f634a41762e706e67" alt=""><br>这个 ModProjectile 的重要部分如下：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// SetDefatults</span>projectile<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>projectile<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// AI</span>projectile<span class="token punctuation">.</span>rotation <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span><span class="token function">ToRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> MathHelper<span class="token punctuation">.</span><span class="token function">ToRadians</span><span class="token punctuation">(</span><span class="token number">90f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们的目标是让这个射弹的黄色部分成为碰撞箱。黄色区域是 8 x 8 像素，所以我们已经将宽度和高度设置为 8。那里的 projectile.rotation 代码将旋转设置为速度，同时添加 90 度旋转，因为我们使用的精灵碰巧面朝上，而不是游戏预期的向右。在本指南中，我们将使用 <a href="https://forums.terraria.org/index.php?threads/modders-toolkit-a-mod-for-modders-doing-modding.55738/" target="_blank" rel="noopener">Modders Toolkit</a> mod 来可视化命中框。这非常有用。</p><p>在这里，我们看到碰撞框，黄色方块，与我们的精灵的尖端不匹配：<a href="https://gfycat.com/SimpleMinorImperialeagle" target="_blank" rel="noopener">高清视频</a><br><img src="https://camo.githubusercontent.com/67da99f7836624d24205426df162fa44f2060da111a54a3fd9cae5f5c8ecb4a9/68747470733a2f2f7468756d62732e6766796361742e636f6d2f53696d706c654d696e6f72496d70657269616c6561676c652d736d616c6c2e676966" alt=""></p><p>vanilla 代码所做的数学运算有点令人困惑，但基本上我们需要将 drawOffsetX 和 drawOriginOffsetY 设置为偏移我们的精灵绘制的值，以尝试将精灵正确放置在命中框上。如果您尝试这样做，请使用 Modders Toolkit 更改游戏中的偏移值或使用编辑并继续调整游戏中的值。另一种方法是仅在图形程序中对精灵本身进行测量：<br><img src="https://camo.githubusercontent.com/1e36d8d6b9576f9c7815842c5271dcd6fa3f32e061a5031b1935c718d254c1ea/68747470733a2f2f692e696d6775722e636f6d2f6d3544786b426d2e706e67" alt=""></p><p>在这里，我们看到使用 Modders Toolkit 测试各种值。确保在您的 SetDefaults 代码中复制这些值：<a href="https://camo.githubusercontent.com/d3b84c4db81b1fe4945faff5e15403273a915acb2894929779176e01dbe851d1/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4d696e7479436861726d696e67436f70706572686561642d736d616c6c2e676966" target="_blank" rel="noopener">高清视频</a><br><img src="https://camo.githubusercontent.com/d3b84c4db81b1fe4945faff5e15403273a915acb2894929779176e01dbe851d1/68747470733a2f2f7468756d62732e6766796361742e636f6d2f4d696e7479436861726d696e67436f70706572686561642d736d616c6c2e676966" alt=""></p><p>经过一些实验或测量，我们知道添加 drawOffsetX = -20;对此 ModProjectile.SetDefaults 将修复绘图相对于命中框的位置。</p><p>现在让我们尝试将 hitbox 定位在精灵的蓝色部分上。这一次，让我们使用<a href="https://github.com/tModLoader/tModLoader/wiki/Why-Use-an-IDE#edit-and-continue" target="_blank" rel="noopener">编辑并继续</a>来完成此操作。在下面的剪辑中，您可以看到我们测试新值的速度有多快： <a href="https://gfycat.com/WebbedUntimelyHarborseal" target="_blank" rel="noopener">高质量视频</a><br><img src="https://camo.githubusercontent.com/ec354146b5e2cf2ae6e9f958c225a8976f4ebbd043850acbd366212f0696a5a2/68747470733a2f2f7468756d62732e6766796361742e636f6d2f576562626564556e74696d656c79486172626f727365616c2d736d616c6c2e676966" alt=""><br>如您所见，我们添加了 drawOriginOffsetY = -16;将碰撞箱定位在精灵的下方。</p><h3 id="Fixing-upside-down-sprite-problem"><a href="#Fixing-upside-down-sprite-problem" class="headerlink" title="Fixing upside-down sprite problem"></a>Fixing upside-down sprite problem</h3><p>您可能已经注意到，当向左侧发射时，精灵是颠倒的。请记住，在我们的 AI 中，我们有这行代码：projectile.rotation = projectile.velocity.ToRotation() + MathHelper.ToRadians(90f);。如果我们将精灵向左旋转，那么它是颠倒的。我们可以用 spriteDirection 解决这个问题。 spriteDirection 将水平翻转精灵的绘图。要实现这一点，只需添加 projectile.spriteDirection = projectile.direction;到 projectile.rotation = 行之后的 AI 代码。<br>未修复:<br><img src="https://camo.githubusercontent.com/1890e343532b2167208182fb792490093144707c32ea5ceb204ac3eb8a981e50/68747470733a2f2f692e696d6775722e636f6d2f734b557139347a2e706e67" alt=""></p><p>已修复:<br><img src="https://camo.githubusercontent.com/50ae94fce4701dd258883d5046ed5c7f0466e59a9e5b1e3e8171954b501878a9/68747470733a2f2f692e696d6775722e636f6d2f7733414c6844582e706e67" alt=""></p><h2 id="Horizontal-Sprite-Example"><a href="#Horizontal-Sprite-Example" class="headerlink" title="Horizontal Sprite Example"></a>Horizontal Sprite Example</h2><p>如果你的精灵是水平方向的，情况会发生一些变化。这是我们新的水平精灵，它现在是 70x48 并且水平定向，指向右侧而不是像以前那样指向上方：<br><img src="https://camo.githubusercontent.com/4e315f1f5909320efcaa4aa7ce7aa774ec16f92106227483e24e0e175e6cdad7/68747470733a2f2f692e696d6775722e636f6d2f65747a627a73302e706e67" alt=""><br>再一次，我们可以看到 hitbox 没有对齐：<br><img src="https://camo.githubusercontent.com/9cb069d29281f657fbc1aecdb7275b0d8bffd1eb4d0408bb3d9aa2fcf543ef54/68747470733a2f2f7468756d62732e6766796361742e636f6d2f436f6e6675736564536172646f6e6963436f77626972642d736d616c6c2e676966" alt=""></p><p>与水平示例不同，这次我们设置 projectile.rotation = projectile.velocity.ToRotation();直接而不是增加额外的 90 度。经过一些实验，我们得出了以下提示的碰撞框：</p><pre class="line-numbers language-csharp"><code class="language-csharp">drawOffsetX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">62</span><span class="token punctuation">;</span>drawOriginOffsetY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span> drawOriginOffsetX <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这些值有点奇怪，因为泰拉瑞亚正在做一些数学运算，所以这里是计算它们的算法：</p><pre class="line-numbers language-csharp"><code class="language-csharp">drawOffsetX <span class="token operator">=</span> Negative X pixel position of the top left corner of the intended hitboxdrawOriginOffsetY <span class="token operator">=</span> Negative Y pixel position of the top left corner of the intended hitboxdrawOriginOffsetX <span class="token operator">=</span> X pixel position of center of hitbox minus Texture Width divided by <span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是一个图表：<br><img src="https://camo.githubusercontent.com/d9baf48d02d866637c9516dfad0839b02f8699af166332b121d70dc691c2a887/68747470733a2f2f692e696d6775722e636f6d2f7a516678584d332e706e67" alt=""><br>如果您不喜欢与原版弹丸渲染代码作斗争，您可以随时自己绘制弹丸，如 <a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/Projectiles/ExampleAnimatedPierce.cs#L114" target="_blank" rel="noopener">ExampleAnimatedPierce Projectile</a> 中所示</p><h3 id="Fixing-upside-down-sprite-problem-again"><a href="#Fixing-upside-down-sprite-problem-again" class="headerlink" title="Fixing upside-down sprite problem again"></a>Fixing upside-down sprite problem again</h3><p>对于垂直精灵，使用 projectile.spriteDirection 是有效的，因为它控制了射弹精灵的水平翻转。使用水平精灵，水平翻转使精灵面朝后移动：<br><img src="https://camo.githubusercontent.com/545bd7f90d30f567a653f1e1b162b5d86e852c87a14e319a97f88af7e03a37ba/68747470733a2f2f692e696d6775722e636f6d2f76664b72527a5a2e706e67" alt=""><br>为了解决这个问题，我们需要动态调整偏移量，并有条件地将 180 度或 Pi 添加到旋转中。这是代码：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 将方向和 spriteDirection 都设置为 1 或 -1（分别为右和左）</span><span class="token comment" spellcheck="true">// projectile.direction 在 Projectile.Update 中自动设置正确，但我们需要在这里设置它，否则纹理将在第一帧绘制不正确。</span>projectile<span class="token punctuation">.</span>spriteDirection <span class="token operator">=</span> projectile<span class="token punctuation">.</span>direction <span class="token operator">=</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span>X <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToDirectionInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果朝左，则将 Pi 添加到旋转中以更正绘图</span>projectile<span class="token punctuation">.</span>rotation <span class="token operator">=</span> projectile<span class="token punctuation">.</span>velocity<span class="token punctuation">.</span><span class="token function">ToRotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>spriteDirection <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">0f</span> <span class="token punctuation">:</span> MathHelper<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>projectile<span class="token punctuation">.</span>spriteDirection <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// facing right</span><span class="token punctuation">{</span>    drawOffsetX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">62</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这些值与 SetDefaults 中的值匹配</span>    drawOriginOffsetY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span>    drawOriginOffsetX <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Facing left.</span>    <span class="token comment" spellcheck="true">// 如果您在绘图程序中翻转精灵，您可以计算出这些值。</span>    drawOffsetX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 因为现在hitbox的左上角在最左边的像素上。</span>    drawOriginOffsetY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// doesn't change</span>    drawOriginOffsetX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">31</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数学计算出这是另一个值的负数。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/564dc03d1f5c3a2e8686769b151af5cbf5a918e6532ce51d791b88a35617bd93/68747470733a2f2f692e696d6775722e636f6d2f464b66687451302e706e67" alt=""><br>希望这些答案可以帮助您解决弹丸碰撞箱和绘图问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> tModLoader </tag>
            
            <tag> terraria </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改装教程：世界生成</title>
      <link href="/blog/world-generation/"/>
      <url>/blog/world-generation/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/tModLoader/tModLoader/wiki/World-Generation" target="_blank" rel="noopener">World Generation</a></p><h1 id="什么是世界生成"><a href="#什么是世界生成" class="headerlink" title="什么是世界生成"></a>什么是世界生成</h1><p>世界生成是以编程方式从世界中放置和移除 Tile 的行为。世界生成在两个地方完成，在世界创建期间和在游戏中。本指南的大部分内容将集中在世界创建期间的世界生成，但也会详细介绍游戏中的注意事项。</p><p>世界生成是一个相当复杂的主题，需要对许多主题有很好的理解才能有效地工作。建议在直接跳入代码之前先熟悉以下部分。此外，强烈建议使用具有编辑和持续支持的 IDE，例如 Visual Studio。</p><h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><h2 id="Pass-Step-and-Task"><a href="#Pass-Step-and-Task" class="headerlink" title="Pass, Step, and Task"></a>Pass, Step, and Task</h2><p>生成世界时，游戏会按顺序运行每个通道。在本指南中，术语 step 将指代构成 pass 的各个代码部分。 World Generation 由 Passes 组成，Passes 由 Steps 组成。例如，构成生物群系的通道可能由 2 个步骤组成，第一步是挖洞，第二步是放置树木。术语 Task 可能等同于 Pass，但我们将在本指南中避免使用该术语，因为 Task 具有其他含义，我们稍后将在本指南中使用它。</p><h1 id="必备知识"><a href="#必备知识" class="headerlink" title="必备知识"></a>必备知识</h1><h2 id="Tile-坐标"><a href="#Tile-坐标" class="headerlink" title="Tile 坐标"></a>Tile 坐标</h2><p>在 tile 坐标系中世界的左上角是 0,0 ，右下角位于 Main.maxTilesX，Main.maxTilesY。这些坐标直接映射到 Main.tile[,]。有关详细信息，请参阅<a href="https://github.com/tModLoader/tModLoader/wiki/Coordinates" target="_blank" rel="noopener">坐标</a>。按照惯例，我们在代码中使用 x 和 y 或 i 和 j 来表示图块坐标。我们需要多对变量，因为很多时候我们都在使用从其他坐标派生的坐标。</p><h2 id="Main-tile"><a href="#Main-tile" class="headerlink" title="Main.tile[,]"></a>Main.tile[,]</h2><p>Main.tile[,] 是一个包含世界上所有 tile 的二维数组。您可以通过编写 Tile tile = Main.tile[x, y]; 在 worldgen 期间直接访问特定 x 和 y 坐标处的 Tile 对象。如果您在游戏中检查 Tile，则必须使用 Tile tile = Framing.GetTileSafely(x, y);因为 Tile 对象可能为空。因为 Tile 对象可能为空。请注意，负数或世界范围之外的坐标会导致错误。为避免这种情况，请使用 <a href="https://github.com/tModLoader/tModLoader/wiki/World-Generation#terrariaworldgen-public-static-bool-inworldint-x-int-y-int-fluff--0" target="_blank" rel="noopener">WorldGen.InWorld</a> 方法。</p><h2 id="Tile-类"><a href="#Tile-类" class="headerlink" title="Tile 类"></a>Tile 类</h2><p>Tile 类包含它所代表的 tile 处的所有数据。最重要的字段是 type 和 wall，它们表示该位置存在的 TileType 和 WallType。有关 Tile 类的各种字段和方法的更多详细信息，请参阅 <a href="https://github.com/tModLoader/tModLoader/wiki/Tile-Class-Documentation" target="_blank" rel="noopener">Tile 类文档</a>。</p><h2 id="Framed-vs-FrameImportant-Tiles"><a href="#Framed-vs-FrameImportant-Tiles" class="headerlink" title="Framed vs FrameImportant Tiles"></a>Framed vs FrameImportant Tiles</h2><p>重要的是要记住泰拉瑞亚中的 Tile 有两种基本类型。有普通的地形图块，如泥土、矿石和石头，也有不是地形图块的图块，如树木、铁砧、绘画等。地形图块被称为“框架”图块，因为游戏会根据附近的图块调整它们的外观。例如，将宝石火花块放置在现有的宝石火花块 Tile 旁边会改变原始宝石火花块的外观，使它们看起来像一个单一的矿石矿床。<br><img src="https://camo.githubusercontent.com/9f24fe23607c0e0dd10c0d3dec66ed2a88e849a83fa5223e590596a6e83c48d5/68747470733a2f2f692e696d6775722e636f6d2f7052365a4355582e706e67" alt=""><br>其他 Tile，称为 FrameImportant 或 multitiles，具有不变的定义外观。要知道的重要一点是，用其他 Framed tile 替换 Framed tile 很容易，只需将 Tile.type 设置为新的 Tile 类型。尝试手动放置 FrameImportant Tile 或替换它们要困难得多。</p><h2 id="Framing"><a href="#Framing" class="headerlink" title="Framing"></a>Framing</h2><p>Framing 是游戏调整 Tile 的 Tile.frameX 和 Tile.frameY 值以调整其外观以适应其上下文的过程。在世界生成代码中，您无需担心 Framing，因为游戏在加载世界时会自动 Framing 所有 Tile。如果您在游戏中更改 Tile，您需要告诉游戏框出附近的 Tile。 <a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/Projectiles/ExampleSolution.cs#L68" target="_blank" rel="noopener">ExampleSolution.cs</a> 显示了需要 tile framing 和 syncing 的情况。这是一个无框 Tile的例子。在这个例子中，所有 gemspark 块的 tile.frameX 和 tile.frameY 值都是 0。如果你在游戏中看到过这样的图块，那么你的代码就有问题。<br><img src="https://camo.githubusercontent.com/1673ade895034e9349bd161e1fef2d00325226518eaecc9fea3da9640c50c4bf/68747470733a2f2f692e696d6775722e636f6d2f61703077444b482e706e67" alt=""><br>这是 tile framing 后的结果。<br><img src="https://camo.githubusercontent.com/0e837a88fe31b825bf6c1b39252d06da0f513872196b8b48427efaec45cd595b/68747470733a2f2f692e696d6775722e636f6d2f4e3570526b51692e706e67" alt=""><br>在这里，我们可以看到 tile 如何使用 frameX 和 frameY 来确定要绘制的 spritesheet 的部分。例如，用红色勾勒的 tile 的 frameX 为 36，frameY 或 0，这意味着从像素坐标 36, 0 开始的精灵的 16x16 部分是为此 tile 绘制的。<br><img src="https://camo.githubusercontent.com/e261e12eb879230973625747c1098c6b62bc1764154174be9c97a2cdb5d48f96/68747470733a2f2f692e696d6775722e636f6d2f4b396b525958492e706e67" alt=""></p><h1 id="调试世界生成"><a href="#调试世界生成" class="headerlink" title="调试世界生成"></a>调试世界生成</h1><p>测试世界生成代码可能非常耗时。首先你必须进行代码更改，构建并重新加载 mod，等待世界完成生成，然后探索新生成的世界以查看最终结果。可以简化此过程，以提高编写和测试世界生成代码的效率。</p><p>为了提高生产力，最好有一个可以快速完成代码测试的设置。本指南中显示的短视频和图片都是通过允许在游戏中编辑源代码、在游戏中手动触发世界生成步骤以及撤消世界更改的设置完成的。此设置不是必需的，但可以使编写和测试世界生成代码所需的猜测更少，效率更高。</p><p>在盲目测试完整的通过之前测试通过的各个步骤是一个好主意。从小处着手，慢慢扩大测试范围。例如，要测试添加矿石的过程，首先使用以下过程测试单个 WorldGen.TileRunner 执行以获取正确的参数。一旦开始工作，独立测试完成的通过，以验证矿石的频率是否正确。最后，如果需要，在真实世界的生成场景中测试 pass 以确保它完全工作。</p><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul><li><ol><li>下载并启用以下模组：HEROs Mod 和 Modders Toolkit</li></ol></li><li><ol start="2"><li>将以下代码添加到您的项目中，确保修复命名空间。熟悉此过程后，您可以稍后替换 WorldGen.TileRunner 方法：</li></ol></li></ul><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> Terraria<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>ModLoader<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>Xna<span class="token punctuation">.</span>Framework<span class="token punctuation">.</span>Input<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>ID<span class="token punctuation">;</span><span class="token keyword">using</span> Microsoft<span class="token punctuation">.</span>Xna<span class="token punctuation">.</span>Framework<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>World<span class="token punctuation">.</span>Generation<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>GameContent<span class="token punctuation">.</span>Generation<span class="token punctuation">;</span><span class="token keyword">namespace</span> WorldGenTutorial<span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">WorldGenTutorialWorld</span> <span class="token punctuation">:</span> ModWorld    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">JustPressed</span><span class="token punctuation">(</span>Keys key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Main<span class="token punctuation">.</span>keyState<span class="token punctuation">.</span><span class="token function">IsKeyDown</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Main<span class="token punctuation">.</span>oldKeyState<span class="token punctuation">.</span><span class="token function">IsKeyDown</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">PostUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JustPressed</span><span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>D1<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Main<span class="token punctuation">.</span>MouseWorld<span class="token punctuation">.</span>X <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Main<span class="token punctuation">.</span>MouseWorld<span class="token punctuation">.</span>Y <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">TestMethod</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Dust<span class="token punctuation">.</span><span class="token function">QuickBox</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>YellowGreen<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Code to test placed here:</span>            WorldGen<span class="token punctuation">.</span><span class="token function">TileRunner</span><span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>CobaltBrick<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol start="3"><li>确保 tModLoader 已关闭，然后开始调试您的 mod。在 mod 构建后，tModLoader 将启动。当 tModLoader 启动时，打开一个你不关心的世界。将 Visual Studio 放在屏幕的一侧，将 tModLoader 置于窗口模式的另一侧：<br><img src="https://camo.githubusercontent.com/1939ad854c7ae33a5b5b644bcea82275763e3773a328289e516f3fbd4ec9d2d0/68747470733a2f2f692e696d6775722e636f6d2f4b7a62356f6b6b2e706e67" alt=""></li></ol></li><li><ol start="4"><li>在 HEROsMod 中，单击按钮禁用敌人生成，将 Light Hack 设置为 100%，打开上帝模式，然后显示地图。这些设置将让您专注。<br><img src="https://camo.githubusercontent.com/108c2a895260cb81634a2141271062eeb7a10f57e714511a603a346e847035b7/68747470733a2f2f692e696d6775722e636f6d2f4a576c693637562e706e67" alt=""></li></ol></li><li><ol start="5"><li>启用 HEROsMod 后，右键单击全屏地图将传送玩家。传送到您最终希望放置世界生成代码的区域的典型区域。</li></ol></li><li><ol start="6"><li>如果您正在测试的代码非常具有破坏性，请使用 Modders Toolkit 的 Miscellaneous Tool 菜单中的 Take World Snapshot 按钮来保留世界的副本。 （按钮位于屏幕右下方）<br><img src="https://camo.githubusercontent.com/ead3beeda13bd2f95979edcd9bd775b0b18feea02499d0b3cc02c2762574a262/68747470733a2f2f692e696d6775722e636f6d2f6e31793955396e2e706e67" alt=""></li></ol></li><li><ol start="7"><li>在您希望试验的代码行上设置断点。单击要试验的行的“gutter”设置断点。：<br><img src="https://camo.githubusercontent.com/2ed0ca39743034e8c995e9607cba096b5a31a0c82631ad65925aac0a69de1a5d/68747470733a2f2f692e696d6775722e636f6d2f485363664a67732e706e67" alt=""></li></ol></li><li><ol start="8"><li>重复以下操作</li></ol><ul><li>将鼠标悬停在您希望尝试测试代码的 tile 上，然后按键盘上的 1 键。</li><li>Visual Studio 将立即获得焦点，因为它已到达我们设置的断点。这将由 gutter 中的黄色箭头指示：<br><img src="https://camo.githubusercontent.com/f7989b1a22d6d33c7cd0229d932f497221b5994f70ce8c8c2bc98c11c69d8958/68747470733a2f2f692e696d6775722e636f6d2f417777756d494b2e706e67" alt=""></li><li>现在您可以编辑代码。如果这是您第一次，只需按 F5 继续。否则，在黄色箭头处或下方更改变量和其他逻辑。完成更改后，按 F5 继续。</li><li>回到 tModLoader，您应该会短暂地看到一个方形的灰尘，指示您运行代码的坐标。您还将看到代码的效果。</li><li>如果世界生成代码具有破坏性，请按“恢复世界快照”按钮。更改应还原。</li><li>如果您的代码效果是您想要的，那么恭喜您，您现在对要在世界生成过程中使用的代码有了一个很好的了解。您可以复制代码并适当地使用它。否则，请重复这些步骤，直到您发现符合您要求的参数和值。</li></ul></li></ul><h2 id="通过实验学习"><a href="#通过实验学习" class="headerlink" title="通过实验学习"></a>通过实验学习</h2><p>许多可用于世界生成的方法根本没有记录。我们可以使用上面的设置来发现 WorldGen.DigTunnel。</p><p>首先，让我们将 WorldGen.TileRunner 换成 WorldGen.DigTunnel。接下来，让我们看一下参数名称并猜测一些合适的值。对于 X 和 Y，我们可以猜测它可能是在询问一些 Tile 坐标。 xDir 和 yDir 可能会影响方向，我们可以将它们保留为 0。 Steps 和 Size 可能需要一个非零数字，让它们从 1 开始并从那里开始。<br><img src="https://camo.githubusercontent.com/79e2f929847fa910094b3917a3b705669fd544d6fd73e1a755eee04389479d59/68747470733a2f2f692e696d6775722e636f6d2f79324733326e642e706e67" alt=""></p><p>现在我们有了一些代码，我们将执行上述步骤并测试我们的代码。每次看到结果，我们可以再次下断点后编辑代码，看看我们修改的效果，从而了解参数的含义。一旦我们知道了含义，我们就有了在实际世界生成步骤中使用 WorldGen.DigTunnel 方法所需的知识。<br>使用 WorldGen.digTunnel(x, y, 0, 0, 1, 1, false);，我们得到一个小洞：<br><img src="https://camo.githubusercontent.com/107986cc5eaf6ae29ed64e2aa402795b5ef1a9b29c7a8352a6ef341a4257e00c/68747470733a2f2f692e696d6775722e636f6d2f7a3742536743322e706e67" alt=""></p><p>让我们用 Size 做实验，这里是 WorldGen.digTunnel(x, y, 0, 0, 1, 10, false); 的结果，我们可以看到 Size 似乎影响了一个半径：<br><img src="https://camo.githubusercontent.com/f75ebf677c85d2d825a97861170799b625355915e116a7008c9979fc0df0a030/68747470733a2f2f692e696d6775722e636f6d2f336179516d776d2e706e67" alt=""></p><p>让我们用 Steps 来做实验，这里是 WorldGen.digTunnel(x, y, 0, 0, 10, 1, false); 的结果。不清楚这个参数有什么影响，我们可能需要结合其他参数来测试它：<br><img src="https://camo.githubusercontent.com/a1d45308cc754839792eb46938d2422152359c9d68ca14288981f903d3c99528/68747470733a2f2f692e696d6775722e636f6d2f6574744a4e666a2e706e67" alt=""></p><p>让我们用 Steps 和 xDir 和 yDir 来做实验。通过阅读 WorldGen.DigTunnel 的 vanilla 代码用法，我们可以看到 xDir 和 yDir 通常是介于 -1 和 1 之间的数字，所以让我们试试 WorldGen.digTunnel(x, y, 1, 1, 10, 1, false);。现在我们可以看到 xDir 和 yDir 似乎影响了 Tile 被挖出的方向，而 Steps 似乎表明了这个挖掘过程应该迭代多少次。<br><img src="https://camo.githubusercontent.com/da723570f1fa31626cd1cab0ef9704ce43caf8d318bb1e2d10c23c2a3605b002/68747470733a2f2f692e696d6775722e636f6d2f4a744a37306a462e706e67" alt=""></p><p>借助我们从实验中获得的参数知识，让我们尝试制作一个向下移动的长孔。我的猜测是高 yDir、高步数和中等大小将满足我们的需求。让我们试试 WorldGen.digTunnel(x, y, 0, 1, 30, 3, false);：<br><img src="https://camo.githubusercontent.com/a2a21b360d0adf54987254e754aaa21aed6811283632fa1b03713aba334dfaf9/68747470733a2f2f692e696d6775722e636f6d2f674763546b63342e706e67" alt=""></p><p>看起来挺好的。我希望这个实验已经展示了如何在游戏中实时测试代码位可以帮助破译方法和参数的含义。如果您有信心，也可以阅读源代码。</p><h2 id="高级代码设置"><a href="#高级代码设置" class="headerlink" title="高级代码设置"></a>高级代码设置</h2><p>如果您想真正快速地迭代测试参数，您可以…</p><h1 id="测试完全通过"><a href="#测试完全通过" class="headerlink" title="测试完全通过"></a>测试完全通过</h1><p>如果您对 pass 中的各个步骤感到满意，则需要通过生成一个新世界并查看结果是否令人满意来测试完整的 pass。在这个阶段，你应该调整一些东西来控制你的世界生成结构生成的数量。使用 WorldGen Previewer mod 将有助于全面了解您的生物群落和结构在世界上的流行程度。请注意，玩家将使用其他模组，所以尽量不要用你的结构覆盖世界。感觉像是一个真正的发现的稀有世界生成功能对玩家来说是令人兴奋的。</p><h1 id="代码设置"><a href="#代码设置" class="headerlink" title="代码设置"></a>代码设置</h1><p>现在您已经了解了先决条件并进行了高效的设置，现在是学习世界生成代码的基本布局的时候了。所有代码都放在扩展 ModWorld 的类中。这个例子将涵盖产生矿石，一些简单但通常需要的东西。请继续阅读并阅读评论。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 1. 你需要各种 using 语句。如果缺少这些，Visual Studio 会建议这些，但为了方便起见，它们在此处列出。</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>GameContent<span class="token punctuation">.</span>Generation<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>ModLoader<span class="token punctuation">;</span><span class="token keyword">using</span> Terraria<span class="token punctuation">.</span>World<span class="token punctuation">.</span>Generation<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 我们的世界生成代码必须从扩展 ModWorld 的类开始</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorldGenTutorialWorld</span> <span class="token punctuation">:</span> ModWorld<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 3. 我们使用 ModifyWorldGenTasks 方法告诉游戏我们的世界生成代码应该运行的顺序</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">ModifyWorldGenTasks</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>GenPass<span class="token operator">></span> tasks<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">float</span> totalWeight<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 4. 我们使用 FindIndex 来定位名为“Shinies”的香草世界生成任务的索引。这确保我们的代码在正确的步骤运行。</span>        <span class="token keyword">int</span> ShiniesIndex <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>genpass <span class="token operator">=</span><span class="token operator">></span> genpass<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Shinies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ShiniesIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 5. 我们通过传入一个名称和将执行我们的世界生成代码的方法来注册我们的世界生成通行证。</span>            tasks<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>ShiniesIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PassLegacy</span><span class="token punctuation">(</span><span class="token string">"World Gen Tutorial Ores"</span><span class="token punctuation">,</span> WorldGenTutorialOres<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 6. 这是实际的世界生成代码。</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">WorldGenTutorialOres</span><span class="token punctuation">(</span>GenerationProgress progress<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 7. 设置进度消息总是一个好主意。这是用户在世界生成期间看到的消息，可用于识别无限循环。    </span>        progress<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token string">"World Gen Tutorial Ores"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 8. 这里我们使用一个for循环来多次运行循环内的代码。 此 for 循环可扩展到 Main.maxTilesX、Main.maxTilesY 和 2E-05 的乘积。 2E-05 是科学计数法，等于 0.00002。 有时，在处理大量零时，科学记数法更容易阅读。</span>        <span class="token comment" spellcheck="true">// 9. 在一个小世界里，这个数学结果是 4200 * 1200 * 0.00002，大约是 100。这意味着我们将在 for 循环中运行代码 100 次。 这是猩红矿或魔矿生成的数量。 由于我们按世界大小的两个维度进行缩放，因此生成的数量将自动调整为不同的世界大小，以实现一致的矿石分布。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>maxTilesX <span class="token operator">*</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span> <span class="token operator">*</span> 6E<span class="token number">-05</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 10. 我们随机选择一个 x 和 y 坐标。 x 坐标是从最左边到最右边的坐标中选择的。 然而，y 坐标是从 WorldGen.worldSurfaceLow 和地图底部之间选择的。 我们可以使用这种技术来确定我们的矿石应该生成的深度。</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>WorldGen<span class="token punctuation">.</span>worldSurfaceLow<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 11. 最后，我们做实际的世界生成代码。 在此示例中，我们使用 WorldGen.TileRunner 方法。 此方法生成我们提供给该方法的 Tile 类型的斑点。 TileRunner 的行为在下面的有用方法部分中有详细说明。</span>            WorldGen<span class="token punctuation">.</span><span class="token function">TileRunner</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>CobaltBrick<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如您所见，ModifyWorldGenTasks 用于注册您的每个世界生成通行证。每个通道都有一个相应的方法，可以对世界进行一些编辑。我们将我们的通行证插入到原版世界生成通行证顺序中，以确保我们的代码在适当的时候执行。</p><h2 id="添加额外的世界生成代码"><a href="#添加额外的世界生成代码" class="headerlink" title="添加额外的世界生成代码"></a>添加额外的世界生成代码</h2><p>要添加更多世界生成代码，首先确定您是否希望向现有通行证添加一个步骤，或者您是否希望创建一个新通行证。如果 pass 与现有 pass 没有有意义的连接，或者现有 mod 或 vanilla pass 的顺序要求新代码存在于其他地方，则创建新 pass 很有用。</p><p>例如，如果我们希望在世界中生成宝箱，则不能在生成矿石的同一通道中执行此操作，因为矿石在生成重要的 tile 之前生成。矿石生成会腐蚀过早放置的箱子。如果你正在制作一个生物群系，代码挖洞和代码放置地形可以在同一个通道中共存。</p><p>如果我们想生成额外的矿石，我们可以简单地在上面的 WorldGenTutorialOres 示例中添加另一个 for 循环，并调整数字以适应新矿石。这将被称为在传递中添加一个步骤。</p><p>如果我们想放置箱子，我们会在 ModifyWorldGenTasks 中添加类似于以下的代码：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> BuriedChestsIndex <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>genpass <span class="token operator">=</span><span class="token operator">></span> genpass<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Buried Chests"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>BuriedChestsIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tasks<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>BuriedChestsIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PassLegacy</span><span class="token punctuation">(</span><span class="token string">"World Gen Tutorial Chests"</span><span class="token punctuation">,</span> WorldGenTutorialChests<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后也添加 WorldGenTutorialChests 方法。确保不要弄乱 c# 语法：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">WorldGenTutorialChests</span><span class="token punctuation">(</span>GenerationProgress progress<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Chest placement code here</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="调试注意事项"><a href="#调试注意事项" class="headerlink" title="调试注意事项"></a>调试注意事项</h2><p>如果您使用上述调试设置，我们需要进一步分解我们的代码以方便测试。在这里，我们可以看到可以从 PostUpdate 中的热键代码和名为 WorldGenTutorialOres 的世界生成步骤中调用 PlaceOresAtLocation，从而允许对代码进行独立测试。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">PostUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JustPressed</span><span class="token punctuation">(</span>Microsoft<span class="token punctuation">.</span>Xna<span class="token punctuation">.</span>Framework<span class="token punctuation">.</span>Input<span class="token punctuation">.</span>Keys<span class="token punctuation">.</span>D1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">PlaceOresAtLocation</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Main<span class="token punctuation">.</span>MouseWorld<span class="token punctuation">.</span>X <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Main<span class="token punctuation">.</span>MouseWorld<span class="token punctuation">.</span>Y <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">WorldGenTutorialOres</span><span class="token punctuation">(</span>GenerationProgress progress<span class="token punctuation">)</span> <span class="token punctuation">{</span>    progress<span class="token punctuation">.</span>Message <span class="token operator">=</span> <span class="token string">"World Gen Tutorial Ores"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>maxTilesX <span class="token operator">*</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span> <span class="token operator">*</span> 6E<span class="token number">-05</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>WorldGen<span class="token punctuation">.</span>worldSurfaceLow<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">PlaceOresAtLocation</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// PlaceOresAtLocation 在我们的调试热键代码和 WorldGenTutorialOres 方法之间共享。这使我们可以在游戏中快速测试这部分代码，但也可以在世界生成步骤中使用代码。</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">PlaceOresAtLocation</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    WorldGen<span class="token punctuation">.</span><span class="token function">TileRunner</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>CobaltBrick<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="确定合适的索引"><a href="#确定合适的索引" class="headerlink" title="确定合适的索引"></a>确定合适的索引</h1><p>咨询<a href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-World-Generation-Steps" target="_blank" rel="noopener">Vanilla World Generation Passes</a>，找到一个合适的地方插入您的世界世代通行证。在类似的世界生成通过后立即执行类似的代码通常是一个很好的规则。一些早期的通行证不考虑多块，所以避免过早放置箱子或其他多块。相同的概念适用于各种地形塑造方法，因为太晚使用这些方法可能会损坏已经放置的多块，导致它们破裂或看起来不完整。<br>注意：不要将 FindIndex 调用分组到 task.Insert 代码之上。如果这样做，则索引可能是错误的。下面是一个潜在问题的示例，该问题可能是由于在错误的步骤中运行代码而导致的。在这里，我们看到 TileRunner 代码已经损坏了多个 Tile ，例如门、箱子和其他装饰 Tile：<br><img src="https://camo.githubusercontent.com/69171d0a21ff7ceda8b13fd5157090b1690abae5cc92c64b8571981acc012215/68747470733a2f2f692e696d6775722e636f6d2f54424a677361672e706e67" alt=""></p><h2 id="香草世界生成时间线"><a href="#香草世界生成时间线" class="headerlink" title="香草世界生成时间线"></a>香草世界生成时间线</h2><p>本节列出了在世界生成期间发生的各种重要事件，这些事件将帮助您确定适合一般世界生成通行证的索引：</p><ul><li>地狱</li><li>生成点：分配了 Main.spawnTileX 和 Main.spawnTileY</li><li>TODO - 寻找重要的通行证：大型地形编辑的最后机会，如何避免损坏箱子等。</li></ul><h1 id="确定起始位置"><a href="#确定起始位置" class="headerlink" title="确定起始位置"></a>确定起始位置</h1><p>大多数世界生成步骤随机选择一个坐标开始。我们可以通过调整我们对这个初始坐标的选择来调整我们的世界生成代码的分布。</p><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>我们使用 WorldGen.genRand.Next 方法来选择一个随机数。对所有随机决策使用 WorldGen.genRand 很重要，因为它有助于世界种子功能。</p><h2 id="Width"><a href="#Width" class="headerlink" title="Width"></a>Width</h2><p>TODO：地图中心、重生点周围的安全区、海洋位置</p><h2 id="Depth"><a href="#Depth" class="headerlink" title="Depth"></a>Depth</h2><p>从下到下，以下是 worldgen 期间可用的深度：0、Worldgen.worldSurfaceLow、Worldgen.worldSurfaceHigh、Worldgen.rockLayerLow、Worldgen.rockLayerHigh、Main.maxTilesY。通过调整提供给 WorldGen.genRand.Next 方法的最小值和最大值，我们可以告诉游戏我们希望我们的矿石生成的深度范围。以下是游戏中的铜矿生成代码，它使用 3 个具有不同参数和循环乘数的独立 for 循环来使矿床越深越频繁：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>maxTilesX <span class="token operator">*</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span> <span class="token operator">*</span> 6E<span class="token number">-05</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TileRunner</span><span class="token punctuation">(</span>WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>WorldGen<span class="token punctuation">.</span>worldSurfaceLow<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>WorldGen<span class="token punctuation">.</span>worldSurfaceHigh<span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>maxTilesX <span class="token operator">*</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span> <span class="token operator">*</span> 8E<span class="token number">-05</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TileRunner</span><span class="token punctuation">(</span>WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>WorldGen<span class="token punctuation">.</span>worldSurfaceHigh<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>WorldGen<span class="token punctuation">.</span>rockLayerHigh<span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>maxTilesX <span class="token operator">*</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.0002</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TileRunner</span><span class="token punctuation">(</span>WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>WorldGen<span class="token punctuation">.</span>rockLayerLow<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，WorldGen.rockLayerLow 和 Main.maxTilesY 之间的距离远大于其他 2 个范围，因此矿石的分布并不像 * 0.0002 所暗示的那样密集。</p><p>另请注意，并非所有这些值都保留在游戏中。例如，Worldgen.worldSurfaceLow 和 Worldgen.worldSurfaceHigh 被遗忘，只剩下 Main.worldSurface。 Main.worldSurface 等于 Worldgen.worldSurfaceHigh + 25.0。确保如果您在执行游戏世界生成代码时引用了实际加载的变量，您可以检查 Terraria.IO.WorldFile.LoadHeader 进行仔细检查。</p><p>地狱位于地图底部的 200 个图块上。 Main.maxTilesX - 200 及以下将产生冥界坐标。</p><h2 id="生物群落"><a href="#生物群落" class="headerlink" title="生物群落"></a>生物群落</h2><p>我们可以在随机坐标处检查现有的 Tile 以确定所选位置的生物群落。例如，如果我们只想在雪附近放置矿石，我们可以检查雪砖：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Tile tile <span class="token operator">=</span> Main<span class="token punctuation">.</span>tile<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tile<span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tile<span class="token punctuation">.</span>type <span class="token operator">==</span> TileID<span class="token punctuation">.</span>SnowBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TileRunner code here</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在检查这样的条件时，重要的是要考虑是否希望循环计数器在失败时增加或保持不变。可能所有选择的随机坐标都可能不包含雪，并且世界不会受到您的代码的影响。另一方面，如果你重复你的世界生成代码直到找到雪的特定次数，一个有少量雪的世界可能会不成比例地受到你的世界生成代码的影响。在设计代码时要注意这种可能性。</p><h3 id="Spawn"><a href="#Spawn" class="headerlink" title="Spawn"></a>Spawn</h3><p>Main.spawnTileX 和 Main.spawnTileY 指示默认生成位置。通常 Main.spawnTileX 位于 Main.maxTilesX / 2 的 5 格内，但模组可以改变这一点。生成位置在“生成点”通道中分配。</p><h3 id="地牢"><a href="#地牢" class="headerlink" title="地牢"></a>地牢</h3><p>Main.dungeonX 和 Main.dungeonY 指向地牢入口处的 Tile。 TODO：dungeonSide 说明，关于何时设置 dungeonXY 的信息<br><img src="https://camo.githubusercontent.com/f0c610c5fc98d7737c745538c4e84a8674c10d8cde3ab0ce2e20e30ed647db72/68747470733a2f2f692e696d6775722e636f6d2f425078613641302e706e67" alt=""></p><h3 id="寺庙"><a href="#寺庙" class="headerlink" title="寺庙"></a>寺庙</h3><p>神殿的位置不存储在世界文件中，但是如果您在所有图块中搜索 TileID.LihzahrdAltar 或上锁的门，您可能会找到它，但不能保证。<br>TODO：On.makeTemple 示例</p><h3 id="金字塔"><a href="#金字塔" class="headerlink" title="金字塔"></a>金字塔</h3><p>金字塔坐标也不会被记住。</p><p>TODO：使用反射来检索通过闭包示例捕获的局部变量的 FieldInfo。检索 PyrX 和 PyrY。 （仔细检查编辑封闭变量是否可以修改原始捕获的变量值）</p><h2 id="查找表面位置"><a href="#查找表面位置" class="headerlink" title="查找表面位置"></a>查找表面位置</h2><p>要找到表面坐标，首先选择一个随机的 X 坐标，然后从世界顶部开始检查所有 Tile，直到找到第一个实心 Tile。这是一个例子：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> x <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> foundSurface <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> Main<span class="token punctuation">.</span>worldSurface<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>WorldGen<span class="token punctuation">.</span><span class="token function">SolidTile</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        foundSurface <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    y<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们检查 Main.worldSurface 以确保我们不会走得太深。例如，这是为了确保您不会尝试在深坑中间生成地表生物群系。</p><h1 id="常见模式"><a href="#常见模式" class="headerlink" title="常见模式"></a>常见模式</h1><h2 id="尝试直到成功"><a href="#尝试直到成功" class="headerlink" title="尝试直到成功"></a>尝试直到成功</h2><p>为许多世界生成操作寻找合适的位置可能很困难。例如，放置一个箱子需要 2 个并排的实心 Tile，上面有 2x2 的空间，没有任何 Tile。编写一个算法来搜索具有这种情况的位置可能很困难并且容易出错。虽然有时搜索特定上下文很有用，但以更懒惰的方式生成世界代码是非常常见的。这种更懒惰的方式是尝试在随机坐标上做某事，直到获得所需的成功次数。例如，如果您希望每个世界生成 4 个特殊箱子，您可能会尝试将箱子随机放置在所需区域，直到 PlaceChest 报告成功 4 次。执行此方法时，存在搜索区域不包含任何满足您条件的位置的可能性，因此限制尝试很有用。如果您不限制尝试，您的代码可能会陷入无限循环。这个尝试限制应该足够大，以至于它不会过早失败，但又足够小，以至于世界生成不会暂停太久，导致用户假设代码陷入了无限循环。</p><p>例如，让我们尝试在世界上放置 10 个箱子：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> success <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> attempts <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>        attempts<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attempts <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">)</span><span class="token punctuation">;</span>        y <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> chest <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span><span class="token function">PlaceChest</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        success <span class="token operator">=</span> chest <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span>        Main<span class="token punctuation">.</span><span class="token function">NewText</span><span class="token punctuation">(</span>$<span class="token string">"Placed chest at {x}, {y} after {attempts} attempts."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        Main<span class="token punctuation">.</span><span class="token function">NewText</span><span class="token punctuation">(</span>$<span class="token string">"Failed to place chest after {attempts} attempts."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们尝试放置 10 个箱子，每个箱子尝试 1000 次。这是输出：<br><img src="https://camo.githubusercontent.com/547118fe6889148b78bb8db51ad3cb8bb8449df3003e0646091aedd723c1eb47/68747470733a2f2f692e696d6775722e636f6d2f616162766374692e706e67" alt=""></p><p>在这里您可以看到，使用随机坐标，您通常可以使用 WorldGen.PlaceChest 在我们允许的 1000 次尝试中放置一个箱子。将 1000 提升到 10000 不是问题，但几乎可以保证 10 个箱子，而不是我们在这里看到的 9 个成功。计算机非常快，数以万计的放置尝试并不是什么大问题。最重要的是让你的循环在多次尝试后失败，你不希望你的世界生成代码陷入无限循环。</p><h2 id="影响所有-Tile"><a href="#影响所有-Tile" class="headerlink" title="影响所有 Tile"></a>影响所有 Tile</h2><p>有时你想对所有的 Tile 做一些事情。例如，将所有铁矿石图块更改为 MyCoolOre 图块。您可以这样做，但请注意，像这样应用一揽子更改可能会与其他 mod 的期望相冲突。此外，最好在 PostWorldGen 或后期通行证中执行此操作，以允许查找这些图块的其他代码首先完成其工作。为此，我们使用双 for 循环：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Main<span class="token punctuation">.</span>maxTilesX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> Main<span class="token punctuation">.</span>maxTilesY<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Tile tile <span class="token operator">=</span> Main<span class="token punctuation">.</span>tile<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tile<span class="token punctuation">.</span>type <span class="token operator">==</span> TileID<span class="token punctuation">.</span>Iron<span class="token punctuation">)</span>            tile<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">ushort</span><span class="token punctuation">)</span>ModContent<span class="token punctuation">.</span><span class="token generic-method function">TileType<span class="token punctuation">&lt;</span>MyCoolOre<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="放置-Tile-实体"><a href="#放置-Tile-实体" class="headerlink" title="放置 Tile 实体"></a>放置 Tile 实体</h2><p>TODO：必须手动放置，因为它们没有以正常方式放置</p><h2 id="将物品放入箱子"><a href="#将物品放入箱子" class="headerlink" title="将物品放入箱子"></a>将物品放入箱子</h2><p>使用 PlaceChest 将箱子添加到世界后，您可以通过访问该位置的 Chest 对象的项目数组来添加项目。如果使用 AddBuriedChest，则不会将 Chest 或 Chest 索引返回给调用者，因此您无法在不搜索 Chest 的情况下修改内容。</p><h3 id="将物品放入新箱子"><a href="#将物品放入新箱子" class="headerlink" title="将物品放入新箱子"></a>将物品放入新箱子</h3><p>以下示例显示了添加项目的许多方法。要记住的重要一点是正确跟踪您正在编辑的 Item 插槽的当前索引。此示例在末尾添加所有项目以简化此操作。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// 放置箱子 Tile，使用Style 10，即冰冷的箱子 style</span><span class="token keyword">int</span> chestIndex <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span><span class="token function">PlaceChest</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果箱子成功放置...</span><span class="token keyword">if</span><span class="token punctuation">(</span>chestIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Chest chest <span class="token operator">=</span> Main<span class="token punctuation">.</span>chest<span class="token punctuation">[</span>chestIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// itemsToAdd 将保存我们要添加到箱子的每个项目的类型和堆栈数据</span>    <span class="token keyword">var</span> itemsToAdd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">int</span> stack<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这是一个使用 WeightedRandom 为不同项目随机选择不同权重的示例。</span>    <span class="token keyword">int</span> specialItem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Terraria<span class="token punctuation">.</span>Utilities<span class="token punctuation">.</span>WeightedRandom</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>        Tuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ItemID<span class="token punctuation">.</span>Acorn<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Tuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ItemID<span class="token punctuation">.</span>Meowmere<span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Tuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>ModContent<span class="token punctuation">.</span><span class="token generic-method function">ItemType<span class="token punctuation">&lt;</span>MyItem<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Tuple<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ItemID<span class="token punctuation">.</span>None<span class="token punctuation">,</span> <span class="token number">7.0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 不选择权重为 7 的项目。</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>specialItem <span class="token operator">!=</span> ItemID<span class="token punctuation">.</span>None<span class="token punctuation">)</span> <span class="token punctuation">{</span>        itemsToAdd<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>specialItem<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 使用 switch 语句和随机选择来添加项目集。</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span>             itemsToAdd<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ItemID<span class="token punctuation">.</span>CobaltOre<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            itemsToAdd<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ItemID<span class="token punctuation">.</span>Duck<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            itemsToAdd<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ItemID<span class="token punctuation">.</span>FireblossomSeeds<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            itemsToAdd<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ItemID<span class="token punctuation">.</span>Glowstick<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            itemsToAdd<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ItemID<span class="token punctuation">.</span>Dynamite<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            itemsToAdd<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ItemID<span class="token punctuation">.</span>Bomb<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>rand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最后，遍历 itemsToAdd 并实际创建 Item 实例并添加到 chest.item 数组</span>    <span class="token keyword">int</span> chestItemIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> itemToAdd <span class="token keyword">in</span> itemsToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Item item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span><span class="token function">SetDefaults</span><span class="token punctuation">(</span>itemToAdd<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        item<span class="token punctuation">.</span>stack <span class="token operator">=</span> itemToAdd<span class="token punctuation">.</span>stack<span class="token punctuation">;</span>        chest<span class="token punctuation">.</span>item<span class="token punctuation">[</span>chestItemIndex<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>        chestItemIndex<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chestItemIndex <span class="token operator">>=</span> <span class="token number">40</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 确保不要超过箱子的容量</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将物品放置在其他现有的箱子中"><a href="#将物品放置在其他现有的箱子中" class="headerlink" title="将物品放置在其他现有的箱子中"></a>将物品放置在其他现有的箱子中</h3><p>ExampleWorld.cs 显示了一个将单个项目放置在由其他代码放置的箱子中的示例。<a href="https://github.com/tModLoader/tModLoader/blob/master/ExampleMod/ExampleWorld.cs#L380" target="_blank" rel="noopener">在冰柜中放置一些物品</a>。如果你想放置多个物品，你也可以使用上面显示的技术，你只需要确保按照逻辑在箱子中找到一个空的物品槽，这样你就不会覆盖现有的物品。</p><h2 id="液体"><a href="#液体" class="headerlink" title="液体"></a>液体</h2><p>液体存储在与实际 tile 共存的 Tile 对象中（如果存在）。</p><p>许多大规模地形方法都有参数，可以选择在生成的地形中放置水。例如，Worlgen.digTunnel 有一个湿参数，它会在挖完洞后用一些水填充洞。在其他方法中寻找类似的参数。要手动放置单块水，您可以通过以下方式设置该块的液体类型和液体量：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Main<span class="token punctuation">.</span>tile<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>liquid <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>Main<span class="token punctuation">.</span>tile<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">liquidType</span><span class="token punctuation">(</span>Tile<span class="token punctuation">.</span>Liquid_Water<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="游戏内-多人游戏注意事项"><a href="#游戏内-多人游戏注意事项" class="headerlink" title="游戏内/多人游戏注意事项"></a>游戏内/多人游戏注意事项</h1><p>TODO:</p><ul><li>许多方法并非设计用于多人游戏。</li><li>有关如何同步 Tile 更改的示例。不发送要避免的图块更改的方法示例。</li><li>过早离开时节省腐败。 （tModLoader 需要 WorldGen.IsGeneratingHardMode 等效钩子）</li><li>由于同步代码导致服务器崩溃。 （需要异步代码示例，线程静态警告）</li><li>始终在游戏中使用 Framing.GetTileSafely</li><li>确保代码在服务器上运行</li></ul><h1 id="Stamp-Tiles"><a href="#Stamp-Tiles" class="headerlink" title="Stamp Tiles"></a>Stamp Tiles</h1><p>有时，模组希望将精心设计的建筑物或其他设计特征放置到世界中。编写代码以手动单独放置每个图块非常麻烦。有一种方法可以将选择的 Tile “标记”到世界中。它的工作原理是您首先在游戏中设计结构，然后使用 TODOMETHODNAME 方法导出表示该 Tile 选择的二进制文件. 您可以将该文件添加到您的 mod 并在 worldgen 通行证中引用它。您可以使用 TODOMETHODNAME 方法将该文件转换为二维 Tile 数组。获得 Tile 后，您可以找到合适的位置并将 Tile 复制到该位置，就像您在该位置上盖印 Tile 一样。使用这种方法时，您可能需要花费一些精力来确保所选位置与您放置的 Tile 很好地融合在一起。</p><h1 id="程序语法"><a href="#程序语法" class="headerlink" title="程序语法"></a>程序语法</h1><p>在原版代码中最近添加的许多世界生成代码中，可以看到一种更强大的典型世界生成代码方法。这种方法使泰拉瑞亚更令人印象深刻的世界生成功能成为可能。活红木树和附魔剑坛的有机流动就是这种方法的力量的很好例子。这种程序方法提供了一种以更简洁和不易出错的方式将条件和动作链接在一起的方法。如果您不熟悉高级 C# 语法模式，语法会令人困惑，但一旦掌握了它，这种方法就会非常强大和高效。</p><h2 id="快速示例"><a href="#快速示例" class="headerlink" title="快速示例"></a>快速示例</h2><p>作为这种方法的快速入门，这里有一个简单的例子：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Point point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Circle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>RubyGemspark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这段代码令人生畏，但如果你学会阅读它，它确实还不错。 WorldUtils.Gen 方法基本上采用 Point、GenShape 和 GenAction。从 Point 表示的坐标开始，GenShape 的代码在每个坐标上运行 GenAction 代码的同时追踪所需的形状。此代码在圆内的每个坐标上运行 SetTile 方法，创建一个半径为 8 且填充有 Gemspark Tile的圆。<br><img src="https://camo.githubusercontent.com/4bf7dedc965e54e1dcf0f2a0f1bdbd7e5f87066fb9be13c71de1b71fee67e0b8/68747470733a2f2f692e696d6775722e636f6d2f4a56726d7473322e706e67" alt=""></p><pre class="line-numbers language-csharp"><code class="language-csharp">Point point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Circle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenAction</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>AmberGemspark<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>PlaceWall</span><span class="token punctuation">(</span>WallID<span class="token punctuation">.</span>BlueDynasty<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Custom</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>Dust<span class="token punctuation">.</span><span class="token function">QuickDust</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Purple<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此示例显示使用 Actions.Chain 将多个 GenAction 链接在一起。我们放置 AmberGemspark，放置蓝色王朝墙，并生成紫色尘埃。灰尘只是用来帮助可视化所有可能受所提供形状影响的图块。<br><img src="https://camo.githubusercontent.com/963ab9fe263ada4846d654f6129563d79eac905ade9762ff740bb26838d11652/68747470733a2f2f692e696d6775722e636f6d2f427259346733312e706e67" alt=""></p><h2 id="GenShape"><a href="#GenShape" class="headerlink" title="GenShape"></a>GenShape</h2><p>GenShapes 用于指定动作发生的位置。圆形和矩形等香草形状是不言自明的，您可能需要尝试其他形状。使用 GenShape 的一个很好的例子是 EnchantedSwordBiome 类。这个类负责世界生成代码的一般形状。</p><h3 id="GenModShape"><a href="#GenModShape" class="headerlink" title="GenModShape"></a>GenModShape</h3><p>从 GenModShape 继承的类使用输入的 ShapeData 点来驱动它们的坐标。例如，ModShapes.InnerOutline 可用于影响由 ShapeData 提供的点集的内部轮廓。</p><h3 id="自定义-GenShape"><a href="#自定义-GenShape" class="headerlink" title="自定义 GenShape"></a>自定义 GenShape</h3><p>从 GenShape 继承允许使用自定义形状。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">// World Gen Code</span>Point point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AngularSpiral</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>RubyGemspark<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AngularSpiral</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Custom GenShape class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AngularSpiral</span> <span class="token punctuation">:</span> GenShape<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> radius<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AngularSpiral</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">Perform</span><span class="token punctuation">(</span>Point origin<span class="token punctuation">,</span> GenAction action<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dy <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> radius <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">-</span>origin<span class="token punctuation">.</span>X<span class="token operator">/</span><span class="token number">2</span><span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> origin<span class="token punctuation">.</span>X <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">-</span>origin<span class="token punctuation">.</span>Y <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> origin<span class="token punctuation">.</span>Y <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">UnitApply</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> origin<span class="token punctuation">,</span> origin<span class="token punctuation">.</span>X <span class="token operator">+</span> i<span class="token punctuation">,</span> origin<span class="token punctuation">.</span>Y <span class="token operator">+</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> _quitOnFail<span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j <span class="token operator">||</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token operator">-</span>j<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>dy<span class="token punctuation">,</span> dx<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> dx<span class="token punctuation">,</span> j <span class="token operator">+</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/986f88023e641437617fc3cf88a89164ae529d745692f8e97016a2f318d4362b/68747470733a2f2f692e696d6775722e636f6d2f363238564a55592e706e67" alt=""></p><h2 id="GenAction"><a href="#GenAction" class="headerlink" title="GenAction"></a>GenAction</h2><p>GenActions 指示影响由 GenShape 提供的坐标的代码。一些常见的操作包括 SetTile，用于设置图块类型，以及 Scanner，用于计算 GenShape 的迭代次数。</p><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>Scanner 可用于计算当前有多少块满足 Actions.Chain 的条件。这对于查找主要是某种情况或其他情况的斑点很有用。例如，如果您想查找 90% 实心 Tile 的位置，您可以将扫描仪的结果与检查的 Tile 总数进行比较。这个例子展示了如何通过 <code>Ref&lt;int&gt;</code> 使用 Scanner。此示例还显示了 Actions.ContinueWrapper，它允许将条件分成子链，当它们失败时不会停止其他链。 （通常，当 Action 返回 false 时，链将终止。）</p><pre class="line-numbers language-csharp"><code class="language-csharp">Ref<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> anyCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Ref<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> solidCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Ref<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> notsolidCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ref</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenAction</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>ContinueWrapper</span><span class="token punctuation">(</span>Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenAction</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>IsNotSolid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Custom</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>Dust<span class="token punctuation">.</span><span class="token function">QuickDust</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Purple<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Scanner</span><span class="token punctuation">(</span>notsolidCount<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>ContinueWrapper</span><span class="token punctuation">(</span>Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenAction</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>IsSolid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Custom</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>Dust<span class="token punctuation">.</span><span class="token function">QuickDust</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>YellowGreen<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Scanner</span><span class="token punctuation">(</span>solidCount<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Scanner</span><span class="token punctuation">(</span>anyCount<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Main<span class="token punctuation">.</span><span class="token function">NewText</span><span class="token punctuation">(</span>$<span class="token string">"Any {anyCount.Value}, Solid {solidCount.Value}, NotSolid {notsolidCount.Value}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/ab262f62ebab28210ce7b728d252fc95fbf20ca0b7ac966e04bb0d8cff48eaba/68747470733a2f2f692e696d6775722e636f6d2f5741624a4f686e2e706e67" alt=""></p><h3 id="TileScanner"><a href="#TileScanner" class="headerlink" title="TileScanner"></a>TileScanner</h3><p>TileScanner 按给定形状中的类型计算图块。 TileScanner 通过检查附近的 Tile 来帮助计算位置是否合适。它有助于避免与其他世界生成元素重叠，并有助于将世界生成要素放置在与所需位置完全匹配的位置。以下示例使用 TileScanner 检查测试区域中 50% 的 Tile 是石头还是泥土。通过调整我们的标准，我们可以保证我们的世界生成元素的放置令人愉悦。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Point point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>Dictionary<span class="token operator">&lt;</span><span class="token keyword">ushort</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> dictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">ushort</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>TileScanner</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Dirt<span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>Stone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>dictionary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> stoneAndDirtCount <span class="token operator">=</span> dictionary<span class="token punctuation">[</span>TileID<span class="token punctuation">.</span>Dirt<span class="token punctuation">]</span> <span class="token operator">+</span> dictionary<span class="token punctuation">[</span>TileID<span class="token punctuation">.</span>Stone<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 20 * 10 == 200. This is checking that at least 75% of the area is Stone or Dirt</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stoneAndDirtCount <span class="token operator">&lt;</span> <span class="token number">150</span><span class="token punctuation">)</span>    Main<span class="token punctuation">.</span><span class="token function">NewText</span><span class="token punctuation">(</span>$<span class="token string">"Not a suitable location: {stoneAndDirtCount}/200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    Main<span class="token punctuation">.</span><span class="token function">NewText</span><span class="token punctuation">(</span>$<span class="token string">"A Suitable location: {stoneAndDirtCount}/200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Dust<span class="token punctuation">.</span><span class="token function">QuickBox</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vector2</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Orange<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/9d0cd9b7dd7d1f95198ad49fba25b0d98226e0dc3a8ac4cccbfb12e2826275d5/68747470733a2f2f692e696d6775722e636f6d2f714233634b57762e706e67" alt=""></p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>Actions.Custom GenAction 允许执行任意代码。您想用 GenActions 做的大多数典型事情已经被现有的类所涵盖，但是使用它的一个例子是产生灰尘：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Custom</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> Dust<span class="token punctuation">.</span><span class="token function">QuickDust</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义-GenAction"><a href="#自定义-GenAction" class="headerlink" title="自定义 GenAction"></a>自定义 GenAction</h3><p>从 GenAction 继承可用于在每个坐标上运行自定义代码。这是一个以 ActionVines 为模型的名为 ActionRope 的示例。自定义 GenAction 类可以帮助组织代码的可重用部分。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActionRope</span> <span class="token punctuation">:</span> GenAction<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _minLength<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _maxLength<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> _vineId<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ActionRope</span><span class="token punctuation">(</span><span class="token keyword">int</span> minLength <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">int</span> vineId <span class="token operator">=</span> TileID<span class="token punctuation">.</span>Rope<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _minLength <span class="token operator">=</span> minLength<span class="token punctuation">;</span>        _maxLength <span class="token operator">=</span> maxLength<span class="token punctuation">;</span>        _vineId <span class="token operator">=</span> vineId<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">Apply</span><span class="token punctuation">(</span>Point origin<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">params</span> <span class="token keyword">object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> GenBase<span class="token punctuation">.</span>_random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span>_minLength<span class="token punctuation">,</span> _maxLength <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>GenBase<span class="token punctuation">.</span>_tiles<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            GenBase<span class="token punctuation">.</span>_tiles<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">ushort</span><span class="token punctuation">)</span>_vineId<span class="token punctuation">;</span>            GenBase<span class="token punctuation">.</span>_tiles<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">active</span><span class="token punctuation">(</span>active<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token function">UnitApply</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 使用代码。此代码调用木 Tile 下方的 ActionRope 1 块。 NotTouching 和 Dither 使放置更加随机</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ModShapes<span class="token punctuation">.</span>All</span><span class="token punctuation">(</span>shapeData<span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>OnlyTiles</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>WoodBlock<span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>NotTouching</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>Rope<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Dither</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ActionRope</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/48fa5d4f867986a6885e3448f1d42ae07580dc20003aa24789fae97e9e09c89c/68747470733a2f2f692e696d6775722e636f6d2f684b695364797a2e706e67" alt=""></p><h2 id="Modifier"><a href="#Modifier" class="headerlink" title="Modifier"></a>Modifier</h2><p>修饰符是特殊的 GenAction，它限制后续链接的 GenAction 的执行。一个简单的例子是抖动修改器。抖动随机终止动作链。在下面的示例中，圆圈内的所有 Tile 都会产生黄尘，但抖动修改器会在 20% 的时间提前终止链，从而导致如下所示的破烂放置。</p><pre class="line-numbers language-csharp"><code class="language-csharp">WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Circle</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenAction</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Custom</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>Dust<span class="token punctuation">.</span><span class="token function">QuickDust</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span>Yellow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Dither</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>AmberGemspark<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/cb69a160c0a3fbf9768740962983965e9e65906c1faa74ee5d23ee3f224fac64/68747470733a2f2f692e696d6775722e636f6d2f566146535666362e706e67" alt=""></p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>输出可用于记住特定 GenAction 处的坐标集。在此示例中，我们将 2 个单独的 Circles 的结果输出到共享的 ShapeData。此 ShapeData 被传递给 InnerOutline，后者计算来自该数据的哪些图块形成内部轮廓。通过这种方式，我们基本上合并了两个 GenShapes 的结果，并使用这些结果来制作 Lava Moss Tile 的独特形状。</p><pre class="line-numbers language-csharp"><code class="language-csharp">ShapeData shapeData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShapeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Circle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Blank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>shapeData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Circle</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenAction</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Offset</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>Blank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>shapeData<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ModShapes<span class="token punctuation">.</span>InnerOutline</span><span class="token punctuation">(</span>shapeData<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>LavaMoss<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/024293b4c8a695dce61c443484d635fc0668da204dfd0cdd4813b2fbab251d20/68747470733a2f2f692e696d6775722e636f6d2f4d594752596d742e706e67" alt=""></p><h2 id="GenCondition"><a href="#GenCondition" class="headerlink" title="GenCondition"></a>GenCondition</h2><p>GenConditions 是确定区域或坐标是否满足条件的类。默认情况下，它们只检查提供的坐标，但可用于查找满足条件的区域。面积测量为矩形，提供的坐标为左上角。 GenConditions 通常与 WorldUtils.Find 结合使用，以找到适合步骤的位置。</p><h3 id="AreaAnd"><a href="#AreaAnd" class="headerlink" title="AreaAnd"></a>AreaAnd</h3><p>通过使用 AreaAnd 修改 GenCondition，区域内的所有坐标都必须满足条件才能被视为成功。例如，new Conditions.IsSolid().AreaAnd(6, 2) 检查 6 tile 宽 x 2 tile 高区域中的所有 Tile 是否都是实心的。</p><h3 id="AreaOr"><a href="#AreaOr" class="headerlink" title="AreaOr"></a>AreaOr</h3><p>AreaOr 检查区域中是否有任何 Tile 满足条件。例如，new Conditions.IsSolid().AreaOr(3, 1) 尝试确定 3x1 区域中的任何 Tile 是否是实心的。</p><h3 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h3><p>Not 可以应用于 AreaAnd、AreaOr 或没有区域的 GenCondition。没有区域不应用将反转条件。例如，新的Conditions.IsSolid().Not() 只有在 Tile 不是实心的时候才会成功。不应用于 AreaOr 充当 NOR 操作，因为该区域中的任何 Tile 都不满足条件。new Conditions.IsSolid().Not().AreaOr(3, 5) 将尝试找到一个 3x5 区域，其中没有任何实心 Tile 。不适用于 AreaAnd 充当 NAND 操作，仅当并非所有 Tile 都满足条件时才返回 true，或者换句话说，至少有 1 个 Tile 不满足条件。</p><h3 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h3><p>尚不支持抵消 GenConditions。这意味着单个 Find 中的所有 GenCondition 将共享左上角。</p><h2 id="Find"><a href="#Find" class="headerlink" title="Find"></a>Find</h2><p>WorldUtils.Find 可用于搜索满足特定条件的位置。通过使用搜索和许多 GenCondition，该方法尝试找到满足所有条件的坐标。Searches.Down 指示 Find 从输入点开始并向下移动最多 20 个 Tile 以寻找合适的位置。如果搜索成功，该方法返回 true。此示例中的条件尝试查找全部为实心和沙色的 5x5 正方形Tile。如果找到了，黑曜石就会放在中间。黄色的尘埃显示了发现的符合条件的区域。光标显示搜索从地面开始并向下搜索，直到找到最终结果。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Point resultPoint<span class="token punctuation">;</span><span class="token keyword">bool</span> searchSuccessful <span class="token operator">=</span> WorldUtils<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> Searches<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Searches<span class="token punctuation">.</span>Down</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GenCondition</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Conditions<span class="token punctuation">.</span>IsSolid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AreaAnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">Conditions<span class="token punctuation">.</span>IsTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Sand<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AreaAnd</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> resultPoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>searchSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Main<span class="token punctuation">.</span>tile<span class="token punctuation">[</span>resultPoint<span class="token punctuation">.</span>X <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> resultPoint<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TileID<span class="token punctuation">.</span>Obsidian<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://camo.githubusercontent.com/25a1d3f7570de194e271eb73f9d5d466f66dea427633d460d70b89fb30137e72/68747470733a2f2f692e696d6775722e636f6d2f50583444396f422e706e67" alt=""></p><h2 id="实例探究"><a href="#实例探究" class="headerlink" title="实例探究"></a>实例探究</h2><p>以下是一些复杂的示例，可以展示这种方法生成世界代码的全部潜力。</p><h3 id="附魔剑神殿"><a href="#附魔剑神殿" class="headerlink" title="附魔剑神殿"></a>附魔剑神殿</h3><p>Enchanted Sword Shrine 的代码可在 Terraria.GameContent.Biomes.EnchantedSwordBiome 类中找到。本节将研究 EnchantedSwordBiome 如何使用各种技术在合适的位置干净地生成神殿而不会出现问题。跟随下面的评论和视频。</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">bool</span> <span class="token function">Place</span><span class="token punctuation">(</span>Point origin<span class="token punctuation">,</span> StructureMap structures<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 通过使用 TileScanner，检查以原点为中心的 50x50 区域主要是 Dirt 或 Stone</span>Dictionary<span class="token operator">&lt;</span><span class="token keyword">ushort</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> tileDictionary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token keyword">ushort</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>X <span class="token operator">-</span> <span class="token number">25</span><span class="token punctuation">,</span> origin<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>TileScanner</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Dirt<span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>Stone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>tileDictionary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>tileDictionary<span class="token punctuation">[</span>TileID<span class="token punctuation">.</span>Dirt<span class="token punctuation">]</span> <span class="token operator">+</span> tileDictionary<span class="token punctuation">[</span>TileID<span class="token punctuation">.</span>Stone<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">1250</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果不是，则返回 false，这将导致调用方法尝试不同的来源</span>Point surfacePoint<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在上面最多搜索 1000 个图块，以查找 50 个图块高、1 个图块宽且没有单个实心图块的区域。基本上找到表面。</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> WorldUtils<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> Searches<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Searches<span class="token punctuation">.</span>Up</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Conditions<span class="token punctuation">.</span>IsSolid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AreaOr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Not</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> surfacePoint<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从原点到地表搜索，确保原点和地表之间没有沙子</span><span class="token keyword">if</span> <span class="token punctuation">(</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span>origin<span class="token punctuation">,</span> Searches<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Searches<span class="token punctuation">.</span>Up</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>Y <span class="token operator">-</span> surfacePoint<span class="token punctuation">.</span>Y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Conditions<span class="token punctuation">.</span>IsTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Sand<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">out</span> Point _<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span>surfacePoint<span class="token punctuation">.</span>Y <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调整结果指向表面，而不是上面 50 个图块</span>ShapeData slimeShapeData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShapeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ShapeData moundShapeData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShapeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Point point <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>X<span class="token punctuation">,</span> origin<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Point point2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>X<span class="token punctuation">,</span> origin<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> xScale <span class="token operator">=</span> <span class="token number">0.8f</span> <span class="token operator">+</span> GenBase<span class="token punctuation">.</span>_random<span class="token punctuation">.</span><span class="token function">NextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/// 随机化神社区域的宽度</span><span class="token comment" spellcheck="true">// 检查 StructureMap 对于我们希望放置神殿的预期区域是否存在任何冲突。</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>structures<span class="token punctuation">.</span><span class="token function">CanPlace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>X <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20f</span> <span class="token operator">*</span> xScale<span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">40f</span> <span class="token operator">*</span> xScale<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检查 StructureMap 对于通向表面的轴是否存在任何冲突</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>structures<span class="token punctuation">.</span><span class="token function">CanPlace</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>X<span class="token punctuation">,</span> surfacePoint<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> origin<span class="token punctuation">.</span>Y <span class="token operator">-</span> surfacePoint<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用粘土形状，清除 Tile。斑点使边缘看起来更自然。 https://i.imgur.com/WtZaBbn.png</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Slime</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> xScale<span class="token punctuation">,</span> <span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Blotches</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>ClearTile</span><span class="token punctuation">(</span>frameNeighbors<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>slimeShapeData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在切出的粘土形状内放置一个土堆</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Mound</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Blotches</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Dirt<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetFrames</span><span class="token punctuation">(</span>frameNeighbors<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>moundShapeData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从粘土坐标数据中删除土墩坐标</span>slimeShapeData<span class="token punctuation">.</span><span class="token function">Subtract</span><span class="token punctuation">(</span>moundShapeData<span class="token punctuation">,</span> point<span class="token punctuation">,</span> point2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 沿着粘土坐标数据的内部轮廓放置草</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ModShapes<span class="token punctuation">.</span>InnerOutline</span><span class="token punctuation">(</span>slimeShapeData<span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Grass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetFrames</span><span class="token punctuation">(</span>frameNeighbors<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将水放在粘土形状下半部分的空坐标中</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ModShapes<span class="token punctuation">.</span>All</span><span class="token punctuation">(</span>slimeShapeData<span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>RectangleMask</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetLiquid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在所有粘土形状坐标上放置花墙。将藤蔓放置在粘土形状的所有草方块下方 1 格。</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ModShapes<span class="token punctuation">.</span>All</span><span class="token punctuation">(</span>slimeShapeData<span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>PlaceWall</span><span class="token punctuation">(</span>WallID<span class="token punctuation">.</span>Flower<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>OnlyTiles</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Grass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ActionVines</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 移除图块以创建轴到表面。将沿轴的图块转换为硬化的图块。</span>ShapeData shaftShapeData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShapeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>X<span class="token punctuation">,</span> surfacePoint<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Shapes<span class="token punctuation">.</span>Rectangle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> origin<span class="token punctuation">.</span>Y <span class="token operator">-</span> surfacePoint<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Blotches</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>ClearTile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>shaftShapeData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Expand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>OnlyTiles</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Sand<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetTile</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>HardenedSand<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Output</span><span class="token punctuation">(</span>shaftShapeData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>origin<span class="token punctuation">.</span>X<span class="token punctuation">,</span> surfacePoint<span class="token punctuation">.</span>Y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ModShapes<span class="token punctuation">.</span>All</span><span class="token punctuation">(</span>shaftShapeData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Actions<span class="token punctuation">.</span>SetFrames</span><span class="token punctuation">(</span>frameNeighbors<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 33% 的几率放置一个附魔剑神殿Tile</span><span class="token keyword">if</span> <span class="token punctuation">(</span>GenBase<span class="token punctuation">.</span>_random<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    WorldGen<span class="token punctuation">.</span><span class="token function">PlaceTile</span><span class="token punctuation">(</span>point2<span class="token punctuation">.</span>X<span class="token punctuation">,</span> point2<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>LargePiles2<span class="token punctuation">,</span> mute<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> forced<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    WorldGen<span class="token punctuation">.</span><span class="token function">PlaceTile</span><span class="token punctuation">(</span>point2<span class="token punctuation">.</span>X<span class="token punctuation">,</span> point2<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">15</span><span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>LargePiles<span class="token punctuation">,</span> mute<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span> forced<span class="token punctuation">:</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将植物放在土堆形状的草砖上方。</span>WorldUtils<span class="token punctuation">.</span><span class="token function">Gen</span><span class="token punctuation">(</span>point2<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ModShapes<span class="token punctuation">.</span>All</span><span class="token punctuation">(</span>moundShapeData<span class="token punctuation">)</span><span class="token punctuation">,</span> Actions<span class="token punctuation">.</span><span class="token function">Chain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>OnlyTiles</span><span class="token punctuation">(</span>TileID<span class="token punctuation">.</span>Grass<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Modifiers<span class="token punctuation">.</span>Offset</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ActionGrass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加到 StructureMap 以防止其他 worldgen 与该区域相交。</span>structures<span class="token punctuation">.</span><span class="token function">AddStructure</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>X <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20f</span> <span class="token operator">*</span> xScale<span class="token punctuation">)</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>Y <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">40f</span> <span class="token operator">*</span> xScale<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>点击查看<a href="https://gfycat.com/ForcefulImmediateAsiaticlesserfreshwaterclam" target="_blank" rel="noopener">附魔剑神社</a>高清版本</p><h1 id="有用的方法"><a href="#有用的方法" class="headerlink" title="有用的方法"></a>有用的方法</h1><h2 id="Terraria-WorldGen-public-static-void-TileRunner-int-i-int-j-double-strength-int-steps-int-type-bool-addTile-false-float-speedX-0f-float-speedY-0f-bool-noYChange-false-bool-overRide-true"><a href="#Terraria-WorldGen-public-static-void-TileRunner-int-i-int-j-double-strength-int-steps-int-type-bool-addTile-false-float-speedX-0f-float-speedY-0f-bool-noYChange-false-bool-overRide-true" class="headerlink" title="[Terraria.WorldGen] public static void TileRunner(int i, int j, double strength, int steps, int type, bool addTile = false, float speedX = 0f, float speedY = 0f, bool noYChange = false, bool overRide = true)"></a>[Terraria.WorldGen] public static void TileRunner(int i, int j, double strength, int steps, int type, bool addTile = false, float speedX = 0f, float speedY = 0f, bool noYChange = false, bool overRide = true)</h2><p>此方法从坐标（ Tile 坐标中的 x 和 y）开始放置指定 Tile （类型）的小斑点。这种方法通常用于放置矿石或其他非框架重要的 Tile ，如沙子、泥土或石头。类型的特殊值具有特殊效果。 -1 将删除 Tile 而不是放置 Tile ，-2 将执行相同的操作，但如果坐标低于熔岩线，则添加熔岩。形状和大小由强度和步长参数控制。强度指导 Tile 的斑点有多大，步骤指示该过程将重复多少次。例如，小力度小步长会产生小斑点，力度大小步长会产生大斑点，力度小大步长会导致 Tile 的路径又长又细。 speedX 和 speedY 驱动各个步骤的路径将采用的初始方向，但该方法也会随机调整方向。 noYChange 为 true 时似乎将土墙放置在地表水平的 Tile 后面，并且对垂直运动的变化也有一些影响。 addTile 当为 true 时，会在世界上放置额外的 Tile 。当 true 将现有 Tile 更改为指定 Tile 时，overRide。当世界上有多个瓦片且 overRide 参数为 true 时，使用 TileRunner 是不安全的，因为它会破坏它们。在多人游戏中使用也是不安全的，因为它不会“框定” Tile ，也不会同步 Tile 更改。使用此方法的最新 vanilla 步骤是“Gems”步骤，因此使用此方法且 overRide 参数为 true 的放置步骤的最新位置将紧接在“Gems”步骤之后。如果您有不应被生成的矿石和宝石覆盖的 Tile ，请将该 ModTile 的 TileID.Sets.CanBeClearedDuringGeneration[Type] 设置为 false。由于在调用 TileRunner 时世界上不应存在多块，因此您只需为不希望矿石渗入的地形块设置此选项。<br><img src="https://camo.githubusercontent.com/ede3d5f04262bc1d3f26ec0354c7b70e05b5f968c7441730fd471e99a1210b77/68747470733a2f2f7468756d62732e6766796361742e636f6d2f576967676c794a61756e74794879646174696474617065776f726d2d736d616c6c2e676966" alt=""><br><a href="https://camo.githubusercontent.com/ede3d5f04262bc1d3f26ec0354c7b70e05b5f968c7441730fd471e99a1210b77/68747470733a2f2f7468756d62732e6766796361742e636f6d2f576967676c794a61756e74794879646174696474617065776f726d2d736d616c6c2e676966" target="_blank" rel="noopener">高清版本</a></p><h2 id="Terraria-WorldGen-public-static-void-OreRunner-int-i-int-j-double-strength-int-steps-ushort-type"><a href="#Terraria-WorldGen-public-static-void-OreRunner-int-i-int-j-double-strength-int-steps-ushort-type" class="headerlink" title="[Terraria.WorldGen] public static void OreRunner(int i, int j, double strength, int steps, ushort type)"></a>[Terraria.WorldGen] public static void OreRunner(int i, int j, double strength, int steps, ushort type)</h2><p>类似于 TileRunner，但没有很多选项。 OreRunner 从坐标（Tile坐标中的 x 和 y）开始放置指定Tile（类型）的小斑点。 OreRunner 仅替换 TileID.Sets.CanBeClearedDuringOreRunner 或 Main.tileMoss 的活动 Tile ，使其适合在世界上存在帧重要 Tile 之后使用。如果您有一个在世界中产生额外矿石时应该容易被替换的 Tile ，请将该 ModTile 的 TileID.Sets.CanBeClearedDuringOreRunner 设置为 true。原版代码仅在生成困难模式矿石时使用此方法。此方法适合在游戏中和多人游戏中使用，因为它同时帧和同步 Tile 更改。</p><h2 id="Terraria-WorldGen-public-static-int-PlaceChest-int-x-int-y-ushort-type-21-bool-notNearOtherChests-false-int-style-0"><a href="#Terraria-WorldGen-public-static-int-PlaceChest-int-x-int-y-ushort-type-21-bool-notNearOtherChests-false-int-style-0" class="headerlink" title="[Terraria.WorldGen] public static int PlaceChest(int x, int y, ushort type = 21, bool notNearOtherChests = false, int style = 0)"></a>[Terraria.WorldGen] public static int PlaceChest(int x, int y, ushort type = 21, bool notNearOtherChests = false, int style = 0)</h2><p>该方法尝试在给定坐标处放置一个箱子。如果方法成功，提供的坐标将是生成的箱子的左下角。 type 是要放置的 Tile 类型，style 是要放置的样式类型。对于香草箱子，您可以在提取香草纹理后从 Tiles_21.png 图像的左侧从零开始计数，以找到您想要放置的样式。 notNearOtherChests 可以设置为 true 以防止在左侧或右侧 25 格和上下 8 格内存在另一个箱子时放置该箱子。此方法返回成功放置的箱子的箱子索引，如果放置失败则返回 -1。宝箱放置失败的原因有很多，例如如果现有的 Tile 挡住了空间，或者在预期位置正下方没有 2 个合适的实心 Tile 。有关使用此方法的方法，请参阅尝试直到成功。有关将物品放入箱子的信息，请参阅将物品放入箱子中。<br><img src="https://camo.githubusercontent.com/fdc4965e337bedda9231e9287a5aa6950b60215e873bae1a00518b5a72e97278/68747470733a2f2f692e696d6775722e636f6d2f43794167564e702e706e67" alt=""></p><h2 id="Terraria-WorldGen-public-static-bool-AddBuriedChest-int-i-int-j-int-contain-0-bool-notNearOtherChests-false-int-Style-1"><a href="#Terraria-WorldGen-public-static-bool-AddBuriedChest-int-i-int-j-int-contain-0-bool-notNearOtherChests-false-int-Style-1" class="headerlink" title="[Terraria.WorldGen] public static bool AddBuriedChest(int i, int j, int contain = 0, bool notNearOtherChests = false, int Style = -1)"></a>[Terraria.WorldGen] public static bool AddBuriedChest(int i, int j, int contain = 0, bool notNearOtherChests = false, int Style = -1)</h2><p>该方法尝试放置一个箱子并根据样式和深度填充典型的战利品。如果没有任何参数，将根据深度创建常规、金色或锁定的阴影箱。您可以为包含传递一个项目类型，箱子中的第一个项目将是该项目。与 PlaceChest 不同，生成的箱子将放置在给定坐标的右下角。此外，如果给定的 j 坐标不合适，AddBuriedChest 将从给定坐标向下搜索以找到它遇到的第一个实心 Tile 并尝试放置在那里。如果成功放置了箱子，则此方法返回 true，但请注意，箱子可能不完全位于您提供的坐标处。这是使用默认参数 WorldGen.AddBuriedChest(x, y); 运行该方法的示例。请注意箱子样式如何根据深度变化以及箱子如何放置在提供的坐标正下方的地板上（如果可能）：<br><img src="https://camo.githubusercontent.com/4edc4bcb926282075242e5ba21e97e6bfe2dd120bfb635506e352ab086f41b8d/68747470733a2f2f7468756d62732e6766796361742e636f6d2f556e636f6d666f727461626c654c6967687468656172746564456173747275737369616e636f757273696e67686f756e64732d736d616c6c2e676966" alt=""><br><a href="https://gfycat.com/wigglyjauntyhydatidtapeworm" target="_blank" rel="noopener">高清版本</a><br>有关将物品放入箱子的信息，请参阅[将物品放入箱子]（将物品放入箱子）。</p><h2 id="Terraria-WorldGen-public-static-bool-InWorld-int-x-int-y-int-fluff-0"><a href="#Terraria-WorldGen-public-static-bool-InWorld-int-x-int-y-int-fluff-0" class="headerlink" title="[Terraria.WorldGen] public static bool InWorld(int x, int y, int fluff = 0)"></a>[Terraria.WorldGen] public static bool InWorld(int x, int y, int fluff = 0)</h2><p>在处理与加法或减法相结合的随机坐标时，您可能会在世界范围之外构建坐标。这会导致世界生成崩溃，因此在尝试在这些坐标处执行操作之前检查坐标是否合适非常重要。使用此方法检查给定坐标是否在世界范围内。绒毛参数进一步检查坐标距离边缘至少有多少 Tile ，这对于可能影响大片 Tile 的世界生成动作很有用。</p><h2 id="Terraria-WorldGen-public-static-Point-RandomWorldPoint-int-top-0-int-right-0-int-bottom-0-int-left-0"><a href="#Terraria-WorldGen-public-static-Point-RandomWorldPoint-int-top-0-int-right-0-int-bottom-0-int-left-0" class="headerlink" title="[Terraria.WorldGen] public static Point RandomWorldPoint(int top = 0, int right = 0, int bottom = 0, int left = 0)"></a>[Terraria.WorldGen] public static Point RandomWorldPoint(int top = 0, int right = 0, int bottom = 0, int left = 0)</h2><p>一种在世界中寻找随机 Tile 坐标的更简化的方法。 Point point = WorldGen.RandomWorldPoint((int)Main.worldSurface, 50, 500, 50) 等价于</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> x <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesX <span class="token operator">-</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span>genRand<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Main<span class="token punctuation">.</span>worldSurface<span class="token punctuation">,</span> Main<span class="token punctuation">.</span>maxTilesY <span class="token operator">-</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Terraria-WorldGen-public-static-void-KillTile-int-i-int-j-bool-fail-false-bool-effectOnly-false-bool-noItem-false"><a href="#Terraria-WorldGen-public-static-void-KillTile-int-i-int-j-bool-fail-false-bool-effectOnly-false-bool-noItem-false" class="headerlink" title="[Terraria.WorldGen] public static void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)"></a>[Terraria.WorldGen] public static void KillTile(int i, int j, bool fail = false, bool effectOnly = false, bool noItem = false)</h2><p>KillTile 可用于破坏指定 i 和 j 坐标处的瓦片或多瓦片。 fail 可防止 Tile 被破坏，但仍会播放撞击声音。 effectOnly 防止 Tile 被破坏，但仍会产生击中灰尘并防止击中声音。 noItem 防止物品掉落。</p><h2 id="Terraria-WorldGen-public-static-bool-PlaceTile-int-i-int-j-int-type-bool-mute-false-bool-forced-false-int-plr-1-int-style-0"><a href="#Terraria-WorldGen-public-static-bool-PlaceTile-int-i-int-j-int-type-bool-mute-false-bool-forced-false-int-plr-1-int-style-0" class="headerlink" title="[Terraria.WorldGen] public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0)"></a>[Terraria.WorldGen] public static bool PlaceTile(int i, int j, int type, bool mute = false, bool forced = false, int plr = -1, int style = 0)</h2><p>PlaceTile 是在遵守锚点注意事项的同时放置单个图块的主要方式。 i 和 j 是坐标。这些坐标与图块的原点有关，不一定是图块的左上角。阅读 Basic Tile 以熟悉 Anchors 和 Origins 的概念。静音指示是否应该发出声音，这仅适用于游戏内使用，因为声音在世界生成期间全部静音。即使其他图块已经在坐标处，也强制尝试放置图块，但这是不可靠的。 plr 除了影响浴缸之外什么都不做。 style 是指提供的 tile 类型的样式。样式在 Basic Tile 指南中进行了解释。</p><p>PlaceTile 返回一个表示放置成功的布尔值。不幸的是，它不起作用，不要使用它。调用 PlaceTile 后检查坐标是检查放置是否成功的好方法： if(Main.tile[x, y].type == TileID.Campfire)</p><p>PlaceTile 不会公开所有内容。例如，尝试放置具有特定样式的图块将被许多底层方法忽略。另一个问题是不可能放置左右放置方向面向右侧的图块。在这些情况下，您可能需要手动将每个图块放置在多图块中，或者改用 WorldGen.PlaceObject。 WorldGen.PlaceObject 需要更多输入。例如，使用 PlaceObject 放置 Coral 意味着您必须手动指定样式，因为随机样式选择是 PlaceTile 的一个功能。</p><p>TODO：解释如何在代码中放置 TileEntity，因为 PlaceTile 不会自动完成。</p><h2 id="StructureMap"><a href="#StructureMap" class="headerlink" title="StructureMap"></a>StructureMap</h2><p>在世界生成期间，游戏使用通过 Worldgen.structures 访问的 StructureMap 来跟踪重要的世界生成功能以防止重叠。 StructureMap 基本上是一个 Rectangles 集合，指示世界中被不应被干扰的世界生成特征所占据的区域。如果您正在生成一些重要的东西，您可能希望通过 Worldgen.structures.AddProtectedStructure 方法添加到 StructureMap 以告诉其他世界生成通道避开该区域。 StructureMap 是合作的，如果您要放置结构，最好在将结构放置在坐标处之前检查 Worldgen.structures.CanPlace 结构。 StructureMap 中的一些结构原版位置包括 Hives、Enchanted Sword Altars 和 Cabins。 StructureMap 不必用于所有结构，因为生物群系之间的交互很有趣。将 StructureMap 用于不应交互的结构，并在后期执行破坏性操作之前检查 StructureMap。<br>此图像显示了 StructureMap 中以绿色突出显示的条目。<br><img src="https://camo.githubusercontent.com/9efe2d3dc7769c4c64ab9b20f0457e0f59248b2f6d57492842399f19d8efb5de/68747470733a2f2f692e696d6775722e636f6d2f31765a476b63732e706e67" alt=""></p><h2 id="TileID-Sets-GeneralPlacementTiles"><a href="#TileID-Sets-GeneralPlacementTiles" class="headerlink" title="TileID.Sets.GeneralPlacementTiles"></a>TileID.Sets.GeneralPlacementTiles</h2><p>当代码检查 Worldgen.structures.CanPlace 时，CanPlace 将另外在该区域中搜索 GeneralPlacementTiles 中为 false 的图块。在 GeneralPlacementTiles 中将 TileID 设置为 false 将阻止遵循 StructureMap 的结构尝试放置在其上。</p><h2 id="TileID-Sets-CanBeClearedDuringGeneration"><a href="#TileID-Sets-CanBeClearedDuringGeneration" class="headerlink" title="TileID.Sets.CanBeClearedDuringGeneration"></a>TileID.Sets.CanBeClearedDuringGeneration</h2><p>此代码会影响 Cavinator 和 TileRunner 等地形方法。此数组中标记为 false 的图块将在这些操作中继续存在。</p><h2 id="IL-Editing"><a href="#IL-Editing" class="headerlink" title="IL Editing"></a>IL Editing</h2><p>原版世界生成通行证都是匿名方法，不幸的是，这意味着 IL 编辑要困难得多。我们必须手动使用 HookEndpointManager，更复杂的是方法名称是自动生成的。 TODO：他们经常改变吗？如何以编程方式找到它们，例如。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> tModLoader </tag>
            
            <tag> terraria </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改装教程：世界生成(论坛版)</title>
      <link href="/blog/modding-tutorial-world-generation/"/>
      <url>/blog/modding-tutorial-world-generation/</url>
      
        <content type="html"><![CDATA[<p><a href="https://forums.terraria.org/index.php?threads/modding-tutorial-world-generation.47601/" target="_blank" rel="noopener">Modding Tutorial: World Generation</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>世界生成涉及很多细节。即使在你做最基本的结构时，它们也会不断地笼罩着你，并且对于理解你的代码为什么工作或不工作至关重要。</p><p>这些概念中最基本的是泰拉瑞亚使用的坐标系，其中位置 (0, 0) 是世界的最左上角。然后，您可以使用公共变量 Main.maxTilesX 和 Main.maxTilesY 来分别获取世界的宽度和高度。</p><p>但是，在执行此操作时，请注意可玩世界在玩家实际到达任一轴上的坐标 0 之前停止 - 我从未测试过，但世界在真正停止之前停止滚动可能 40 或 50 个 tile。当您想向世界的边缘添加东西（例如海洋或太空内容）时，请记住这一点。</p><p>参考这个以获得更好的世界高度的视觉表示：<br><img src="https://forums.terraria.org/index.php?attachments/1612298483774-png.306777/" alt=""></p><p>另一个需要注意的非常重要的事情是生成顺序 - 在泰拉瑞亚中，游戏使用了一个名为 GenPasses 的任务列表，告诉世界如何按顺序生成。记住这一点非常重要 - 例如，如果您过早生成矿石，它们很容易被紧随其后的新一代取代。比如我前段时间做了一个生物群系，经过一番测试，发现地牢或者丛林神殿可以覆盖它，使其基本不存在。因此，我不得不将其在 gen 列表中向前移动，以免我的生物群落消失。如果您了解您的世代在列表中的位置，您还会发现更容易调试。<br>有关 vanilla 生成步骤顺序的进一步参考，请在此处遵循此<a href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-World-Generation-Steps" target="_blank" rel="noopener">列表</a>。</p><p>最后，您必须始终牢记的是，tile 存储在 2D 数组中。其后果如下：</p><ul><li>1.如果超出数组的边界（即尝试访问(-1, 0)处的tile），则会崩溃或无法生成；</li><li>2.如果您要使用例如玩家位置，您需要将玩家位置除以 16 才能访问同一位置的tile - 例如，如果我想获得玩家正上方的 tile，我将使用以下代码：<pre class="line-numbers language-csharp"><code class="language-csharp">Framing<span class="token punctuation">.</span><span class="token function">GetTileSafely</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>X <span class="token operator">/</span> <span class="token number">16f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>Y <span class="token operator">/</span> <span class="token number">16f</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>对弹丸、NPC、灰尘和血块进行相同的除法操作。</li><li><ol start="3"><li>这些 tile位置也始终是整数，而不是任何类型的小数。如果您尝试访问 1.2f, 2 处的 tile，您将收到错误消息。</li></ol></li><li><ol start="4"><li>最后，每个 tile 总是加载到世界中，但只有当 tile 实际放置在世界中时才会激活 - 因此，如果您访问空气 tile，您可能会得到非空气类型（即沙子），但是它将是空的。</li></ol></li></ul><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><p>因此，除了所有这些，我们可以从最简单的方法和工具开始，您可以使用它们来创建或检查或做任何事情：</p><pre class="line-numbers language-csharp"><code class="language-csharp">WorldGen<span class="token punctuation">.</span><span class="token function">PlaceTile</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">bool</span> mute <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> forced <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">int</span> plr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">int</span> style <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正如您可能猜到的那样，这会在 i、j 处放置一个类型为 type 的 tile，<br>如果 mute 为假，则播放声音。<br>至于forced - 我想它会强制放置 tile，但我不经常使用它。<br>至于plr - 我不知道这是什么。完全没有。应该不重要吧？<br>最后，style 很难解释——它用于显示单个 tile 的替代版本。我将使用 PlaceObject 对此进行更多解释。</p><pre class="line-numbers language-csharp"><code class="language-csharp">WorldGen<span class="token punctuation">.</span><span class="token function">KillTile</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">bool</span> fail<span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> effectOnly <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> noItem <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也很简单 - 破坏 i, j 处的 tile。如果fail为true，则不会删除该 tile 。例如，这用于当您挖掘镐但需要多次击打时。<br>如果 effectOnly 为true，则tile只会产生灰尘，但不会破裂。通常与失败同时出现。例如，挖掘一个镐力太低的tile。<br>noItem 很简单，当 tile 被破坏时不会掉落物品。</p><pre class="line-numbers language-csharp"><code class="language-csharp">Framing<span class="token punctuation">.</span><span class="token function">GetTileSafely</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了完全透明，我只知道这是抓取任何给定 tile 的更好方法。如果你试图通过 Main.tile[x, y] 抓取一个 tile ，我建议你改用这个。<br>这对于检查给定 tile 的类型、它是否处于活动状态或它的某些特性非常有用。</p><pre class="line-numbers language-csharp"><code class="language-csharp">WorldGen<span class="token punctuation">.</span><span class="token function">TileRunner</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> strength<span class="token punctuation">,</span> <span class="token keyword">int</span> steps<span class="token punctuation">,</span> <span class="token keyword">int</span> type<span class="token punctuation">,</span> <span class="token keyword">bool</span> addTile <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">float</span> speedX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">float</span> speedY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> noYChange <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> overRide <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>好吧，这要复杂得多。 TileRunner 是一种方法，我可以解释的唯一方法是，如果选择的话，它会创建一个带有嘈杂边缘的“钻石”。<br>i 和 j 是 TileRunner 的位置。同样，这是在平铺位置。因此，如果您想使用玩家或 npc 位置来生成某些东西，则必须除以 16。<br>strength 是产生的块有多大——在某种程度上是“半径”。<br>我认为更好的解释方法是视觉参考：</p><h2 id="Spoiler-Strength-of-2"><a href="#Spoiler-Strength-of-2" class="headerlink" title="Spoiler: Strength of 2"></a>Spoiler: Strength of 2</h2><div style="display:flex;flex-direction:row;flex-wrap:wrap;"><img src="https://forums.terraria.org/index.php?attachments/1611985758319-png.306278/"/><img src="https://forums.terraria.org/index.php?attachments/1611985817752-png.306279/"/><img src="https://forums.terraria.org/index.php?attachments/1611985961872-png.306280/"/><img src="https://forums.terraria.org/index.php?attachments/1611986005783-png.306281/"/><img src="https://forums.terraria.org/index.php?attachments/1611986233247-png.306282/"></div><p>作为参考，每个 TileRunner 都有以下一行：</p><pre class="line-numbers language-csharp"><code class="language-csharp">WorldGen<span class="token punctuation">.</span><span class="token function">TileRunner</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>MouseWorld<span class="token punctuation">.</span>X <span class="token operator">/</span> <span class="token number">16f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Main<span class="token punctuation">.</span>MouseWorld<span class="token punctuation">.</span>Y <span class="token operator">/</span> <span class="token number">16f</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STRENGTH<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TileID<span class="token punctuation">.</span>Dirt<span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 STRENGTH = 展示的强度值。<br>step 对我来说有点混乱 - 据我所知，它是重复的数量，循环的数量，你在这个 TileRunner 调用上做的。如果需要使用 speedX 和 speedY，您可以将东西排成一行，在 addTile 之后解释。<br>addTile 告诉 TileRunner 是否要添加 tile 。如果将此设置为 true，它将放置新的瓷砖。如果不是，它只会替换旧 tile ，只要将 overRide 设置为 true。<br>speedX 和 speedY 指的是循环后新块的位移。例如，如果我有一个任意大小的 TileRunner，在任意位置，有 3 个步骤，speedX 为 5，speedY 为 0，它将放置 3 个块，每 5 个块相隔，从原始位置开始（i，j ) 并向右走。或者，如果我将 speedX 设置为负数，它将从 (i, j) 开始并向左移动。同样的原则也适用于 speedY；只是负速度 Y 上升，而正速度 Y 下降，分别对应于 (i, j)。这可能是一个有点冗长的解释，但如果你稍微弄乱它应该是有道理的。<br>noYChange 是……奇怪。我从来没有测试过它，但我猜它只会让 TileRunner 忽略 speedY。我不知道。我猜只是保持这个错误。<br>最后，overRide。如果可能，这将使用您的类型的 tile 替换现有 tile 。例如，如果我要放置我的矿石 BananaOre，我希望将 overRide 设置为 true，这样它就会在石头、泥土和泥土中生成。当您只想添加 tile 时设置为 false。</p><p>TileRunner 对于较小规模的 tile 非常有用，例如矿床（矿石是 TileRunner 最常见的用途之一）、沙子、泥土和石块以及类似的东西。但是，我建议不要将其用于大型生物群落和结构，因为当您想要完全填充一个区域而又不会低效时，它真的很难使用。同样，也很难准确地控制你想要的方式。</p><pre class="line-numbers language-csharp"><code class="language-csharp">WorldGen<span class="token punctuation">.</span><span class="token function">digTunnel</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">float</span> xDir<span class="token punctuation">,</span> <span class="token keyword">float</span> yDir<span class="token punctuation">,</span> <span class="token keyword">int</span> Steps<span class="token punctuation">,</span> <span class="token keyword">int</span> Size<span class="token punctuation">,</span> <span class="token keyword">bool</span> Wet <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在，想象一下 TileRunner，但它会删除tile。就是这样。它的工作原理相同，只是杀死tile。<br>唯一的区别是 Wet 的作用。这会将水放入它挖掘的隧道中。很简单。</p><h1 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h1><p>考虑到所有这些方法，我看到做生成的人最大的问题是 定位。我应该把我的结构放在哪里才能让它在 <x> 生物群系中？天空在哪里？表面在哪里？这些都是有效的问题，值得庆幸的是，它们很容易解决——尤其是当你像我一样做 gen 的时候。</p><p>你有五个主要的值——</p><ul><li><ol><li>0，世界的顶部</li></ol></li><li><ol start="2"><li>Main.worldSurface，世界的表面和下面的坐标被认为是“地下”；</li></ol></li><li><ol start="3"><li>Main.rockLayer，世界上更深的洞穴和下面的坐标被认为是“洞穴”；</li></ol></li><li><ol start="4"><li>Main.maxTilesY - 200，或Underworld层，此时往下意味着你​​在Underworld；</li></ol></li><li><ol start="5"><li>最后是 Main.maxTilesY，世界的底部。</li></ol></li></ul><p>使用这些的任意组合可以确保您的给定结构或生物群系或任何可能的东西可以仅在特定区域内生成，例如仅在黑社会中或仅在地表下。明智地使用这些。</p><p>至于 X 坐标，它有点模棱两可，只有四个主要值（我用过）——</p><ul><li><ol><li>0，世界的最左边</li></ol></li><li><ol start="2"><li>Main.maxTilesX / 2，世界中心；</li></ol></li><li><ol start="3"><li>Main.maxTilesX，世界的最右边；</li></ol></li><li><ol start="4"><li>最后是 Main.dungeonX。该值可以位于世界中心的左侧或右侧，这样您就可以知道雪地和丛林生物群系的位置。如果 Main.dungeonX 小于 Main.maxTilesX / 2，则雪地生物群系和地牢在 spawn 的左侧。否则，它们在生成的右侧。请注意，如果在地牢生成步骤之前使用地牢X，则可能不会设置。</li></ol></li></ul><p>这也使您通常可以猜测地点和生物群落的位置。<br>值得注意的是变量 WorldGen.UndergroundDesertLocation，一个 Rectangle。这通过 WorldGen.UndergroundDesertLocation.Location 存储地下沙漠的左上角，并通过 WorldGen.UndergroundDesertLocation.Size() 存储大小。这在灾难的沉没之海或星光河的玻璃沙漠生物群系等情况下很有用。</p><h1 id="生成阶段续"><a href="#生成阶段续" class="headerlink" title="生成阶段续"></a>生成阶段续</h1><p>现在通过自己。<br>GenPass 再次成为泰拉瑞亚处理世界生成的方式。它按顺序运行GenPass by GenPass，逐步构建世界。这些通行证与整个地牢一样大，或与早期世界中添加的沙子一样小。重要的是您要如何对其进行分区。</p><p>老实说，GenPass 本身最终成为最简单易用的东西之一。<br>在 ModifyWorldGenTasks 方法下，如图所示，</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">void</span> <span class="token function">ModifyWorldGenTasks</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>GenPass<span class="token operator">></span> tasks<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">float</span> totalWeight<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您只需将您的方法甚至代码直接添加到新任务中，如下所示，</p><pre class="line-numbers language-csharp"><code class="language-csharp">tasks<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PassLegacy</span><span class="token punctuation">(</span><span class="token string">"My Custom Generation"</span><span class="token punctuation">,</span> MyGenCode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您需要做的就是创建一个名为 MyGenCode 的方法，并带有 GenerationProgress 参数，例如，</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MyGenCode</span><span class="token punctuation">(</span>GenerationProgress p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，在大多数情况下，您不希望将您的 gen 传递给任务列表。<br>通常，您希望将您的通行证插入某个特定位置，如前言的“生成顺序”小节中所述。例如，</p><pre class="line-numbers language-csharp"><code class="language-csharp">            <span class="token keyword">int</span> shiniesIndex <span class="token operator">=</span> tasks<span class="token punctuation">.</span><span class="token function">FindIndex</span><span class="token punctuation">(</span>genpass <span class="token operator">=</span><span class="token operator">></span> genpass<span class="token punctuation">.</span>Name<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token string">"Shinies"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>shiniesIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                tasks<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>shiniesIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PassLegacy</span><span class="token punctuation">(</span><span class="token string">"MyGenPass"</span><span class="token punctuation">,</span> MyGenPass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这将在 Shinies 步骤之后插入您的一代，这是最常用于放置矿石的步骤。<br>同样，您可以在<a href="https://github.com/tModLoader/tModLoader/wiki/Vanilla-World-Generation-Steps" target="_blank" rel="noopener">此处</a>找到所有香草通行证的名称。</p><p>您可以根据需要将您的 worldgen 组织成尽可能多（或尽可能少）的 genpass，但是，我建议您尝试将它们保持在您认为合适的不同步骤中。特别是对于可能放置在不同位置且重叠不同的不同生物群系，有时您希望将一个生物群系或结构放置在与您可能添加的另一个生物群系相比不同的位置。只要确保您始终了解您的生物群落的位置和时间，您就应该做得很好。</p><h1 id="箱子"><a href="#箱子" class="headerlink" title="箱子"></a>箱子</h1><p>箱子自然是设计生物群落或结构并填充内容的非常重要的部分。</p><p>在 worldgen 期间（甚至在游戏期间）填充箱子非常简单：</p><pre class="line-numbers language-csharp"><code class="language-csharp">WorldGen<span class="token punctuation">.</span><span class="token function">PlaceChest</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> type<span class="token punctuation">,</span> notNearOtherChests<span class="token punctuation">,</span> style<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PlaceChest 是 worldgen 期间使用的一种方法，它可以放置一个箱子。如果箱子放置成功，它还会返回 Main.chest 中与 tile 关联的 Chest 对象的索引。如果没有成功放置，它只返回-1。<br>所以，我们可以这样做：</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">int</span> ChestIndex <span class="token operator">=</span> WorldGen<span class="token punctuation">.</span><span class="token function">PlaceChest</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">ushort</span><span class="token punctuation">)</span>type<span class="token punctuation">,</span> <span class="token keyword">false</span><span class="token punctuation">,</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ChestIndex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查，当我们放下一个箱子时，它是否成功。<br>然后，在 if 语句中，我们可以这样做：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Main<span class="token punctuation">.</span>chest<span class="token punctuation">[</span>ChestIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">SetDefaults</span><span class="token punctuation">(</span>ItemID<span class="token punctuation">.</span>Bananarang<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会将您放置的箱子中的第一个物品设置为一个香蕉郎。 如果要增加数量，只需执行以下操作：</p><pre class="line-numbers language-csharp"><code class="language-csharp">Main<span class="token punctuation">.</span>chest<span class="token punctuation">[</span>ChestIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>boom，你有20 个香蕉郎。<br>对箱子及其库存的进一步操作只需要一些逻辑和思考，因此大约对本节进行了四舍五入。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> tModLoader </tag>
            
            <tag> terraria </tag>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++ addons</title>
      <link href="/blog/nodejs-addons/"/>
      <url>/blog/nodejs-addons/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nodejs.org/docs/latest-v15.x/api/addons.html" target="_blank" rel="noopener">Nodejs v15 c++ addons</a></p><h1 id="C-Addons-插件"><a href="#C-Addons-插件" class="headerlink" title="C++ Addons(插件)"></a>C++ Addons(插件)</h1><p>插件是由 C++ 编写的动态链接共享对象。 require() 可以将插件加载为普通的 Node.js 模块。插件提供了 Js 和 C/C++ 库之间的接口。</p><p>实现插件有 3 种选择: Node-API, nan, 或者直接使用内部 V8、libuv 和 Node.js 库。除非要访问 Node-API 未暴露出的功能，否则请使用 Node-API。 有关 Node-API 更多信息请参考 <a href="https://nodejs.org/docs/latest-v15.x/api/n-api.html" target="_blank" rel="noopener">Node-API 的 C/C++ 插件</a>。</p><p>不使用 Node-API 时，实现插件很复杂，涉及到几个组件和 API 的知识：</p><ul><li>V8：Node.js 用于提供 JavaScript 实现的 C++ 库。 V8 提供了创建对象、调用函数等的机制。V8 的 API 主要记录在 v8.h 头文件（Node.js 源代码树中的 deps/v8/include/v8.h）中，该文件也可以<a href="https://v8docs.nodesource.com/" target="_blank" rel="noopener">在线</a>获得。</li><li><a href="https://github.com/libuv/libuv" target="_blank" rel="noopener">libuv</a>: 实现 Node.js 事件循环、工作线程和平台的所有异步行为的 C 库。它还用作跨平台抽象库，为所有主要操作系统提供简单的、类似 POSIX 的访问，以访问许多常见的系统任务，例如与文件系统、套接字、计时器和系统事件交互。 libuv 还为需要超越标准事件循环的更复杂的异步插件提供类似于 POSIX 线程的线程抽象。插件作者应避免使用 I/O 或其他时间密集型任务阻塞事件循环，方法是通过 libuv 将工作卸载到非阻塞系统操作、工作线程或自定义使用 libuv 线程。</li><li>内部 Node.js 库。 Node.js 本身导出了插件可以使用的 C++ API，其中最重要的是 node::ObjectWrap 类。</li><li>Node.js 包括其他静态链接库，包括 OpenSSL。这些其他库位于 Node.js 源代码树的 <code>deps/</code> 目录中。只有 libuv、OpenSSL、V8 和 zlib 符号被 Node.js 有目的地重新导出，并且可以被插件在不同程度上使用。有关更多信息，请参阅<a href="https://nodejs.org/docs/latest-v15.x/api/addons.html#addons_linking_to_libraries_included_with_node_js" target="_blank" rel="noopener">链接到包含在 Node.js 中的库</a>。</li></ul><p>以下所有示例均可<a href="https://github.com/nodejs/node-addon-examples" target="_blank" rel="noopener">下载</a>，并可用作插件的起点。</p><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h2><p>这个“Hello world”示例是一个简单的插件，用 C++ 编写，相当于以下 JavaScript 代码：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>hello <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"world"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先，创建文件 hello.cc：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// hello.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>      isolate<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Initialize</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> Method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Initialize<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有 Node.js 插件都必须按照以下模式导出初始化函数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">Initialize</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Initialize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>NODE_MODULE 后没有分号，因为它不是函数（参见 node.h）。</p><p>module_name 必须与最终二进制文件的文件名匹配（不包括 .node 后缀）。</p><p>那么，在 hello.cc 示例中，初始化函数为 Initialize，插件模块名称为 addon。</p><p>当使用 node-gyp 构建插件时，使用宏 NODE_GYP_MODULE_NAME 作为 NODE_MODULE() 的第一个参数将确保最终二进制文件的名称将传递给 NODE_MODULE()。</p><h3 id="上下文感知插件"><a href="#上下文感知插件" class="headerlink" title="上下文感知插件"></a>上下文感知插件</h3><p>在某些环境中，可能需要在多个上下文中多次加载 Node.js 插件。例如，Electron 运行时在单个进程中运行多个 Node.js 实例。每个实例都有自己的 require() 缓存，因此每个实例在通过 require() 加载时都需要一个 Native 插件才能正常运行。这意味着插件必须支持多个初始化。</p><p>可以使用宏 NODE_MODULE_INITIALIZER 构建上下文感知插件，该宏扩展为 Node.js 在加载插件时期望找到的函数的名称。因此，可以像以下示例一样初始化插件：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">using</span> <span class="token keyword">namespace</span> v8<span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token string">"C"</span> NODE_MODULE_EXPORT <span class="token keyword">void</span><span class="token function">NODE_MODULE_INITIALIZER</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">,</span>                        Local<span class="token operator">&lt;</span>Value<span class="token operator">></span> module<span class="token punctuation">,</span>                        Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* Perform addon initialization steps here. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种选择是使用宏 NODE_MODULE_INIT()，它还将构建一个上下文感知插件。与 NODE_MODULE() 不同，NODE_MODULE() 用于围绕给定的插件初始化函数构造插件，NODE_MODULE_INIT() 用作此类初始化程序的声明，后跟函数体。</p><p>在调用 NODE_MODULE_INIT() 之后，可以在函数体内使用以下三个变量：</p><ul><li><code>Local&lt;Object&gt; exports</code></li><li><code>Local&lt;Value&gt; module</code></li><li><code>Local&lt;Context&gt; context</code></li></ul><p>构建上下文感知插件的选择带有仔细管理全局静态数据的责任。由于插件可能会被多次加载，甚至可能来自不同的线程，因此存储在插件中的任何全局静态数据都必须得到适当的保护，并且不得包含对 JavaScript 对象的任何持久引用。这样做的原因是 JavaScript 对象仅在一个上下文中有效，并且当从错误的上下文或从与创建它们的线程不同的线程访问时，可能会导致崩溃。</p><p>通过执行以下步骤，可以构建上下文感知插件以避免全局静态数据：</p><ul><li>定义一个类，该类将保存每个插件实例的数据并具有表单的静态成员</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DeleteInstance</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Cast `data` to an instance of the class and delete it.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>在插件初始化器中堆分配此类的一个实例。这可以使用 new 关键字来完成。</li><li>调用 node::AddEnvironmentCleanupHook()，将上面创建的实例和指向 DeleteInstance() 的指针传递给它。这将确保在环境被拆除时删除实例。</li><li>将类的实例存储在 v8::External 中，并且</li><li>将 v8::External 传递给所有暴露给 JavaScript 的方法，方法是将其传递给 v8::FunctionTemplate::New() 或 v8::Function::New() 以创建 Native 支持的 JavaScript 函数。 v8::FunctionTemplate::New() 或 v8::Function::New() 的第三个参数接受 v8::External 并使用 v8::FunctionCallbackInfo::Data() 方法使其在Native 回调中可用。</li></ul><p>这将确保每个插件实例的数据到达每个可以从 JavaScript 调用的绑定。每个插件实例的数据也必须传递到插件可能创建的任何异步回调中。</p><p>以下示例说明了上下文感知插件的实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> v8<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AddonData</span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">explicit</span> <span class="token function">AddonData</span><span class="token punctuation">(</span>Isolate<span class="token operator">*</span> isolate<span class="token punctuation">)</span><span class="token operator">:</span>      <span class="token function">call_count</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 确保在环境清理时删除每个插件实例的数据。</span>    node<span class="token operator">::</span><span class="token function">AddEnvironmentCleanupHook</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> DeleteInstance<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 每个插件数据。</span>  <span class="token keyword">int</span> call_count<span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">DeleteInstance</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">delete</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>AddonData<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Method</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> info<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 检索每个插件实例的数据。</span>  AddonData<span class="token operator">*</span> data <span class="token operator">=</span>      <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span>AddonData<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>As<span class="token operator">&lt;</span>External<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  data<span class="token operator">-</span><span class="token operator">></span>call_count<span class="token operator">++</span><span class="token punctuation">;</span>  info<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>data<span class="token operator">-</span><span class="token operator">></span>call_count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将此插件初始化为上下文感知。</span><span class="token function">NODE_MODULE_INIT</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* exports, module, context */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> context<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 为这个插件实例创建一个新的 `AddonData` 实例，并将其生命周期与 Node.js 环境的生命周期联系起来</span>  AddonData<span class="token operator">*</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AddonData</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将数据包装在 `v8::External` 中，以便我们可以将其传递给我们公开的方法</span>  Local<span class="token operator">&lt;</span>External<span class="token operator">></span> external <span class="token operator">=</span> External<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 将 `Method` 方法暴露给 JavaScript，并通过将 `external` </span>  <span class="token comment" spellcheck="true">// 作为第三个参数传递给 `FunctionTemplate` 构造函数</span>  <span class="token comment" spellcheck="true">// 来确保它接收我们在上面创建的每个插件实例的数据。</span>  exports<span class="token operator">-</span><span class="token operator">></span><span class="token function">Set</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>               String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> <span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>               FunctionTemplate<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> Method<span class="token punctuation">,</span> external<span class="token punctuation">)</span>                  <span class="token operator">-</span><span class="token operator">></span><span class="token function">GetFunction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromJust</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="支持-Worker"><a href="#支持-Worker" class="headerlink" title="支持 Worker"></a>支持 Worker</h3><p>History</p><table><thead><tr><th>Version</th><th>Changes</th></tr></thead><tbody><tr><td>v14.8.0,v12.19.0</td><td>清理 hooks 现在可能是异步的。</td></tr></tbody></table><p>为了从多个 Node.js 环境（例如主线程和工作线程）加载，插件需要：</p><ul><li>成为 Node-API 插件</li><li>如上所述使用 NODE_MODULE_INIT() 声明为上下文感知</li></ul><p>为了支持 <a href="https://nodejs.org/docs/latest-v15.x/api/worker_threads.html#worker_threads_class_worker" target="_blank" rel="noopener">Worker</a> 线程，插件需要在存在此类线程时清理它们可能分配的任何资源。这可以通过使用 AddEnvironmentCleanupHook() 函数来实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">AddEnvironmentCleanupHook</span><span class="token punctuation">(</span>v8<span class="token operator">::</span>Isolate<span class="token operator">*</span> isolate<span class="token punctuation">,</span>                               <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>fun<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">,</span>                               <span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个函数添加了一个 hook，它将在给定的 Node.js 实例关闭之前运行。如有必要，可以使用具有相同签名的 RemoveEnvironmentCleanupHook() 在运行此类 hook 之前将其删除。回调按后进先出的顺序运行。</p><p>如有必要，还有一对 AddEnvironmentCleanupHook() 和 RemoveEnvironmentCleanupHook() 重载，其中清理 hook 采用回调函数。这可用于关闭异步资源，例如插件注册的任何 libuv 句柄。</p><p>以下 addon.cc 使用 AddEnvironmentCleanupHook：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">using</span> node<span class="token operator">::</span>AddEnvironmentCleanupHook<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>HandleScope<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 注意：在实际应用中，不要依赖静态/全局数据。</span><span class="token keyword">static</span> <span class="token keyword">char</span> cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"yum yum"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> cleanup_cb1_called <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> cleanup_cb2_called <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cleanup_cb1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Isolate<span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  HandleScope <span class="token function">scope</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> obj <span class="token operator">=</span> Object<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// assert VM is still alive</span>  <span class="token function">assert</span><span class="token punctuation">(</span>obj<span class="token operator">-</span><span class="token operator">></span><span class="token function">IsObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cleanup_cb1_called<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">cleanup_cb2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">assert</span><span class="token punctuation">(</span>arg <span class="token operator">==</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cleanup_cb2_called<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sanity_check</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">assert</span><span class="token punctuation">(</span>cleanup_cb1_called <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span><span class="token punctuation">(</span>cleanup_cb2_called <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 将此插件初始化为上下文感知。</span><span class="token function">NODE_MODULE_INIT</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* exports, module, context */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> context<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">AddEnvironmentCleanupHook</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> sanity_check<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">AddEnvironmentCleanupHook</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> cleanup_cb2<span class="token punctuation">,</span> cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">AddEnvironmentCleanupHook</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> cleanup_cb1<span class="token punctuation">,</span> isolate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过运行在 JavaScript 中进行测试：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// test.js</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>编写源代码后，必须将其编译到二进制 addon.node 文件中。为此，请在项目的顶层创建一个名为 binding.gyp 的文件，该文件使用类似 JSON 的格式描述模块的构建配置。该文件由 node-gyp 使用，这是一个专门为编译 Node.js 插件而编写的工具。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">{</span>  <span class="token string">"targets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"target_name"</span><span class="token operator">:</span> <span class="token string">"addon"</span><span class="token punctuation">,</span>      <span class="token string">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"hello.cc"</span> <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>node-gyp 实用程序的一个版本作为 npm 的一部分与 Node.js 捆绑和分发。此版本不直接供开发人员使用，仅用于支持使用 npm install 命令编译和安装插件的能力。希望直接使用 node-gyp 的开发人员可以使用命令 npm install -g node-gyp 安装它。有关更多信息，包括特定于平台的要求，请参阅 <a href="https://github.com/nodejs/node-gyp#installation" target="_blank" rel="noopener">node-gyp 安装说明</a>。</p><p>创建 binding.gyp 文件后，使用 node-gyp configure 为当前平台生成适当的项目构建文件。这将在 build/ 目录中生成 Makefile（在 Unix 平台上）或 vcxproj 文件（在 Windows 上）。</p><p>接下来，调用 node-gyp build 命令来生成编译好的 addon.node 文件。这将被放入 <code>build/Release/</code> 目录中。</p><p>当使用 npm install 安装 Node.js 插件时，npm 使用它自己的 node-gyp 捆绑版本来执行同样的一组操作，根据需要为用户的平台生成插件的编译版本。</p><p>构建完成后，可以通过将 require() 指向构建的 addon.node 模块，在 Node.js 中使用二进制插件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// hello.js</span><span class="token keyword">const</span> addon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addon<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 'world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为编译后的插件二进制文件的确切路径可能会因编译方式而异（即有时它可能位于 <code>./build/Debug/</code> 中），所以插件可以使用 <a href="https://github.com/TooTallNate/node-bindings" target="_blank" rel="noopener">bindings</a> 包来加载编译后的模块。</p><p>虽然 bindings 包实现在如何定位插件模块方面更加复杂，但它本质上是使用类似于以下的 try…catch 模式：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon.node'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Debug/addon.node'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链接到-Node-js-中包含的库"><a href="#链接到-Node-js-中包含的库" class="headerlink" title="链接到 Node.js 中包含的库"></a>链接到 Node.js 中包含的库</h3><p>Node.js 使用静态链接库，例如 V8、libuv 和 OpenSSL。所有插件都需要链接到 V8，也可以链接到任何其他依赖项。通常，这就像包含适当的#include &lt;…&gt; 语句（例如#include &lt;v8.h&gt;）一样简单，node-gyp 将自动定位适当的标头。但是，有一些注意事项需要注意：</p><ul><li>当 node-gyp 运行时，它将检测 Node.js 的特定发行版本并下载完整的源代码压缩包或仅下载标头。如果下载了完整的源代码，插件将拥有对全套 Node.js 依赖项的完全访问权限。但是，如果仅下载 Node.js 标头，则只有 Node.js 导出的符号可用。</li><li>node-gyp 可以使用指向本地 Node.js 源图像的 –nodedir 标志运行。使用此选项，插件将有权访问完整的依赖项集。</li></ul><h3 id="使用-require-加载插件"><a href="#使用-require-加载插件" class="headerlink" title="使用 require() 加载插件"></a>使用 require() 加载插件</h3><p>已编译插件二进制文件的文件扩展名为 .node（与 .dll 或 .so 相对）。编写 require() 函数以查找具有 .node 文件扩展名的文件并将其初始化为动态链接库。</p><p>调用 <a href="https://nodejs.org/docs/latest-v15.x/api/modules.html#modules_require_id" target="_blank" rel="noopener">require()</a> 时，通常可以省略 .node 扩展名，Node.js 仍然会找到并初始化插件。然而，需要注意的是，Node.js 将首先尝试定位和加载碰巧共享相同基本名称的模块或 JavaScript 文件。例如，如果在与二进制 addon.node 相同的目录中有一个文件 addon.js，则 <a href="https://nodejs.org/docs/latest-v15.x/api/modules.html#modules_require_id" target="_blank" rel="noopener">require(‘addon’)</a> 将优先加载 addon.js 文件并加载它。</p><h3 id="Node-js-的-Native-抽象"><a href="#Node-js-的-Native-抽象" class="headerlink" title="Node.js 的 Native 抽象"></a>Node.js 的 Native 抽象</h3><p>本文档中说明的每个示例都直接使用 Node.js 和 V8 API 来实现插件。 V8 API 可以并且已经从一个 V8 版本到下一个版本（以及一个主要的 Node.js 版本到下一个版本）发生了巨大变化。随着每次更改，插件可能需要更新和重新编译才能继续运行。 Node.js 发布计划旨在最大限度地减少此类更改的频率和影响，但 Node.js 几乎无法确保 V8 API 的稳定性。</p><p><a href="https://github.com/nodejs/nan" target="_blank" rel="noopener">Node.js 的 Native Abstractions</a>（或 nan） 提供了一组工具，建议插件开发人员使用这些工具来保持 V8 和 Node.js 过去和未来版本之间的兼容性。有关如何使用它的说明，请参阅 <a href="https://github.com/nodejs/nan/tree/HEAD/examples/" target="_blank" rel="noopener">nan 示例</a>。</p><h2 id="Node-API"><a href="#Node-API" class="headerlink" title="Node-API"></a>Node-API</h2><p>Node-API 是用于构建 Native 插件的 API。它独立于底层 JavaScript 运行时（例如 V8），并作为 Node.js 本身的一部分进行维护。此 API 将是跨 Node.js 版本稳定的应用程序二进制接口 (ABI)。它旨在将插件与底层 JavaScript 引擎中的更改隔离开来，并允许为一个版本编译的模块在更高版本的 Node.js 上运行而无需重新编译。插件使用本文档中概述的相同方法/工具（node-gyp 等）构建/打包。唯一的区别是Native 代码使用的 API 集。不使用 Node.js API 的 V8 或 <a href="https://github.com/nodejs/nan" target="_blank" rel="noopener">Native Abstractions</a>，而是使用 Node-API 中可用的函数。</p><p>创建和维护一个受益于 Node-API 提供的 ABI 稳定性的插件会带来某些<a href="https://nodejs.org/docs/latest-v15.x/api/n-api.html#n_api_implications_of_abi_stability" target="_blank" rel="noopener">实现方面的考虑</a>。</p><p>要在上面的“Hello world”示例中使用 Node-API，请将 hello.cc 的内容替换为以下内容。所有其他指令保持不变。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// hello.cc using Node-API</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node_api.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span>napi_value <span class="token function">Method</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_callback_info args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  napi_value greeting<span class="token punctuation">;</span>  napi_status status<span class="token punctuation">;</span>  status <span class="token operator">=</span> <span class="token function">napi_create_string_utf8</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">,</span> NAPI_AUTO_LENGTH<span class="token punctuation">,</span> <span class="token operator">&amp;</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> greeting<span class="token punctuation">;</span><span class="token punctuation">}</span>napi_value <span class="token function">init</span><span class="token punctuation">(</span>napi_env env<span class="token punctuation">,</span> napi_value exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>  napi_status status<span class="token punctuation">;</span>  napi_value fn<span class="token punctuation">;</span>  status <span class="token operator">=</span> <span class="token function">napi_create_function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Method<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  status <span class="token operator">=</span> <span class="token function">napi_set_named_property</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> napi_ok<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> exports<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NAPI_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可用的功能以及如何使用它们都记录在带有 <a href="https://nodejs.org/docs/latest-v15.x/api/n-api.html" target="_blank" rel="noopener">Node-API 的 C/C++ 插件</a>中。</p><h2 id="插件示例"><a href="#插件示例" class="headerlink" title="插件示例"></a>插件示例</h2><p>以下是一些旨在帮助开发人员入门的示例插件。这些示例使用 V8 API。有关各种 V8 调用的帮助，请参阅在线 V8 参考，并参阅 V8 的嵌入器指南，以了解使用的几个概念，例如句柄、作用域、函数模板等。</p><p>这些示例中的每一个都使用以下 binding.gyp 文件：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"target_name"</span><span class="token operator">:</span> <span class="token string">"addon"</span><span class="token punctuation">,</span>      <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"addon.cc"</span> <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有多个 .cc 文件，只需将附加文件名添加到源数组：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"addon.cc"</span><span class="token punctuation">,</span> <span class="token string">"myexample.cc"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一旦 binding.gyp 文件准备好，就可以使用 node-gyp 配置和构建示例插件：</p><pre class="line-numbers language-shell"><code class="language-shell">$ node-gyp configure build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>插件通常会暴露可以从 Node.js 中运行的 JavaScript 访问的对象和函数。当从 JavaScript 调用函数时，输入参数和返回值必须映射到 C/C++ 代码和从 C/C++ 代码映射。</p><p>以下示例说明了如何读取从 JavaScript 传递的函数参数以及如何返回结果：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Exception<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Number<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This is the implementation of the "add" method</span><span class="token comment" spellcheck="true">// Input arguments are passed using the</span><span class="token comment" spellcheck="true">// const FunctionCallbackInfo&lt;Value>&amp; args struct</span><span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Check the number of arguments passed.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">Length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Throw an Error that is passed back to JavaScript</span>    isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">ThrowException</span><span class="token punctuation">(</span>Exception<span class="token operator">::</span><span class="token function">TypeError</span><span class="token punctuation">(</span>        String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span>                            <span class="token string">"Wrong number of arguments"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Check the argument types</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">IsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">ThrowException</span><span class="token punctuation">(</span>Exception<span class="token operator">::</span><span class="token function">TypeError</span><span class="token punctuation">(</span>        String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span>                            <span class="token string">"Wrong arguments"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Perform the operation</span>  <span class="token keyword">double</span> value <span class="token operator">=</span>      args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>As<span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>As<span class="token operator">&lt;</span>Number<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Number<span class="token operator">></span> num <span class="token operator">=</span> Number<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Set the return value (using the passed in</span>  <span class="token comment" spellcheck="true">// FunctionCallbackInfo&lt;Value>&amp;)</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译后，可以在 Node.js 中需要和使用示例插件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test.js</span><span class="token keyword">const</span> addon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'This should be eight:'</span><span class="token punctuation">,</span> addon<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>插件中的常见做法是将 JavaScript 函数传递给 C++ 函数并从那里执行它们。以下示例说明了如何调用此类回调：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Context<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Function<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Null<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">RunCallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> cb <span class="token operator">=</span> Local<span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token operator">::</span><span class="token function">Cast</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Value<span class="token operator">></span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span>                          <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  cb<span class="token operator">-</span><span class="token operator">></span><span class="token function">Call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token function">Null</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">,</span> Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"exports"</span><span class="token punctuation">,</span> RunCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此示例使用 Init() 的双参数形式，它接收完整的模块对象作为第二个参数。这允许插件使用单个函数完全覆盖导出，而不是将函数添加为导出的属性。</p><p>要对其进行测试，请运行以下 JavaScript：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test.js</span><span class="token keyword">const</span> addon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">addon</span><span class="token punctuation">(</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 'hello world'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，回调函数是同步调用的。</p><h3 id="对象工厂"><a href="#对象工厂" class="headerlink" title="对象工厂"></a>对象工厂</h3><p>插件可以从 C++ 函数中创建和返回新对象，如下例所示。创建一个对象并返回一个属性 msg，该属性与传递给 createObject() 的字符串相呼应：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Context<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> obj <span class="token operator">=</span> Object<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token operator">-</span><span class="token operator">></span><span class="token function">Set</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>           String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span>                               <span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                               args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ToString</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">.</span><span class="token function">FromJust</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">,</span> Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"exports"</span><span class="token punctuation">,</span> CreateObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 JavaScript 中测试它：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test.js</span><span class="token keyword">const</span> addon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token function">addon</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">addon</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>msg<span class="token punctuation">,</span> obj2<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数工厂"><a href="#函数工厂" class="headerlink" title="函数工厂"></a>函数工厂</h3><p>另一个常见的场景是创建包装 C++ 函数并将其返回给 JavaScript 的 JavaScript 函数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Context<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Function<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionTemplate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>      isolate<span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">CreateFunction</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>FunctionTemplate<span class="token operator">></span> tpl <span class="token operator">=</span> FunctionTemplate<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> MyFunction<span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> fn <span class="token operator">=</span> tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetFunction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// omit this to make it anonymous</span>  fn<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetName</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>      isolate<span class="token punctuation">,</span> <span class="token string">"theFunction"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">,</span> Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"exports"</span><span class="token punctuation">,</span> CreateFunction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> Init<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去测试：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test.js</span><span class="token keyword">const</span> addon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">addon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="包装-C-对象"><a href="#包装-C-对象" class="headerlink" title="包装 C++ 对象"></a>包装 C++ 对象</h3><p>也可以以允许使用 JavaScript new 运算符创建新实例的方式包装 C++ 对象/类：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myobject.h"</span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">InitAll</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> InitAll<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，在 myobject.h 中，包装类继承自 node::ObjectWrap：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// myobject.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYOBJECT_H</span><span class="token macro property">#<span class="token directive keyword">define</span> MYOBJECT_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node_object_wrap.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token operator">:</span> <span class="token keyword">public</span> node<span class="token operator">::</span>ObjectWrap <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span>v8<span class="token operator">::</span>Local<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Object<span class="token operator">></span> exports<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">explicit</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token keyword">double</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PlusOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> value_<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 myobject.cc 中，实现要公开的各种方法。下面，通过将 plusOne() 方法添加到构造函数的原型中来公开该方法：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// myobject.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myobject.h"</span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Context<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Function<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionTemplate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Number<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>ObjectTemplate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span>MyObject<span class="token operator">::</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value_</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>MyObject<span class="token operator">::</span><span class="token operator">~</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> exports<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>ObjectTemplate<span class="token operator">></span> addon_data_tpl <span class="token operator">=</span> ObjectTemplate<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>  addon_data_tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetInternalFieldCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1 field for the MyObject::New()</span>  Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> addon_data <span class="token operator">=</span>      addon_data_tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Prepare constructor template</span>  Local<span class="token operator">&lt;</span>FunctionTemplate<span class="token operator">></span> tpl <span class="token operator">=</span> FunctionTemplate<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> New<span class="token punctuation">,</span> addon_data<span class="token punctuation">)</span><span class="token punctuation">;</span>  tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetClassName</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> <span class="token string">"MyObject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">InstanceTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetInternalFieldCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Prototype</span>  <span class="token function">NODE_SET_PROTOTYPE_METHOD</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> <span class="token string">"plusOne"</span><span class="token punctuation">,</span> PlusOne<span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> constructor <span class="token operator">=</span> tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetFunction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  addon_data<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetInternalField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>  exports<span class="token operator">-</span><span class="token operator">></span><span class="token function">Set</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>      isolate<span class="token punctuation">,</span> <span class="token string">"MyObject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      constructor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromJust</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">IsConstructCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Invoked as constructor: `new MyObject(...)`</span>    <span class="token keyword">double</span> value <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">IsUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token number">0</span> <span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">NumberValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromMaybe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyObject<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token operator">-</span><span class="token operator">></span><span class="token function">Wrap</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Invoked as plain function `MyObject(...)`, turn into construct call.</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Value<span class="token operator">></span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> cons <span class="token operator">=</span>        args<span class="token punctuation">.</span><span class="token function">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>As<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetInternalField</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>As<span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> result <span class="token operator">=</span>        cons<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">PlusOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MyObject<span class="token operator">*</span> obj <span class="token operator">=</span> ObjectWrap<span class="token operator">::</span>Unwrap<span class="token operator">&lt;</span>MyObject<span class="token operator">></span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token operator">-</span><span class="token operator">></span>value_ <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Number<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> obj<span class="token operator">-</span><span class="token operator">></span>value_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要构建此示例，必须将 myobject.cc 文件添加到 binding.gyp：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"target_name"</span><span class="token operator">:</span> <span class="token string">"addon"</span><span class="token punctuation">,</span>      <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"addon.cc"</span><span class="token punctuation">,</span>        <span class="token string">"myobject.cc"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试它：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test.js</span><span class="token keyword">const</span> addon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">addon<span class="token punctuation">.</span>MyObject</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 12</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 13</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>包装对象的析构函数将在对象被垃圾回收时运行。对于析构函数测试，可以使用命令行标志来强制进行垃圾回收。这些标志由底层 V8 JavaScript 引擎提供。它们可能随时更改或删除。 Node.js 或 V8 没有记录它们，并且它们不应该在测试之外使用。</p><h3 id="对象包装工厂"><a href="#对象包装工厂" class="headerlink" title="对象包装工厂"></a>对象包装工厂</h3><p>或者，可以使用工厂模式来避免使用 JavaScript new 运算符显式创建对象实例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> addon<span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// instead of:</span><span class="token comment" spellcheck="true">// const obj = new addon.Object();</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先，createObject() 方法在 addon.cc 中实现：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myobject.h"</span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MyObject<span class="token operator">::</span><span class="token function">NewInstance</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InitAll</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">,</span> Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>exports<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> <span class="token string">"exports"</span><span class="token punctuation">,</span> CreateObject<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> InitAll<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 myobject.h 中，添加了静态方法 NewInstance() 来处理实例化对象。这个方法代替了在 JavaScript 中使用 new：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// myobject.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYOBJECT_H</span><span class="token macro property">#<span class="token directive keyword">define</span> MYOBJECT_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node_object_wrap.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token operator">:</span> <span class="token keyword">public</span> node<span class="token operator">::</span>ObjectWrap <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span>v8<span class="token operator">::</span>Isolate<span class="token operator">*</span> isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">NewInstance</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">explicit</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token keyword">double</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">PlusOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> v8<span class="token operator">::</span>Global<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Function<span class="token operator">></span> constructor<span class="token punctuation">;</span>  <span class="token keyword">double</span> value_<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>myobject.cc 中的实现与前面的示例类似：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// myobject.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myobject.h"</span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> node<span class="token operator">::</span>AddEnvironmentCleanupHook<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Context<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Function<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionTemplate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Global<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Number<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Warning! This is not thread-safe, this addon cannot be used for worker</span><span class="token comment" spellcheck="true">// threads.</span>Global<span class="token operator">&lt;</span>Function<span class="token operator">></span> MyObject<span class="token operator">::</span>constructor<span class="token punctuation">;</span>MyObject<span class="token operator">::</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value_</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>MyObject<span class="token operator">::</span><span class="token operator">~</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>Isolate<span class="token operator">*</span> isolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Prepare constructor template</span>  Local<span class="token operator">&lt;</span>FunctionTemplate<span class="token operator">></span> tpl <span class="token operator">=</span> FunctionTemplate<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> New<span class="token punctuation">)</span><span class="token punctuation">;</span>  tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetClassName</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> <span class="token string">"MyObject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">InstanceTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetInternalFieldCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Prototype</span>  <span class="token function">NODE_SET_PROTOTYPE_METHOD</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> <span class="token string">"plusOne"</span><span class="token punctuation">,</span> PlusOne<span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  constructor<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetFunction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">AddEnvironmentCleanupHook</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">IsConstructCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Invoked as constructor: `new MyObject(...)`</span>    <span class="token keyword">double</span> value <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">IsUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token number">0</span> <span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">NumberValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromMaybe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyObject<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token operator">-</span><span class="token operator">></span><span class="token function">Wrap</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Invoked as plain function `MyObject(...)`, turn into construct call.</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Value<span class="token operator">></span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> cons <span class="token operator">=</span> Local<span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> instance <span class="token operator">=</span>        cons<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">NewInstance</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Value<span class="token operator">></span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> cons <span class="token operator">=</span> Local<span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> instance <span class="token operator">=</span>      cons<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">PlusOne</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MyObject<span class="token operator">*</span> obj <span class="token operator">=</span> ObjectWrap<span class="token operator">::</span>Unwrap<span class="token operator">&lt;</span>MyObject<span class="token operator">></span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  obj<span class="token operator">-</span><span class="token operator">></span>value_ <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Number<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> obj<span class="token operator">-</span><span class="token operator">></span>value_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，要构建这个示例，必须将 myobject.cc 文件添加到 binding.gyp：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"target_name"</span><span class="token operator">:</span> <span class="token string">"addon"</span><span class="token punctuation">,</span>      <span class="token property">"sources"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"addon.cc"</span><span class="token punctuation">,</span>        <span class="token string">"myobject.cc"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试它：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test.js</span><span class="token keyword">const</span> createObject <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 12</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 13</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 21</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 22</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">plusOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 23</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="传递包装对象"><a href="#传递包装对象" class="headerlink" title="传递包装对象"></a>传递包装对象</h3><p>除了包装和返回 C++ 对象之外，还可以通过使用 Node.js 辅助函数 node::ObjectWrap::Unwrap 来展开包装的对象来传递它们。以下示例显示了一个函数 add()，它可以将两个 MyObject 对象作为输入参数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// addon.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node_object_wrap.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myobject.h"</span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Context<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Number<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">CreateObject</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MyObject<span class="token operator">::</span><span class="token function">NewInstance</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MyObject<span class="token operator">*</span> obj1 <span class="token operator">=</span> node<span class="token operator">::</span>ObjectWrap<span class="token operator">::</span>Unwrap<span class="token operator">&lt;</span>MyObject<span class="token operator">></span><span class="token punctuation">(</span>      args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ToObject</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  MyObject<span class="token operator">*</span> obj2 <span class="token operator">=</span> node<span class="token operator">::</span>ObjectWrap<span class="token operator">::</span>Unwrap<span class="token operator">&lt;</span>MyObject<span class="token operator">></span><span class="token punctuation">(</span>      args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ToObject</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> sum <span class="token operator">=</span> obj1<span class="token operator">-</span><span class="token operator">></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> obj2<span class="token operator">-</span><span class="token operator">></span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>Number<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">InitAll</span><span class="token punctuation">(</span>Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>  MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>exports<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"createObject"</span><span class="token punctuation">,</span> CreateObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">NODE_SET_METHOD</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">,</span> Add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">NODE_MODULE</span><span class="token punctuation">(</span>NODE_GYP_MODULE_NAME<span class="token punctuation">,</span> InitAll<span class="token punctuation">)</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 myobject.h 中，添加了一个新的公共方法以允许在展开对象后访问私有值。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// myobject.h</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYOBJECT_H</span><span class="token macro property">#<span class="token directive keyword">define</span> MYOBJECT_H</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node_object_wrap.h></span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">class</span> <span class="token class-name">MyObject</span> <span class="token operator">:</span> <span class="token keyword">public</span> node<span class="token operator">::</span>ObjectWrap <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Init</span><span class="token punctuation">(</span>v8<span class="token operator">::</span>Isolate<span class="token operator">*</span> isolate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">NewInstance</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">inline</span> <span class="token keyword">double</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> value_<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">explicit</span> <span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token keyword">double</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">~</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">static</span> v8<span class="token operator">::</span>Global<span class="token operator">&lt;</span>v8<span class="token operator">::</span>Function<span class="token operator">></span> constructor<span class="token punctuation">;</span>  <span class="token keyword">double</span> value_<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>myobject.cc 的实现与之前类似：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// myobject.cc</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;node.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myobject.h"</span></span><span class="token keyword">namespace</span> demo <span class="token punctuation">{</span><span class="token keyword">using</span> node<span class="token operator">::</span>AddEnvironmentCleanupHook<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Context<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Function<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionCallbackInfo<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>FunctionTemplate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Global<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Isolate<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Local<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Object<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>String<span class="token punctuation">;</span><span class="token keyword">using</span> v8<span class="token operator">::</span>Value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Warning! This is not thread-safe, this addon cannot be used for worker</span><span class="token comment" spellcheck="true">// threads.</span>Global<span class="token operator">&lt;</span>Function<span class="token operator">></span> MyObject<span class="token operator">::</span>constructor<span class="token punctuation">;</span>MyObject<span class="token operator">::</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">value_</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>MyObject<span class="token operator">::</span><span class="token operator">~</span><span class="token function">MyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">Init</span><span class="token punctuation">(</span>Isolate<span class="token operator">*</span> isolate<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Prepare constructor template</span>  Local<span class="token operator">&lt;</span>FunctionTemplate<span class="token operator">></span> tpl <span class="token operator">=</span> FunctionTemplate<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> New<span class="token punctuation">)</span><span class="token punctuation">;</span>  tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetClassName</span><span class="token punctuation">(</span>String<span class="token operator">::</span><span class="token function">NewFromUtf8</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> <span class="token string">"MyObject"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">InstanceTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetInternalFieldCount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  constructor<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> tpl<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetFunction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">AddEnvironmentCleanupHook</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    constructor<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">IsConstructCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Invoked as constructor: `new MyObject(...)`</span>    <span class="token keyword">double</span> value <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">IsUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>        <span class="token number">0</span> <span class="token operator">:</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">NumberValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FromMaybe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MyObject<span class="token operator">*</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MyObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    obj<span class="token operator">-</span><span class="token operator">></span><span class="token function">Wrap</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">This</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Invoked as plain function `MyObject(...)`, turn into construct call.</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Value<span class="token operator">></span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> cons <span class="token operator">=</span> Local<span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>    Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> instance <span class="token operator">=</span>        cons<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> MyObject<span class="token operator">::</span><span class="token function">NewInstance</span><span class="token punctuation">(</span><span class="token keyword">const</span> FunctionCallbackInfo<span class="token operator">&lt;</span>Value<span class="token operator">></span><span class="token operator">&amp;</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Isolate<span class="token operator">*</span> isolate <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">GetIsolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> argc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Value<span class="token operator">></span> argv<span class="token punctuation">[</span>argc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Function<span class="token operator">></span> cons <span class="token operator">=</span> Local<span class="token operator">&lt;</span>Function<span class="token operator">></span><span class="token operator">::</span><span class="token function">New</span><span class="token punctuation">(</span>isolate<span class="token punctuation">,</span> constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Context<span class="token operator">></span> context <span class="token operator">=</span> isolate<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Local<span class="token operator">&lt;</span>Object<span class="token operator">></span> instance <span class="token operator">=</span>      cons<span class="token operator">-</span><span class="token operator">></span><span class="token function">NewInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLocalChecked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  args<span class="token punctuation">.</span><span class="token function">GetReturnValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// namespace demo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试它：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// test.js</span><span class="token keyword">const</span> addon <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./build/Release/addon'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj1 <span class="token operator">=</span> addon<span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> addon<span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> addon<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Prints: 30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> nodejs </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PayPal 网站支付专业版托管解决方案集成指南 (7)</title>
      <link href="/blog/paypal-pro-integration-guide-7/"/>
      <url>/blog/paypal-pro-integration-guide-7/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.paypalobjects.com/webstatic/en_AU/developer/docs/pdf/hostedsolution_au.pdf#page=61&zoom=100,84,126" target="_blank" rel="noopener">原文</a></p><h1 id="订单处理"><a href="#订单处理" class="headerlink" title="订单处理"></a>订单处理</h1><p>本章将带领您体验终端订单处理的经验。它包括在执行订单之前验证订单状态和真<br>实性的信息。</p><h2 id="验证交易状态和真实性"><a href="#验证交易状态和真实性" class="headerlink" title="验证交易状态和真实性"></a>验证交易状态和真实性</h2><p>当买方成功完成交易时，他们将被重定向到 PayPal 确认页面或者您在返回变量中指定的网站，或者在 Profile 部分的 Settings 页面(如第 15 页“ Simple Hosted Solution Integration”中概述的)。当浏览器被重定向到你指定的网站时，一个交易 ID 被附加到它上面。</p><p>注意: 为了确保交易 ID 被追加到返回的 URL，登录到您的 PayPal 商户帐户并选择 Profile。在 Profile 页面的 Website Payments Standard and Express Checkout 部分，选择 Preferences 并验证 Auto Return 是否设置为 On。<br>在同一个设置页面上，也确认 Payment Data Transfer 设置为 On。</p><p>当您收到重定向(带有交易 ID 的 URL)时，您必须在将订单发送给买家之前验证订单是否在 PayPal 上成功完成。你可以通过检查 PayPal 发送给你的确认邮件或者验证交易历史来做到这一点。你也可以使用以下方法之一:</p><h3 id="验证即时付款通知-IPN"><a href="#验证即时付款通知-IPN" class="headerlink" title="验证即时付款通知 (IPN)"></a>验证即时付款通知 (IPN)</h3><p>IPN 允许你通过异步、服务器到服务器的通信从 PayPal 接收有关交易支付和活动的消息。这允许你整合你的在线支付和你的订单执行过程。</p><p>通过 IPN，您会收到以下消息：</p><ul><li>付款及其状态(待定、完成或拒绝)</li><li>欺诈管理过滤行为</li><li>定期付款活动</li><li>授权，退款，纠纷，撤销和退款。</li></ul><p>处理完交易后，PayPal 将使用参数 notify_url 或在您的 PayPal 个人资料中向您在交易中指定的通知 URL 发送 IPN。您必须验证在 IPN 中发送的交易 ID、交易金额和其他订单特定参数（例如发票 ID）与您在订单处理系统中的信息匹配。有关更多详细信息，请参阅即时付款通知 (IPN) 集成指南。</p><h3 id="执行-GetTransactionDetails-API-调用"><a href="#执行-GetTransactionDetails-API-调用" class="headerlink" title="执行 GetTransactionDetails API 调用"></a>执行 GetTransactionDetails API 调用</h3><p>使用 GetTransactionDetails API，您可以获得有关特定交易的信息。</p><p>如果您集成了 PayPal api，您可以使用 web 重定向中返回的交易 ID 调用<br>GetTransactionDetails 来验证订单的真实性。</p><p>有关详细信息，请参阅第 ”GetTransactionDetails API“</p><h2 id="履行订单"><a href="#履行订单" class="headerlink" title="履行订单"></a>履行订单</h2><p>在您验证了付款金额和状态的真实性之后，您可以通过将货物运送给买方来履行订单。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> PayPal </tag>
            
            <tag> Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PayPal 网站支付专业版托管解决方案集成指南 (6)</title>
      <link href="/blog/paypal-pro-integration-guide-6/"/>
      <url>/blog/paypal-pro-integration-guide-6/</url>
      
        <content type="html"><![CDATA[<h1 id="在沙盒中测试您的集成"><a href="#在沙盒中测试您的集成" class="headerlink" title="在沙盒中测试您的集成"></a>在沙盒中测试您的集成</h1><p>PayPal 沙盒是一个独立的环境，你可以在其中原型和测试 PayPal 功能。PayPal Sandbox 是 PayPal 网站的一个几乎完全相同的拷贝。It 的目的是为开发人员提供一个用于测试和集成的屏蔽环境，并帮助避免在现场测试 PayPal 集成解决方案时可能出现的问题。在将任何基于 PayPal 的应用程序投入生产之前，您应该在 Sandbox 中测试该应用程序，以确保它按照您的意愿运行，并且符合 PayPal 开发者协议规定的准则和标准。</p><p>有关使用 PayPal Sandbox 的完整细节，请参阅 Sandbox 用户指南。</p><h2 id="沙盒帐户凭证"><a href="#沙盒帐户凭证" class="headerlink" title="沙盒帐户凭证"></a>沙盒帐户凭证</h2><h3 id="为您想要测试的国家创建一个-PayPal-沙盒企业帐户"><a href="#为您想要测试的国家创建一个-PayPal-沙盒企业帐户" class="headerlink" title="为您想要测试的国家创建一个 PayPal 沙盒企业帐户"></a>为您想要测试的国家创建一个 PayPal 沙盒企业帐户</h3><ul><li>登录 PayPal 开发者站点: <a href="https://developer.PayPal.com/。你可以使用现有的" target="_blank" rel="noopener">https://developer.PayPal.com/。你可以使用现有的</a> PayPal 账户凭证登录或者注册一个新账户。</li><li>导航到 Applications &gt; Sandbox 帐户并单击 create account 按钮。</li><li>使用 Country 下拉列表选择您想要测试集成的国家。</li><li>将银行验证帐户设置为 Yes。</li><li>完成表单的其余部分，然后点击 Create Account。</li></ul><blockquote><p>注意: 您可以使用任何名称的帐户，没有必要勾选登录与 PayPal 框。</p></blockquote><h3 id="验证你的-PayPal-Sandbox-企业账户"><a href="#验证你的-PayPal-Sandbox-企业账户" class="headerlink" title="验证你的 PayPal Sandbox 企业账户"></a>验证你的 PayPal Sandbox 企业账户</h3><ul><li>使用最近创建的 PayPal Sandbox 业务帐户的电子邮件地址和密码登录 Sandbox 测试站<br>点(<a href="https://www.Sandbox.PayPal.com)。" target="_blank" rel="noopener">https://www.Sandbox.PayPal.com)。</a></li><li>点击“我的帐户概述”页上的“Unverified”链接。</li><li>单击“获得验证并提升发送限制”页上的“添加银行帐户”。</li><li>用虚构的信息填充所有字段。<blockquote><p>注意: 排序代码和帐号必须是唯一的号码。</p></blockquote></li><li>单击 Continue，然后添加 Bank Account 以添加测试银行帐户。</li><li>导航到“设置银行资金”页，然后单击“继续”。</li><li>点击 Submit 完成验证过程。</li></ul><h3 id="升级为-Pro-帐户"><a href="#升级为-Pro-帐户" class="headerlink" title="升级为 Pro 帐户"></a>升级为 Pro 帐户</h3><p>单击 Sandbox 企业帐户电子邮件地址旁边的箭头，然后单击出现在电子邮件地址下面 的 Profile 链接(下面突出显示)。</p><p>这将打开 Sandbox 帐户详细信息窗口。从这个窗口的 Profile 选项卡，选择 Upgrade to Pro。然后点击启用按钮。</p><h3 id="设置个人沙盒帐户"><a href="#设置个人沙盒帐户" class="headerlink" title="设置个人沙盒帐户"></a>设置个人沙盒帐户</h3><p>从开发人员站点 Applications &gt; Sandbox 帐户页面，您可以创建多个企业(商家)<br>和个人(买家)帐户，您可以在 Sandbox 测试交易中使用这些帐户。更多信息请参 见 Sandbox 用户指南。</p><p>你已经准备好在 Sandbox 测试站点上测试你的托管解决方案集成。</p><h2 id="测试集成和设置"><a href="#测试集成和设置" class="headerlink" title="测试集成和设置"></a>测试集成和设置</h2><p>下面的部分包含测试集成的信息，以及在 Sandbox 环境中修改支付页面的外观和感觉的信息。</p><ul><li>测试您的集成</li><li>测试你的设置</li></ul><h3 id="测试您的集成"><a href="#测试您的集成" class="headerlink" title="测试您的集成"></a>测试您的集成</h3><p>要在 Sandbox 环境中测试集成，请按照第 15 页“简单托管解决方案集成”中指定的步<br>骤操作。为了测试目的，你必须在表单 POST 中做以下更改:</p><ul><li><ol><li>将 URL 更改为指向 Sandbox 环境:<br>From:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cmd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_hosted-payment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>to:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.sandbox.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cmd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_hosted-payment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol start="2"><li>将业务值更改为在 Sandbox 测试站点的 Profile 页面顶部指定的 Secure Merchant ID 值。<br>因此，用作测试用途的表格 POST 将是:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.sandbox.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cmd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_hosted-payment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>business<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HNZ3QZMCPBAAA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paymentaction<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sale<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://yourwebsite.com/receipt_page.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>METHOD<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Pay Now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="测试您的设置"><a href="#测试您的设置" class="headerlink" title="测试您的设置"></a>测试您的设置</h3><p>要更改付款页面的外观，请修改自定义设置和沙盒测试站点的配置文件部分中的设置页面。有关完整的详细信息，请参阅“修改您的 PayPal 帐户设置”。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> PayPal </tag>
            
            <tag> Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PayPal 网站支付专业版托管解决方案集成指南 (4)</title>
      <link href="/blog/paypal-pro-integration-guide-4/"/>
      <url>/blog/paypal-pro-integration-guide-4/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.paypalobjects.com/webstatic/en_AU/developer/docs/pdf/hostedsolution_au.pdf#page=41&zoom=100,84,126" target="_blank" rel="noopener">原文</a></p><h1 id="集成-iframe-到站点中"><a href="#集成-iframe-到站点中" class="headerlink" title="集成 iframe 到站点中"></a>集成 iframe 到站点中</h1><p>PayPal 提供了一种紧凑的付款方式，可以集成到您网站上的 iFrame 中。由于此表单已集成在您的网站上，因此买家永远不会离开您的网站，因此减少潜在的流失。你也可以在 紧凑的支付表单周围的主框架中保持你的结账外观和感觉。信用卡字段是紧凑型支付表单的一部分，所以你不必单独收集这些信息。</p><blockquote><p>重要提示: 由于涉及到 iFrame 的安全问题，以下浏览器被支持并安全使用—— internet explorer 7.0、8.0 和 9.0、 Firefox 24、 Chrome 30、 Safari 4.x 和 5.x。涉及其他浏览器用户的交易不应该使用 iFrame 流或放弃交易。此外，除了 iFrame 流之外还有另一个风险——如果 PayPal iFrame 成为攻击源，那么攻击似乎来自商家网站; 如果你希望避免这个额外的风险，就不要使用 iFrame 流。</p></blockquote><blockquote><p>注意: 由于欺骗关注，表单不包含任何 PayPal 品牌。</p></blockquote><p>如果你想集成 iFrame，你必须使用 MiniLayout 模板。你可以从你的 PayPal 账户的自定义页面中选择 MiniLayout。或者你可以在交易时传递 HTML 变量 Template = TemplateD。 本章的例子使用后面的 HTML 变量方法来设置 MiniLayout 模板。</p><p>对于 MiniLayout，当从移动浏览器查看支付页面时，PayPal 不会自动显示移动优化的支付流程。原因是，如果 PayPal 自动显示一个移动优化嵌入式模板在一个商业网页，可能不是移动优化，这可能会产生意想不到的和不受欢迎的结果。为了显示一个移动优化流程，在交易时间在模板 HTML 变量中传递 mobile 或 mobile-iframe。</p><p>MiniLayout 模板(紧凑型支付表单)包含以下字段:</p><ul><li>信用卡号码</li><li>过期日期</li><li>Cvv2 号码(如果适用，根据卡的类型)</li><li>其他卡类型所需的任何额外字段，如 Maestro 或 Switch 的开始日期和发行号码。</li></ul><p>此模板还提供以下选项:</p><ul><li>移除 PayPal 支付按钮。虽然表单默认提供了使用 PayPal 账户支付的选项，但是你可以联系你的账户经理或客户支持来关闭这个选项。</li><li>手动自定义 paynow 按钮的颜色。</li></ul><p>重要提示: 这个简洁的付款表单不显示买家的账单地址，即使 showBillingAddress = true 被传递。然而，对于一些商家来说，可能需要传递账单地址来成功处理交易。</p><h2 id="集成-iFrame"><a href="#集成-iFrame" class="headerlink" title="集成 iFrame"></a>集成 iFrame</h2><p>选择以下方法之一，将紧凑型支付形式集成到您的网站中:</p><ul><li>手动集成</li><li>API 集成</li></ul><p>重要提示: 为了获得最佳性能，PayPal 建议您先加载 iFrame 资源，然后再加载其他资源，如图像和 javascript。如果在你加载 iFrame 的时候，你的支付页面上有太多的资源在运行，那么对 iFrame 的请求可能不会被放置或者延迟。这可能会导致买家看到一个空白的 iFrame。</p><h3 id="手动集成"><a href="#手动集成" class="headerlink" title="手动集成"></a>手动集成</h3><p>若要在网站中手动整合紧凑型付款表格，请执行以下步骤:</p><ul><li><ol><li>在您希望紧凑支付表单出现在您的网站上的位置输入 iFrame 标记。例如:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>540px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>紧凑型支付表单的允许大小为 570 像素宽度到 540 像素高度。</li></ol></li><li><ol start="2"><li>以下是 iFrame 代码，添加用适当的 Hosted Solution 变量(包括要支付的总金额)填充的 隐藏表单，并指定变量 TemplateD。例如,<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form_iframe<span class="token punctuation">"</span></span><span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cmd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_hosted-payment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>business<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HNZ3QZMCPBAAA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paymentaction<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sale<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://yourwebsite.com/receipt_page.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意: 如果 iFrame 交易失败，请传递账单地址。有关 HTML 变量表的更多信息，请参见付款页面设置的 HTML 变量。</p></blockquote></li></ol></li><li><ol start="3"><li>确保目标名称与 iFrame 名称匹配，如下例所示:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>540px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form_iframe<span class="token punctuation">"</span></span><span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol start="4"><li>使用 JavaScript 提交表单。例如:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span>form_iframe<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>手动集成的例子<br>按照以上步骤完成的示例如下:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>540px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span>none</span><span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form_iframe<span class="token punctuation">"</span></span><span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cmd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_hosted-payment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>business<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HNZ3QZMCPBAAA<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paymentaction<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sale<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>template<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>templateD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://yourwebsite.com/receipt_page.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span>form_iframe<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="API-集成"><a href="#API-集成" class="headerlink" title="API 集成"></a>API 集成</h3><p>要使用 API 在网站中集成紧凑的支付表单, 参考”将 Button Manager API 与托管解决方案结帐一起使用“<br>注意: 使用 template = templateD 来指定集成类型。</p><p>启动托管解决方案付款流程的响应中有两个选项：</p><ul><li>使用在响应中返回的 URL</li><li>使用表单 POST</li></ul><h4 id="使用在响应中返回的-URL"><a href="#使用在响应中返回的-URL" class="headerlink" title="使用在响应中返回的 URL"></a>使用在响应中返回的 URL</h4><p>在响应中标识为 EMAILLINK 的 URL 中，按照下面的示例为 iFrame 添加“src”， 以重定向买方并启动支付流。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/...?hosted_button_id<span class="token punctuation">=</span>HSSS-..<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>540px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>紧凑型支付表格的允许大小为 570 像素宽度至 540 像素高度。</p><blockquote><p>重要提示: Safari 浏览器不支持此选项。使用下面描述的 Form POST 选项。</p></blockquote><h4 id="使用表单-POST"><a href="#使用表单-POST" class="headerlink" title="使用表单 POST"></a>使用表单 POST</h4><p>确定响应中的 WEBSITECODE，并使用该代码在评论页面上创建一个 Pay Now 按钮。 当你的买家点击这个按钮时，他们会被重定向到 PayPal 托管的支付页面。和 URL 一样，这个按钮可以使用大约两个小时，或者直到付款成功</p><ul><li><ol><li>在您希望紧凑支付表单出现在您的网站上的位置输入 iFrame 标记。例如:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>540px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>紧凑型支付表单的允许大小为 570 像素宽度到 540 像素高度。</li></ol></li><li><ol start="2"><li>在 iFrame 标签中插入以下内容:<pre class="line-numbers language-html"><code class="language-html">WEBSITECODE=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hosted_button_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HSSSGDrPDzuW-ADwkFDMjQmpUK1gTDdR.tv5alaGS6l.XWVVB1MTMQEnGNoLakufQb89zTjf6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.paypal.com/i/btn/btn_paynow_LG.gif<span class="token punctuation">"</span></span><span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PayPal - The safer, easier way to payonline.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.paypal.com/i/scr/pixel.gif<span class="token punctuation">"</span></span><span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li><li><ol start="3"><li>使用 JavaScript 提交表单。例如:<pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span>form_iframe<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>API (form post)集成示例<br>按照以上步骤完成的示例如下:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hss_iframe<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570px<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>540px<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>WEBSITECODE=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hosted_button_id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HSSSGDrPDzuW-ADwkFDMjQmpUK1gTDdR.tv5alaGS6l.XWVVB1MTMQEnGNoLakufQb89zTjf6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.paypal.com/i/btn/btn_paynow_LG.gif<span class="token punctuation">"</span></span><span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PayPal - The safer, easier way to payonline.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.paypal.com/i/scr/pixel.gif<span class="token punctuation">"</span></span><span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">document<span class="token punctuation">.</span>form_iframe<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> PayPal </tag>
            
            <tag> Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PayPal 网站支付专业版托管解决方案集成指南 (2)</title>
      <link href="/blog/paypal-pro-integration-guide-2/"/>
      <url>/blog/paypal-pro-integration-guide-2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.paypalobjects.com/webstatic/en_AU/developer/docs/pdf/hostedsolution_au.pdf#page=22&zoom=100,84,126" target="_blank" rel="noopener">原文</a></p><h1 id="Chapter-2-使用-HTML-集成到你的站点"><a href="#Chapter-2-使用-HTML-集成到你的站点" class="headerlink" title="Chapter 2 使用 HTML 集成到你的站点"></a>Chapter 2 使用 HTML 集成到你的站点</h1><p>本章提供了有关集成的说明，使您能够开始使用托管方案处理交易。</p><blockquote><p>注意: PayPal 建议你实现最简单的集成，以便在实现更加定制化的集成之前熟悉托管方案</p></blockquote><p>作为简单集成的一部分，您可以在支付页面上获得默认设置。为了定制页面的外观和感觉，使其与你的网站相匹配，你可以执行下列操作之一：</p><ul><li>在 PayPal.com 的个人资料部分更改你的设置</li><li>在付款页面添加适当的 HTML 变量</li></ul><blockquote><p>重要: HTML 变量将覆盖你保存在个人资料页面上的设置</p></blockquote><h2 id="简单托管方案集成"><a href="#简单托管方案集成" class="headerlink" title="简单托管方案集成"></a>简单托管方案集成</h2><p>要将托管方案集成到你的网站，在您的网站结账流程中确定一点，您希望放置一个按钮，买方点击启动付款。这个按钮应该被标记为”继续支付“，”支付“或者类似的按钮，当点击这个按钮时，应该执行一个发送到 PayPal 的表单。点击这个按钮可以将购买者的浏览器重定向到 PayPal 支付页面，在那里他们可以用信用卡或者他们的 PayPal 账号支付。</p><p>Form POST 包含一组描述交易的 HTML 变量。在 Form POST 中，你必须指定以下内容：</p><ul><li>subtotal: 交易金额</li><li>business: 安全商户 ID(在个人资料页面找到)或电子邮件地址与您的 PayPal 账号</li><li>paymentaction: 表明交易是为了最终销售的支付，还是最终销售的授权（稍后会被捕获）</li></ul><p>默认货币是美元。此外，你可以在[付款页面设置的 HTML 变量]中指定适当的 HTML 变量，以指定在付款页面收集的资料。或者在[付款页面外观和感觉的 HTML 变量]，以指定该页面的外观和感受。如果支付成功，那么买家要么看到 PayPal 确认页面，要么被重定向到你在配置中指定的 URL。</p><p>返回的 URL 在支付页面返回到您的网站的过程中，会在查询字符串上附加一个交易 ID。这个交易 ID 可以用来检索交易的状态和验证交易的真实性。有关在执行订单之前验证交易真实性的详细信息，请参阅第 7 章”订单处理“</p><h2 id="示例集成"><a href="#示例集成" class="headerlink" title="示例集成"></a>示例集成</h2><p>下面是一个简单的托管解决方案集成的例子：</p><ol><li>示例托管解决方案表单 POST</li></ol><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span>  <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://securepayments.paypal.com/webapps/HostedSoleSolutionApp/webflow/sparta/hostedSoleSolutionProcess<span class="token punctuation">"</span></span>  <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cmd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_hosted-payment<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>subtotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[50]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>business<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[HNZ3QZMCPBAAA]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>paymentaction<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[sale]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>    <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span>    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return<span class="token punctuation">"</span></span>    <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[https://yourwebsite.com/receipt_page.html]<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>METHOD<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[Pay]<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[xx]是相应的变量的值。建议你用引号括起这些值。有关这些值的详细信息，请参考”支付页面设置的 HTML 变量”。</p><ol start="2"><li>输出 HTML 文本到您的网站上，买家将继续与他们结账</li><li>打开你的结账页面，测试按钮，以确保它打开 PayPal 页面<br>您还可以使用 PayPal 沙箱环境来测试您的集成。关于在 PayPal Sandbox 环境中测试集成的完整信息，参阅第六章”在 Sandbox 中测试你的集成”</li></ol><h2 id="支付页面设置的-HTML-变量"><a href="#支付页面设置的-HTML-变量" class="headerlink" title="支付页面设置的 HTML 变量"></a>支付页面设置的 HTML 变量</h2><p>下面的表格列出了托管解决方案的 HTML 变量，你可以使用它们来发送额外的交易信息以及你的 web 请求。有关可用于自定义支付页面外观和感觉的 HTML 变量列表，请参阅”支付页面外观和感觉的 HTML 变量“</p><blockquote><p>注意: 传递的值不能包含任何这些特殊字符(){}&lt;&gt;”;</p></blockquote><blockquote><p>注意: 一些商家需要在每笔交易中传递账单信息。建议您首先测试您的集成，特别是如果您计划使用 iFrame,以确定是否需要计费信息字段</p></blockquote><p>表 2.1 付款页面设置的 HTML 变量</p><table><thead><tr><th>变量</th><th>描述</th><th>必要条件</th></tr></thead><tbody><tr><td>address1</td><td>送货地址的接到名称(2 个字段中的 1)</td><td>No</td></tr><tr><td>address2</td><td>送货地址的接到名称(2 个字段中的 1)</td><td>No</td></tr><tr><td>address_override</td><td>付款人显示传递地址，但无法编辑。如果地址中出现错误时这个变量会覆盖。允许 true/false，默认是 false</td><td>No</td></tr><tr><td>billing_address1</td><td>账单地址的街道名称。(2 个字段中的 1)</td><td>No</td></tr><tr><td>billing_address1</td><td>账单地址的街道名称。(2 个字段中的 2)</td><td>No</td></tr><tr><td>billing_city</td><td>账单地址的城市名称</td><td>可选</td></tr><tr><td>billing_country</td><td>账单地址的国家代码</td><td>可选</td></tr><tr><td>billing_first_name</td><td>收款人第一个名</td><td>可选</td></tr><tr><td>billing_last_name</td><td>收款人的姓</td><td>可选</td></tr><tr><td>billing_state</td><td>账单地址的状态名称</td><td>可选</td></tr><tr><td>billing_zip</td><td>账单地址的邮政编码</td><td>可选</td></tr><tr><td>bn</td><td>识别构建按钮代码的源代码。格式-<Company>_<Service>_<Product>_<Country></td><td>No</td></tr><tr><td>business</td><td>您 PayPal 账户电子邮件地址或您的 PayPal ID(安全商户ID)与您的 PayPal 关联，建议使用 PayPal 账号，可以在个人资料页面的顶部找到在 PayPal.com上</td><td>Yes</td></tr><tr><td>buyer_email</td><td>买方的电子邮件地址</td><td>No</td></tr><tr><td>cancel_return</td><td>浏览器将被重定向到这个 URL， 如果卖家点击返回商户链接，确保填写完整的 URL，包括协议头</td><td>No</td></tr><tr><td>cbt</td><td>在 PayPal 确认页面设置”Return to Merchant”链接的文本。对于企业账户，文本显示您企业的名称，默认显示”Merchant”</td><td>No</td></tr><tr><td>city</td><td>运输地址城市名称</td><td>No</td></tr><tr><td>country</td><td>运输地址国家名称</td><td>No</td></tr><tr><td>currency_code</td><td>支付的货币。默认是美元</td><td>No</td></tr><tr><td>custom</td><td>传递从未呈现给付款人的变量。</td><td>No</td></tr><tr><td>first_name</td><td>货物被运送到的人的名字</td><td>No</td></tr><tr><td>handling</td><td>已收手续费。数额加在总金额上</td><td>No</td></tr><tr><td>invoice</td><td>商家订货/发票系统中的订单编号</td><td>No</td></tr><tr><td>last_name</td><td>货物被运送到的人的姓</td><td>No</td></tr><tr><td>lc</td><td>登录或注册页面的显示语言，可能值为 AU</td><td>No</td></tr><tr><td>night_phone_a</td><td>美国电话号码或国家的区号。美国境外电话号码的代码。填充买家的家庭电话号码。</td><td>No</td></tr><tr><td>night_phone_b</td><td>美国电话号码的三位数字前缀，或全部非美国电话号码以外的号码,不包括国家代码。这将预先填充买家家庭电话号码。注意: 对于非美国数字使用此变量。</td><td>No</td></tr><tr><td>night_phone_c</td><td>美国电话号码的四位数电话号码。这个预填充买家的家庭电话号码。</td><td>No</td></tr><tr><td>notify_url</td><td>PayPal 发布有关即时支付通知书形式的交易，确保输入完整的 URL，包括协议头</td><td>No</td></tr><tr><td>paymentaction</td><td>指示交易是否用于在最终销售或最终销售的授权(延迟捕获). - 允许值: 授权或销售 - 默认值: 销售</td><td>Yes</td></tr><tr><td>return</td><td>购买者在付款完成后，浏览器被重定向到的 URL，输入完整的 URL</td><td>No</td></tr><tr><td>shipping</td><td>已付运费。这个数额加在总金额。</td><td>No</td></tr><tr><td>state</td><td>装运地址状态。</td><td>No</td></tr><tr><td>subtotal</td><td>交易所收取的金额。如果运输，装卸,和税款没有指定，这是总额收费。</td><td>Yes</td></tr><tr><td>tax</td><td>已征收的税款。这个数额加在总金额</td><td>No</td></tr><tr><td>zip</td><td>送货地址的邮政编码。</td><td>No</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> PayPal </tag>
            
            <tag> Guide </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cannot Find Module &#39;XXX.scss&#39; or Its Corresponding Type Declarations</title>
      <link href="/blog/cannot-find-module-scss/"/>
      <url>/blog/cannot-find-module-scss/</url>
      
        <content type="html"><![CDATA[<p><a href="https://linuxize.com/post/linux-nohup-command/" target="_blank" rel="noopener">原文</a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 Typescript + Webpack + Sass 项目中使用 CSS Module 时，可以正常使用 CSS 模块，但是 vscode 总是提示找不到 module’XXX.scss’ 或其对应的类型声明。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><ul><li>首先确保 webpack 和 sass 已经能够识别 CSS Module，请参考 webpack 官网配置。<br><a href="https://webpack.js.org/loaders/css-loader/#separating-interoperable-css-only-and-css-module-features" target="_blank" rel="noopener">Separating Interoperable CSS-only and CSS Module features</a></li><li>配置 d.ts<br>重要的部分来了，要注意两个d.ts文件的配置<ul><li>主文件 index.d.ts</li></ul></li></ul><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">module</span><span class="token string">'*.scss'</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">}</span>    <span class="token keyword">export</span> <span class="token operator">=</span> content<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将另一个typings.d.ts文件添加到同级目录</li></ul><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">declare</span> <span class="token keyword">module</span><span class="token string">'*.scss'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样配置后，我的问题就解决了，VSCODE和Node命令行界面都不会报错，可以正常匹配。</p><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>网上推荐的解决方案是把d.ts文件写在css文件的同级目录下，一般使用插件自动完成</p><p>选择以下插件之一</p><ul><li>webpack 插件 <a href="typings-for-css-modules-loader">typings-for-css-modules-loader</a></li><li>webpacl 插件 <a href="https://github.com/seek-oss/css-modules-typescript-loader#readme" target="_blank" rel="noopener">css-modules-typescript-loader</a></li><li>可能的插件，Typescript插件<a href="https://github.com/mrmckeb/typescript-plugin-css-modules#visual-studio-code" target="_blank" rel="noopener">typescript-plugin-css-modules</a>（我用过没效果）</li></ul><p>通常安装插件自动生成每个 css 声明文件后不会报错，但是有两个缺点，一是项目文件太多，二是路径别名还是不能被 VSCODE 识别（Node 命令行正常），这两个 d.ts 必须如上配置，防止VSCODE提示错误。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>一些可能的 scss 文件声明</li></ul><pre class="line-numbers language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">//example one</span><span class="token keyword">declare</span> <span class="token keyword">module</span><span class="token string">'*.scss'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//example two</span><span class="token keyword">declare</span> <span class="token keyword">module</span><span class="token string">'*.scss'</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//example three</span><span class="token keyword">declare</span> <span class="token keyword">module</span><span class="token string">'*.scss'</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content<span class="token punctuation">:</span> Record<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> content<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//example four</span><span class="token keyword">declare</span> <span class="token keyword">module</span><span class="token string">'*.scss'</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> content<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">}</span>    <span class="token keyword">export</span> <span class="token operator">=</span> content<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其他答案 <a href="https://stackoverflow.com/questions/40382842/cant-import-css-scss-modules-typescript-says" target="_blank" rel="noopener">cant-import-css-scss-modules-typescript-says-cannot-find-module</a> </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> scss </tag>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何加速或减速一个视频</title>
      <link href="/blog/how-to-speed-a-video/"/>
      <url>/blog/how-to-speed-a-video/</url>
      
        <content type="html"><![CDATA[<p><a href="http://trac.ffmpeg.org/wiki/How%20to%20speed%20up%20/%20slow%20down%20a%20video" target="_blank" rel="noopener">原文</a></p><h1 id="加速-减速视频"><a href="#加速-减速视频" class="headerlink" title="加速/减速视频"></a>加速/减速视频</h1><p>可以通过更改每个视频帧的呈现时间戳 (PTS) 来更改视频流的速度。这可以通过两种方法完成：使用 setpts 视频过滤器（需要重新编码）或通过将视频导出为原始比特流格式并在创建新时间戳时复用到容器来擦除时间戳。</p><p>请注意，在以下示例中，音频流未更改，因此理想情况下应使用 -an 禁用它。</p><h3 id="原始比特流方法"><a href="#原始比特流方法" class="headerlink" title="原始比特流方法"></a>原始比特流方法</h3><p>这种方法是无损的，除了更改时间戳之外，还可以按原样复制视频流。如果您不需要对输入视频进行其他更改，请使用此选项。</p><p>首先，将视频复制为原始比特流格式。</p><p>对于 H.264：<br><code>ffmpeg -i input.mp4 -map 0:v -c:v copy -bsf:v h264_mp4toannexb raw.h264</code><br>对于 H.265：<br><code>ffmpeg -i input.mp4 -map 0:v -c:v copy -bsf:v hevc_mp4toannexb raw.h265</code><br>然后在复用到容器时生成新的时间戳：<br><code>ffmpeg -fflags +genpts -r 30 -i raw.h264 -c:v copy output.mp4</code><br>将 -r 的值更改为所需的播放帧速率。</p><h3 id="setpts-视频过滤器"><a href="#setpts-视频过滤器" class="headerlink" title="setpts 视频过滤器"></a>setpts 视频过滤器</h3><p>要使用 setpts 过滤器将视频速度加倍，您可以使用：<br><code>ffmpeg -i input.mkv -filter:v &quot;setpts=0.5*PTS&quot; output.mkv</code><br>该过滤器通过更改每个视频帧的呈现时间戳 (PTS) 来工作。例如，如果在时间戳 1 和 2 处连续显示两个帧，并且您想加快视频速度，则这些时间戳需要分别变为 0.5 和 1。因此，我们必须将它们乘以 0.5。</p><p>请注意，此方法将丢帧以达到所需的速度。您可以通过指定比输入更高的输出帧速率来避免丢帧。例如，从 4 FPS 的输入到加速到 4 倍（16 FPS）的输入：<br><code>ffmpeg -i input.mkv -r 16 -filter:v &quot;setpts=0.25*PTS&quot; output.mkv</code><br>要减慢视频速度，您必须使用大于 1 的乘数：<br><code>ffmpeg -i input.mkv -filter:v &quot;setpts=2.0*PTS&quot; output.mkv</code></p><h4 id="平滑"><a href="#平滑" class="headerlink" title="平滑"></a>平滑</h4><p>您可以使用插值视频过滤器平滑慢/快视频。这也称为“运动插值”或“光流”。<br><code>ffmpeg -i input.mkv -filter:v &quot;minterpolate=&#39;mi_mode=mci:mc_mode=aobmc:vsbmc=1:fps=120&#39;&quot; output.mkv</code><br>其他选项包括<a href="https://github.com/slowmoVideo/slowmoVideo/" target="_blank" rel="noopener">​slowmoVideo</a> 和<a href="https://github.com/dthpham/butterflow" target="_blank" rel="noopener">​Butterflow</a>。</p><h3 id="加快-减慢音频"><a href="#加快-减慢音频" class="headerlink" title="加快/减慢音频"></a>加快/减慢音频</h3><p>您可以使用 <a href="http://ffmpeg.org/ffmpeg-all.html#atempo" target="_blank" rel="noopener">​atempo</a> 音频过滤器加快或减慢音频。将音频速度加倍：<br><code>ffmpeg -i input.mkv -filter:a &quot;atempo=2.0&quot; -vn output.mkv</code><br>atempo 过滤器仅限于使用 0.5 到 2.0 之间的值（因此它可以将其减慢到不低于原始速度的一半，并且加速不超过输入的两倍）。如果需要，您可以通过将多个 atempo 过滤器串在一起来绕过此限制。以下是音频速度的四倍：<br><code>ffmpeg -i input.mkv -filter:a &quot;atempo=2.0,atempo=2.0&quot; -vn output.mkv</code><br>使用复杂的过滤器图，您可以同时加速视频和音频：<br><code>ffmpeg -i input.mkv -filter_complex &quot;[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]&quot; -map &quot;[v]&quot; -map &quot;[a]&quot; output.mkv</code><br>使用上面的原始比特流方法示例，不需要复杂的过滤器图。您可以通过以下方式同时减慢 30 fps 的视频和音频：<br><code>ffmpeg -fflags +genpts -r 15 -i raw.h264 -i input.mp4 -map 0:v -c:v copy -map 1:a -af atempo=0.5 -movflags faststart output.mp4</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Nohup 命令</title>
      <link href="/blog/linux-nohup-command/"/>
      <url>/blog/linux-nohup-command/</url>
      
        <content type="html"><![CDATA[<p><a href="https://linuxize.com/post/linux-nohup-command/" target="_blank" rel="noopener">原文</a></p><p>nohup 命令执行另一个指定为其参数的程序并忽略所有 SIGHUP（挂起）信号。 SIGHUP 是在进程的控制终端关闭时发送给进程的信号。</p><p>通常，当您通过 SSH 运行程序时，如果您的连接断开或您注销，会话将终止，并且从终端执行的所有进程都将停止。这就是 nohup 命令派上用场的地方。它忽略所有挂断信号，进程将继续运行。</p><h2 id="如何使用-nohup-命令"><a href="#如何使用-nohup-命令" class="headerlink" title="如何使用 nohup 命令"></a>如何使用 nohup 命令</h2><p>nohup 命令的语法如下：<br><code>nohup COMMAND [ARGS]</code><br>该命令不接受除标准 –help 和 –version 之外的任何其他选项。</p><p>让我们看一下下面的例子：<br><code>nohup mycommand</code><br>Output<br><code>nohup: ignoring input and appending output to &#39;nohup.out&#39;</code><br>nohup 在前台运行 mycommand 命令并将命令输出重定向到 nohup.out 文件。该文件是在<a href="https://linuxize.com/post/current-working-directory/" target="_blank" rel="noopener">当前工作目录</a>中创建的。如果运行该命令的用户对工作目录没有写权限，则在用户的主目录中创建该文件</p><p>如果您注销或关闭终端，该过程不会终止。</p><h3 id="在后台运行命令"><a href="#在后台运行命令" class="headerlink" title="在后台运行命令"></a>在后台运行命令</h3><p>在前台使用 nohup 不是很有用，因为在命令完成之前您将无法与 shell 交互。</p><p>要在<a href="https://linuxize.com/post/how-to-run-linux-commands-in-background/" target="_blank" rel="noopener">后台运行命令</a>，请在命令末尾附加 &amp; 符号：<br><code>nohup mycommand &amp;</code><br>输出包括 shell job ID（用括号括起来）和进程 ID：<br>Output<br><code>[1] 25177</code><br>您可以使用 job ID 使用 fg 命令将命令置于前台。</p><p>如果由于某种原因您想终止进程，请使用 kill 命令后跟进程 ID：<br><code>kill -9 25132</code></p><h3 id="将输出重定向到文件"><a href="#将输出重定向到文件" class="headerlink" title="将输出重定向到文件"></a>将输出重定向到文件</h3><p>默认情况下，nohup 将命令输出重定向到 nohup.out 文件。如果要将输出重定向到不同的文件，请使用标准 shell 重定向。</p><p>例如，要将<a href="https://linuxize.com/post/bash-redirect-stderr-stdout/" target="_blank" rel="noopener">标准输出和标准错误重定向</a>到 mycommand.out，您可以使用：<br><code>nohup mycommand &gt; mycommand.out 2&gt;&amp;1 &amp;</code><br>要将标准输出和标准错误重定向到不同的文件：<br><code>nohup mycommand &gt; mycommand.out 2&gt; mycommand.err &amp;</code></p><h2 id="备择方案"><a href="#备择方案" class="headerlink" title="备择方案"></a>备择方案</h2><p>您可以使用几个替代程序来避免在您关闭终端或断开连接时终止命令。</p><h3 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h3><p><a href="https://linuxize.com/post/how-to-use-linux-screen/" target="_blank" rel="noopener">Screen</a> 或 GNU Screen 是一个终端多路复用器程序，它允许您启动屏幕会话并在该会话中打开任意数量的窗口（虚拟终端）。即使您断开连接，在 Screen 中运行的进程也会在其窗口不可见时继续运行。</p><h3 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h3><p><a href="https://linuxize.com/post/getting-started-with-tmux/" target="_blank" rel="noopener">Tmux</a> 是 GNU 屏幕的现代替代品。使用 Tmux，您还可以创建会话并在该会话中打开多个窗口。 Tmux 会话是持久的，这意味着即使您关闭终端，在 Tmux 中运行的程序也会继续运行。</p><h3 id="Disown"><a href="#Disown" class="headerlink" title="Disown"></a>Disown</h3><p>disown 是一个 shell 内置函数，可以从 shell 的 job 控制中删除一个 shell job。与 nohup 不同，您也可以在正在运行的进程上使用 disown。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>nohup 允许您在注销或退出终端时防止命令被终止。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> Linux </tag>
            
            <tag> terminal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PayPal Payments Pro [2.4]</title>
      <link href="/blog/paypal-payments-pro/"/>
      <url>/blog/paypal-payments-pro/</url>
      
        <content type="html"><![CDATA[<p><a href="https://docs.magento.com/user-guide/payment/paypal-payments-pro.html" target="_blank" rel="noopener">原文</a></p><p><a href="https://developer.paypal.com/docs/paypal-payments-pro/" target="_blank" rel="noopener">PayPal Payments Pro</a> 为您带来商户账户和支付网关的所有好处，以及创建您自己的、完全定制的结账体验的能力。 PayPal 快速结账功能通过 PayPal Payments Pro 自动启用，因此您可以接触超过 1.1 亿活跃的 PayPal 用户。<br><img src="https://docs.magento.com/user-guide/payment/assets/storefront-mini-cart-payments-pro-racer-tank.png" alt="店面的 PayPal Payments Pro"></p><blockquote><p>要求:<br>自 2019 年 9 月 14 日起，欧洲银行可能会拒绝不符合 <a href="https://docs.magento.com/user-guide/stores/compliance-payment-services-directive.html" target="_blank" rel="noopener">PSD2</a> 要求的付款。为遵守 PSD2，PayPal Payments Pro 必须与 Cardinal Commerce 集成。要了解更多信息，请参阅 <a href="https://developer.paypal.com/docs/classic/payflow/3d-secure-overview/" target="_blank" rel="noopener">Payflow 的 3-D 安全</a>。</p></blockquote><blockquote><p>目前，PayPal Payments Pro 可在美国、英国和加拿大使用。</p></blockquote><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li><a href="https://www.paypal.com/webapps/mpp/how-to-sell-online" target="_blank" rel="noopener">PayPal 商家帐户</a>（已激活直接付款）</li></ul><h2 id="结帐工作流程"><a href="#结帐工作流程" class="headerlink" title="结帐工作流程"></a>结帐工作流程</h2><ul><li>顾客去结账<br>客户将产品添加到购物车，然后点击/点击继续结帐。</li><li>客户选择付款方式<br>在结账时，客户选择 PayPal 直接付款选项，并输入信用卡信息。 <ul><li>如果使用 PayPal Payments Pro 付款，客户在结账过程中会留在您的网站上。 </li><li>如果使用 PayPal Express Checkout 付款，客户将被重定向到 PayPal 网站以完成交易。</li></ul></li></ul><p>应客户要求，商店管理员还可以从管理员创建订单并使用 PayPal Payments Pro 处理交易。</p><h2 id="订单处理工作流程"><a href="#订单处理工作流程" class="headerlink" title="订单处理工作流程"></a>订单处理工作流程</h2><ul><li>订单已下<br>订单可以由您商店的管理员或您的 PayPal 商家帐户处理。</li><li>付款动作<br>配置中指定的付款操作将应用于订单。选项包括：<ul><li>授权 - Commerce 创建状态为处理中的销售订单。在这种情况下，要授权的金额有待批准。</li><li>销售 - Commerce 创建销售订单和发票。</li><li>捕获 - PayPal 将订单金额从客户余额、银行账户或信用卡转移到商家账户。</li></ul></li><li>发票<br>PayPal 向 Commerce 发送即时付款通知消息后，会在 Commerce 中创建发票。<br>注意：确保您的 PayPal 商家帐户中启用了即时付款通知。<br>如果需要，可以为指定数量的产品开具部分订单发票。对于提交的每份部分发票，具有唯一 ID 的单独 Capture 事务可用，并生成单独的发票。<br>仅在获得全部订单金额后才会关闭仅授权支付交易。<br>在订单金额全额开具发票之前，可以随时在线取消订单。</li><li>退货<br>如果客户出于任何原因退回购买的产品并要求退款，例如订单金额捕获和发票创建，您可以从管理员或您的 PayPal 商家帐户创建在线退款。</li></ul><h2 id="配置您的-PayPal-账户"><a href="#配置您的-PayPal-账户" class="headerlink" title="配置您的 PayPal 账户"></a>配置您的 PayPal 账户</h2><p>在 Commerce 中设置 PayPal Payments Pro 之前，您必须在 PayPal 网站上配置您的商家帐户。</p><ul><li>登录到您的 <a href="https://manager.paypal.com/" target="_blank" rel="noopener">PayPal 企业帐户</a>。</li><li>在 PayPal 管理器菜单中，选择服务设置</li><li>在托管结帐页面下，单击设置。</li><li>在选择您的设置下，将事务处理模式设置为 Live。</li><li>在支付页面上的显示选项下，设置 Cancel URL 方法设置为 POST。</li><li>在账单信息下，为必填字段和可编辑字段选择卡安全码 CSC 复选框。</li><li>在 Payment Confirmation 下，将 Return URL Method 设置为 POST。</li><li>在安全选项下，配置以下内容：<ul><li>AVS: No</li><li>CSC: No</li><li>Enable Secure Token: Yes</li></ul></li><li>点击保存变更</li><li>在 PayPal Manager 菜单中，选择 Service Settings，然后在 Hosted Checkout Pages 下选择 Customize。</li><li>选中布局 C<br>布局 C 仅显示信用卡和借记卡字段，可以在您的网站上框起来或用作独立的弹出窗口。大小固定为 490 x 565 像素，并有额外的空间用于错误消息。在某些系统上，此设置更正了透明重定向的问题。</li><li>单击保存并发布。</li><li>在 PayPal 管理器菜单中，选择帐户管理。在管理安全性下，单击事务设置。</li><li>将允许参考事务设置为是。</li><li>单击确认。<br>如果您有多个 Commerce 网站，则必须为每个网站创建一个单独的 PayPal Payments Pro 帐户。</li><li>设置其他用户（由 PayPal 推荐）：<ul><li>在主菜单的第二行中，单击管理用户。</li><li>要将其他用户添加到帐户，请单击添加用户。该链接位于“管理用户”标题的正上方。</li><li>填写“添加用户”表单以下部分中的必填字段：<ul><li>管理员确认 </li><li>用户信息 </li><li>用户登录信息 </li><li>为用户分配权限</li></ul></li><li>点击更新</li></ul></li><li>确保退出您的 PayPal 帐户。</li></ul><h2 id="在-Commerce-中设置-PayPal-Payments-Pro"><a href="#在-Commerce-中设置-PayPal-Payments-Pro" class="headerlink" title="在 Commerce 中设置 PayPal Payments Pro"></a>在 Commerce 中设置 PayPal Payments Pro</h2><blockquote><p>您可以同时激活两种 PayPal 解决方案：[PayPal Express Checkout]，以及任何一种[一体化解决方案]。如果您更改支付解决方案，之前使用的支付解决方案将自动禁用。</p></blockquote><blockquote><p>随时单击保存配置以保存您的进度。</p></blockquote><h3 id="第-1-步：开始配置"><a href="#第-1-步：开始配置" class="headerlink" title="第 1 步：开始配置"></a>第 1 步：开始配置</h3><ul><li>在管理侧边栏上，转到商店 &gt; 设置 &gt; 配置。</li><li>在左侧面板中，展开销售并选择付款方式。</li><li>如果您的 Commerce 安装有多个网站、商店或视图，请将商店视图设置为要应用此配置的商店视图。</li><li>在商家位置部分，选择您的商家所在的商家所在国家/地区。 此设置决定了配置中出现的 PayPal 解决方案的选择。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-merchant-location.png" alt="Merchant Country"></li><li>展开 PayPal All-in-One Payment Solution，然后单击为 Payments Pro 配置。<br><img src="https://docs.magento.com/user-guide/payment/assets/paypal-payments-pro.png" alt="Payments Pro - Configure"></li></ul><h3 id="第-2-步：完成所需的-PayPal-设置"><a href="#第-2-步：完成所需的-PayPal-设置" class="headerlink" title="第 2 步：完成所需的 PayPal 设置"></a>第 2 步：完成所需的 PayPal 设置</h3><ul><li>展开 Payments Pro 和 Express Checkout 部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-pro-required.png" alt="Required PayPal Settings - PayPal Payments Pro"></li><li>（可选）输入与您的 PayPal 商家帐户关联的电子邮件。<blockquote><p>电子邮件地址区分大小写。要接收付款，电子邮件地址必须与您的 PayPal 商家帐户中指定的电子邮件地址相匹配。</p></blockquote></li></ul><p>如果您没有 PayPal 帐户，请单击开始通过 PayPal 接受付款。</p><ul><li>输入您用于登录 PayPal 商家帐户的以下凭据之一：<ul><li>Partner:    您的 PayPal 合作伙伴 ID。</li><li>Vendor:    您的 PayPal 用户登录名。</li><li>User:    在您的 PayPal 帐户上设置的其他用户的 ID。</li></ul></li><li>输入与您的 PayPal 帐户关联的密码。</li><li>如果要运行测试事务，请将测试模式设置为是。<br>在沙盒中测试配置时，请仅使用 PayPal 推荐的<a href="https://www.paypalobjects.com/en_AU/vhelp/paypalmanager_help/credit_card_numbers.htm" target="_blank" rel="noopener">信用卡号</a>。当您准备好上线时，返回配置并将测试模式设置为否。</li><li>如果您的系统使用代理服务器建立与 PayPal 系统的连接，请将 Use Proxy 设置为 Yes 并执行以下操作：<ul><li>输入代理主机的 IP 地址。</li><li>输入代理端口的端口号。</li></ul></li></ul><p>当服务器防火墙阻止直接访问 PayPal 服务器时，使用代理。在这种情况下，第三方服务器用于中继流量。</p><ul><li>将启用此解决方案设置为是。</li><li>如果您想向您的客户提供 PayPal Credit，请将启用 PayPal Credit 设置为 Yes。</li><li>如果您想安全地存储客户付款/信用卡详细信息，以便客户不必每次都重新输入付款信息，请将 Vault Enabled 设置为 Yes。</li></ul><h3 id="第-3-步：设置-Advertise-PayPal-Credit-Advertise-PayPal-PayLater（可选）"><a href="#第-3-步：设置-Advertise-PayPal-Credit-Advertise-PayPal-PayLater（可选）" class="headerlink" title="第 3 步：设置 Advertise PayPal Credit / Advertise PayPal PayLater（可选）"></a>第 3 步：设置 Advertise PayPal Credit / Advertise PayPal PayLater（可选）</h3><p>从 2.4.3 版本开始，在包含 PayPal 的部署中支持 PayPal Pay Later。此功能允许购物者每两周分期付款一次，而不是在购买时支付全部金额。 PayPal Credit 体验已弃用。</p><p>将启用 PayPal PayLater 体验设置为以下之一：</p><ul><li>是 - 设置 Advertise PayPal PayLater </li><li>否 - 设置 Advertise PayPal Credit</li></ul><p><strong>Advertise PayPal Credit</strong> </p><ul><li>展开 Advertise PayPal Credit<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-advanced-advertise-paypal-credit.png" alt=""></li><li>点击从 PayPal 获取发布者 ID，然后按照说明获取您的帐户信息。</li><li>输入您的发布商 ID。</li><li>展开主页部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-advanced-advertise-paypal-credit-home-page.png" alt="Advertise PayPal Credit - Home Page"></li><li>要在页面上放置横幅，请将显示设置为 Yes。</li><li>将位置设置为以下之一：<ul><li>Header (center)</li><li>Sidebar (right)</li></ul></li><li>将大小设置为以下之一：<ul><li>190 x 100</li><li>234 x 60</li><li>300 x 50</li><li>468 x 60</li><li>728 x 90</li><li>800 x 66</li></ul></li><li>展开其余部分并重复前面的步骤：<ul><li>目录类别页面 </li><li>目录产品页面 </li><li>结帐购物车页面</li></ul></li></ul><p><strong>Advertise PayPal Pay Later</strong></p><ul><li>展开 Advertise PayPal PayLater 部分。</li><li>将启用 PayPal PayLater 设置为是。 </li><li>展开主页部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-advanced-advertise-paypal-paylater-home-page.png" alt="Advertise PayPal PayLater - Home Page Settings"></li><li>要在页面上放置横幅，请将显示设置为 Yes。</li><li>将位置设置为以下之一：<ul><li>Header (center)</li><li>Sidebar (right)</li></ul></li><li>设置 Style Layout 为下面其中一个<ul><li>Text</li><li>Flex</li></ul></li><li>仅对于样式布局 Text，将 logo 类型设置为以下之一：<ul><li>Primary</li><li>Alternative</li><li>Inline</li><li>None</li></ul></li><li>仅对于样式布局 Text，将 logo 位置设置为以下之一：<ul><li>Left</li><li>Right</li><li>Top</li></ul></li><li>仅对于样式布局 Text，将 Text 颜色设置为以下之一：<ul><li>Black</li><li>White</li><li>Monochrome</li><li>Grayscale</li></ul></li><li>仅对于样式布局 Text，将 Text 大小设置为以下之一：<ul><li>10px</li><li>11px</li><li>12px</li><li>13px</li><li>14px</li><li>15px</li><li>16px</li></ul></li><li>仅对于 Style Layout Flex，将 Ratio 设置为以下之一：<ul><li>1x1</li><li>1x4</li><li>8x1</li><li>20x1</li></ul></li><li>仅对于样式布局 Flex，将颜色设置为以下之一：<ul><li>Blue</li><li>Black</li><li>White</li><li>White No Border</li><li>Gray</li><li>Monochrome</li><li>Grayscale</li></ul></li><li>展开其余部分并重复前面的步骤：<ul><li>目录产品页面 </li><li>结帐购物车页面 </li><li>结帐付款步骤 </li><li>目录类别页面</li></ul></li></ul><h3 id="第四步：完成基本设置"><a href="#第四步：完成基本设置" class="headerlink" title="第四步：完成基本设置"></a>第四步：完成基本设置</h3><ul><li>展开基本设置 - PayPal Payments Pro 部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-pro-basic-settings.png" alt="Basic Settings - PayPal Payments Pro"></li><li>输入标题以在结账时识别 PayPal Payments Pro。<br>建议您使用标题 Debit or Credit Card.。</li><li>如果您提供多种付款方式，请为排序顺序输入一个数字，以确定 PayPal Payments Pro 在结账期间与其他付款方式一起列出时的显示顺序。<br>这与其他付款方式有关。 （0 = 第一个，1 = 第二个，2 = 第三个，依此类推。）</li><li>将付款操作设置为以下之一：<ul><li>Authorization: 批准购买，但暂停资金。该金额在被商家捕获之前不会被提取。</li><li>Sale: 购买金额被授权并立即从客户账户中提取。</li></ul></li><li>对于信用卡设置，选择您在商店中接受用于付款的信用卡。<br>要选择多张卡片，请按住 Ctrl 键 (PC) 或 Command 键 (Mac) 并单击每一张。<blockquote><p>美国运通需要额外的协议。</p></blockquote></li></ul><h3 id="第五步：完成高级设置"><a href="#第五步：完成高级设置" class="headerlink" title="第五步：完成高级设置"></a>第五步：完成高级设置</h3><ul><li><p>展开高级设置部分。<br><img src="https://docs.magento.com/user-guide/payment/assets/paypal-payments-pro-advanced-settings.png" alt="Advanced Settings - PayPal Payments Pro"></p></li><li><p>将适用付款设置为以下选项之一：</p><ul><li>All Allowed Countries: 来自您商店配置中指定的所有国家/地区的客户都可以使用此付款方式。</li><li>Specific Countries: 选择此选项后，将出现“来自特定国家/地区的付款”列表。按住 Ctrl 键 (PC) 或 Command 键 (Mac) 并在列表中选择客户可以从您的商店购买的每个国家/地区。</li></ul></li><li><p>要将与支付系统的通信写入日志文件，请将调试模式设置为 Yes</p><blockquote><p>根据 PCI 数据安全标准，信用卡信息不会记录在日志文件中。</p></blockquote></li><li><p>要启用主机真实性验证，请将启用 SSL 验证设置为 Yes</p></li><li><p>要要求客户输入 CVV 代码，请将要求 CVV 输入设置为 Yes。</p></li><li><p>展开 CVV 和 AVS 设置部分。</p></li><li><p>要确定当地址验证系统识别出不匹配时应拒绝交易的时间，请指定如何处理以下每种情况：</p><ul><li>要根据不匹配的街道不匹配拒绝交易，请将 AVS Street 不匹配设置为 Yes。</li><li>要根据不匹配的邮政编码拒绝交易，请将 AVS 邮政编码不匹配设置为是 Yes。</li><li>要根据不匹配的国家/地区标识符拒绝交易，请将国际 AVS 指标不匹配设置为 Yes</li><li>要根据不匹配的 CVV 代码拒绝交易，请将卡安全代码不匹配设置为 Yes<br><img src="https://docs.magento.com/user-guide/payment/assets/paypal-payments-pro-cvv-avs-settings.png" alt="CVV and AVS Settings - PayPal Payments Pro"></li></ul></li><li><p>根据您的商店的需要完成以下部分：</p><ul><li><a href="https://docs.magento.com/user-guide/payment/paypal-payments-pro.html#settlement-report-settings" target="_blank" rel="noopener">Settlement Report Settings</a></li><li><a href="https://docs.magento.com/user-guide/payment/paypal-payments-pro.html#frontend-experience-settings" target="_blank" rel="noopener">Frontend Experience Settings</a></li></ul></li></ul><h4 id="结算报告设置"><a href="#结算报告设置" class="headerlink" title="结算报告设置"></a>结算报告设置</h4><ul><li>展开结算报告设置部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-advanced-settlement-report-settings.png" alt="Settlement Report Settings - PayPal Payments Pro"></li><li>对于 SFTP 凭据，请执行以下操作：<ul><li>如果您已注册 PayPal 的安全 FTP 服务器，请输入以下 SFTP 登录凭据：<ul><li>Login</li><li>Password</li></ul></li><li>要在您的网站上使用 Payments Pro 之前运行测试报告，请将沙盒模式设置为 Yes。</li><li>输入自定义端点主机名或 IP 地址。<br>默认情况下，该值为 reports.paypal.com。</li><li>输入保存报告的自定义路径。<br>默认情况下，该值为 /ppreports/outgoing。</li></ul></li><li>要根据计划生成报告，请完成 Scheduled Fetching 设置：<ul><li>将启用自动提取设置为 Yes</li><li>将计划设置为以下之一：<ul><li>Daily</li><li>Every 3 Days</li><li>Every 7 Days</li><li>Every 10 Days</li><li>Every 14 Days</li><li>Every 30 Days</li><li>Every 40 Days<br>PayPal 将每份报告保留 45 天。</li></ul></li><li>当您希望生成报告时，将时间设置为小时、分钟和秒。</li></ul></li></ul><h4 id="前端体验设置"><a href="#前端体验设置" class="headerlink" title="前端体验设置"></a>前端体验设置</h4><p>前端体验设置让您有机会选择在您的网站上显示哪些 PayPal 徽标，并自定义您的 PayPal 商家页面的外观。</p><ul><li><p>展开前端体验设置部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-advanced-frontend-experience-settings1.png" alt="Frontend Experience Settings - PayPal Payments Pro"></p></li><li><p>选择您希望在商店的 PayPal 区块中显示的 PayPal 产品徽标。<br>PayPal 徽标有四种样式和两种尺寸：</p><ul><li>没有标志 </li><li>我们更喜欢 PayPal（150 x 60 或 150 x 40） </li><li>现在接受 PayPal（150 x 60 或 150 x 40） </li><li>通过 PayPal 付款（150 x 60 或 150 x 40） </li><li>使用 PayPal 立即购物（150 x 60 或 150 x 40）</li></ul></li><li><p>要自定义 PayPal 商家页面的外观，请执行以下操作：</p><ul><li>输入您要应用于您的 PayPal 商家页面的页面样式的名称：<ul><li>paypal:使用 PayPal 页面样式。</li><li>primary: 使用您在帐户配置文件中确定为主要样式的页面样式。</li><li>your_custom_value: 使用在您的帐户资料中指定的自定义付款页面样式。</li></ul></li><li>对于 Header Image URL，输入要显示在支付页面左上角的图像的 URL。最大文件大小为 750 像素宽 x 90 像素高。<blockquote><p>PayPal 建议图像位于安全 (https) 服务器上。否则，浏览器可能会警告该页面包含安全和非安全项目。</p></blockquote></li></ul></li><li><p>要为页面设置颜色，请为以下各项输入不带 # 符号的六字符十六进制代码：</p><ul><li>Header Background Color: 结帐页面标题的背景颜色。</li><li>Header Border Color: 标题周围两像素边框的颜色。</li><li>Page Background Color: 结帐页面以及标题和付款表单周围的背景颜色。</li></ul></li></ul><h3 id="第-6-步：完成-PayPal-Express-Checkout-的基本设置"><a href="#第-6-步：完成-PayPal-Express-Checkout-的基本设置" class="headerlink" title="第 6 步：完成 PayPal Express Checkout 的基本设置"></a>第 6 步：完成 PayPal Express Checkout 的基本设置</h3><ul><li>展开基本设置 - PayPal Express Checkout 部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-pro-express-checkout-basic-settings.png" alt=""></li><li>输入标题以在结帐时识别此付款方式。<br>建议将每个商店视图的标题设置为 PayPal。</li><li>如果您提供多种付款方式，请为排序顺序输入一个数字，以确定 PayPal Express Checkout 与其他付款方式一起列出时出现的顺序。<br>这与其他付款方式有关。 （0 = 第一个，1 = 第二个，2 = 第三个，依此类推。）</li><li>将付款操作设置为以下之一：<ul><li>Authorization: 批准购买并冻结资金。该金额在被商家捕获之前不会被提取。</li><li>Sale: 购买金额被授权并立即从客户的账户中提取。</li></ul></li><li>要在产品页面上显示使用 PayPal 结帐按钮，请将在产品详细信息页面上显示设置为 Yes</li></ul><h3 id="第-7-步：完成-PayPal-Express-Checkout-的高级设置"><a href="#第-7-步：完成-PayPal-Express-Checkout-的高级设置" class="headerlink" title="第 7 步：完成 PayPal Express Checkout 的高级设置"></a>第 7 步：完成 PayPal Express Checkout 的高级设置</h3><ul><li>展开高级设置部分。<br><img src="https://docs.magento.com/user-guide/configuration/sales/assets/payment-methods-paypal-payments-pro-express-checkout-advanced-settings.png" alt="Advanced Settings - PayPal Express Checkout"></li><li>将在购物车上显示设置为 Yes</li><li>将适用付款设置为以下选项之一：<ul><li>All Allowed Countries: 来自您商店配置中指定的所有国家/地区的客户都可以使用此付款方式。</li><li>Specific Countries: 选择此选项后，将出现“来自特定国家/地区的付款”列表。要选择多个国家/地区，请按住 Ctrl 键 (PC) 或 Command 键 (Mac) 并单击每个项目。</li></ul></li><li>要将与支付系统的通信写入日志文件，请将调试模式设置为 Yes<blockquote><p>根据 PCI 数据安全标准，信用卡信息不会记录在日志文件中。</p></blockquote></li><li>要启用主机真实性验证，请将启用 SSL 验证设置为 Yes</li><li>要从 PayPal 站点按行项目显示客户订单的完整摘要，请将转移购物车行项目设置为 Yes</li><li>要允许客户从 PayPal 站点完成交易而无需返回您的商店进行订单审核，请将跳过订单审核步骤设置为 Yes。</li><li>完成后，单击保存配置。 17 天前</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> PayPal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做过了那些小玩意</title>
      <link href="/blog//repository//"/>
      <url>/blog//repository//</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://github.com/keyboard3/learn-compiler" target="_blank" rel="noopener">learn-compiler</a><br>因为现代 JS 的复杂性阻碍了我对它的了解，所以我选择穿越历史迷雾，站在 Brendan Eich 的视角上，利用自己的工程经验来演变这门语言。</li><li><a href="https://github.com/keyboard3/js-custom" target="_blank" rel="noopener">js-custom</a><br>一些想法用 JS 验证</li><li><a href="https://github.com/keyboard3/cpp-custom" target="_blank" rel="noopener">cpp-custom</a><br>一些想法用C++验证</li><li><a href="https://github.com/keyboard3/algorithm" target="_blank" rel="noopener">algorithm</a><br>分别用 js 和 c++ 多种思路实现 leetCode 的题目</li><li><a href="https://github.com/keyboard3/HencoderKeyboard3" target="_blank" rel="noopener">HencoderKeyboard3</a><br>即刻点赞、薄荷健康尺、小米运动、Fliboard 翻页效果</li><li><a href="https://github.com/keyboard3/SubPlayer" target="_blank" rel="noopener">SubPlayer</a><br>对原作者的SubPlayer的改造，使之可以在浏览器端烧录字幕<br><a href="https://keyboard3.com/sub-player/" target="_blank" rel="noopener">https://keyboard3.com/sub-player/</a><br><img src="https://github.com/keyboard3/SubPlayer/raw/master/public/screenshot.png" alt=""></li><li><a href="https://github.com/keyboard3/DropDownMenu" target="_blank" rel="noopener">DropDownMenu</a><br>多年前对原作者的 Android 库的灵活扩展</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PayPal Payments Advance</title>
      <link href="/blog/gs-ppa-hosted-pages/"/>
      <url>/blog/gs-ppa-hosted-pages/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.paypal.com/api/nvp-soap/payflow/gs-ppa-hosted-pages/" target="_blank" rel="noopener">原文</a></p><h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>高级 PayPal 付款 (PPA) 使得商家接受 PayPal 和 信用卡。 PPA 给商家提供 PayPal 商家账户。集成 PPA 的过程和 PayPal Payflow 网关的过程相似。</p><p>这个文档展示了如何从 Payflow pilot 端点中获取安全 token，然后在测试调用中提交 token。有关向你展示如何设置，自定义和测试托管页面，看<a href="https://developer.paypal.com/api/nvp-soap/payflow/test-hosted-pages/" target="_blank" rel="noopener">设置和测试托管页面</a></p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>PayPal 的托管结帐页面(也称为托管结帐模板)使您可以安全的传递交易数据到服务器并收集信用卡信息。尽管下面的<a href="https://developer.paypal.com/api/nvp-soap/payflow/gs-ppa-hosted-pages/#make-your-first-call" target="_blank" rel="noopener">第一次调用</a>部分描述了托管页面的初始自定义，但请初始调用后参考 <a href="https://developer.paypal.com/api/nvp-soap/payflow/integration-guide/configure-hosted-checkout/" target="_blank" rel="noopener">Payflow 网关开发指南和建议</a></p><p>PPA 要求使用 PayPal 的托管结帐模板来提交销售和授权数据。这些模板使商家能够避免信用卡详细信息通过其服务器的 PCI 负担</p><p>用作 PPA 集成部分的安全令牌有助于保护交易数据。您必须使用托管结帐页面的安全令牌。该令牌适用于一次交易，有效期为 30 分钟。服务器使用令牌及其令牌 ID 来检索和显示交易数据以供客户批准。</p><h1 id="完成第一次调用"><a href="#完成第一次调用" class="headerlink" title="完成第一次调用"></a>完成第一次调用</h1><p>在完成第一次调用 Payflow pilot 端点(<a href="https://pilot-payflowpro.paypal.com/?_ga=1.159497021.1477272473.1648436854" target="_blank" rel="noopener">https://pilot-payflowpro.paypal.com/?_ga=1.159497021.1477272473.1648436854</a>) 之前, 去<a href="https://www.paypal.com/advanced/?_ga=1.96198428.1477272473.1648436854" target="_blank" rel="noopener">PayPal Payments Advanced</a> 登录 PPA 账户。另请参阅以下步骤，将用户添加到帐户，以用于 API 调用。商家应为交易创建一个用户帐户。否则，如果商户登录 ID 的密码发生变化，API 调用将失败。</p><p>因此，在您在 PayPal Payments Advanced 注册您的 PPA 帐户后，将用户添加到该帐户：</p><ul><li>使用 PayPal Payments Advanced 帐户的商家登录名和密码，登录 PayPal Manager。</li><li>单击帐户管理。</li><li>在管理用户下，单击添加用户。</li><li>填写管理员配置、用户信息和用户登录信息下的字段。</li><li>在将权限分配给用户下的选择预定义角色字段中，您可以选择 FULL_TRANSACTIONS。将用户状态保留为活动。</li><li>单击更新按钮。</li></ul><p>有关字段的更多信息，请单击帮助按钮。</p><h2 id="设置托管结帐页面"><a href="#设置托管结帐页面" class="headerlink" title="设置托管结帐页面"></a>设置托管结帐页面</h2><ul><li>使用您在上面获得的 PayPal Payments Advanced 帐户，登录到 PayPal Manager。<br><img src="https://www.paypalobjects.com/webstatic/en_US/developer/docs/pfg/paypal_manager1.png" alt=""></li><li>在页面的服务摘要部分的服务下，单击托管结帐页面。<br><img src="https://www.paypalobjects.com/webstatic/en_US/developer/docs/pfg/paypal_mngr_svc_summary.png" alt=""></li><li>在标题为 Hosted Checkout Pages 的登录页面上，单击设置。</li><li>最初，出于测试目的，我们将此设置页面上的大部分字段留空。当您稍后填写更多设置页面字段时，请务必单击同一页面上的帮助按钮以获取更多信息。另请参阅 <a href="https://developer.paypal.com/api/nvp-soap/payflow/integration-guide/" target="_blank" rel="noopener">Payflow Gateway 开发人员指南和参考</a>。</li><li>在此设置页面上，输入以下值。 （设置页面上的其他值对于您的初始测试调用是不必要的。）<ul><li>PayPal 沙盒电子邮件地址: 您用于 PayPal 沙盒帐户的电子邮件，它是您在 PayPal 开发人员体验中的个人资料的一部分。</li><li>Return URL: 在页面的“付款确认”部分，输入 Return URL（供消费者继续付款时使用）。对于 Return URL 方法，指定 POST。</li><li>启用安全令牌: 设置为是。</li></ul></li><li>在此设置页面上，单击保存更改。</li><li>单击自定义，选择布局 C，然后单击保存并发布。</li></ul><h2 id="从-pilot-URL-获取安全令牌"><a href="#从-pilot-URL-获取安全令牌" class="headerlink" title="从 pilot URL 获取安全令牌"></a>从 pilot URL 获取安全令牌</h2><p>如 <a href="https://developer.paypal.com/api/nvp-soap/payflow/integration-guide/" target="_blank" rel="noopener">Payflow Gateway 开发人员指南和参考</a>中所述，您可以发送测试数据，例如作为名称-值对，发送到 Payflow pilot 端点 (<a href="https://pilot-payflowpro.paypal.com)。" target="_blank" rel="noopener">https://pilot-payflowpro.paypal.com)。</a></p><blockquote><p>注意: 由于 Payflow 在多个数据中心外运行，我们强烈建议所有 API 调用都使用上面的主机 URL 完成。如果您对 IP 地址进行硬编码以通过 Payflow API 发送交易，如果数据中心因任何问题或任何计划维护而离线，您的交易失败，PayPal 概不负责。</p></blockquote><p>下表包含用于获取安全令牌的测试调用的参数：</p><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>PARTNER</td><td>支付流合作伙伴。以下示例使用 PayPal，因为 PayPal Payments Advanced 包含一个 PayPal 商家帐户。</td></tr><tr><td>VENDOR</td><td>您用于登录 PayPal 管理的商家登录 ID。</td></tr><tr><td>USER</td><td>您使用上面的 PayPal 管理器添加到您的帐户的用户的名称。</td></tr><tr><td>PWD</td><td>您使用上面的 PayPal 管理器添加到您的帐户的用户的密码。</td></tr><tr><td>TRXTYPE</td><td>交易的类型，例如 S 出售。</td></tr><tr><td>AMT</td><td>销售金额。</td></tr><tr><td>CREATESECURETOKEN</td><td>指定 Y 值以请求安全令牌以完成交易。</td></tr><tr><td>SECURETOKENID</td><td>您为将从 Payflow 试点端点 (<a href="https://pilot-payflowpro.paypal.com" target="_blank" rel="noopener">https://pilot-payflowpro.paypal.com</a>) 返回的令牌创建的 ID。使用唯一的字母数字值，最多 36 个字符。例如，您可以指定 SECURETOKENID=9a9ea8208de1413abc3d60c86cb1f4c5。</td></tr></tbody></table><p>出于演示目的，以下示例使用 cURL 获取您将在后续测试调用中使用的安全令牌。</p><p>请参阅上表中的参数说明，了解在以下示例中替换 PARTNER、VENDOR、USER 和 PWD 的值。</p><pre class="line-numbers language-shell"><code class="language-shell">curl https://pilot-payflowpro.paypal.com \-s \--insecure \-d PARTNER=<PayPal> \-d VENDOR=<MyMerchantID> \-d USER=<UserID> \-d PWD=<UserPassword> \-d TRXTYPE=S \-d AMT=40 \-d CREATESECURETOKEN=Y \-d SECURETOKENID=12528208de1413abc3d60c86cb15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应应类似于以下内容。响应包含 RESULT=0（表示成功）、一个 SECURETOKEN（用于后续事务调用）、一个 SECURETOKENID（您在请求中提供以标识接收到的令牌）和一个 RESPMSG 值 Approved。</p><pre><code>RESULT=0&amp;SECURETOKEN=123456NYslUGMy0tlKafELwct&amp;SECURETOKENID=12528208de1413abc3d60c86cb15&amp;RESPMSG=Approved</code></pre><h2 id="使用安全令牌并获取交易详情"><a href="#使用安全令牌并获取交易详情" class="headerlink" title="使用安全令牌并获取交易详情"></a>使用安全令牌并获取交易详情</h2><p>可以在测试 HTML 文件中的 iframe 标记中使用安全令牌（如上所示）。 iframe 标签使您能够嵌入您在上面自定义的 PayPal 托管页面。</p><blockquote><p>注意: 对比下面的测试代码（支付后只有 iframe 窗口重定向），父窗口一般应该重定向。因此，与下面的测试代码相比，您可以创建一个中间页面，PayPal 将重定向到该中间页面，并使用该中间页面捕获返回数据并强制客户的浏览器重定向到您的最终收据页面。</p></blockquote><p>在下面的测试代码中，iframe 标记中使用了以下参数，该标记指向 Payflow Link 端点 <a href="https://payflowlink.paypal.com。使用下面的测试" target="_blank" rel="noopener">https://payflowlink.paypal.com。使用下面的测试</a> HTML 文件后，您可以开始添加特定于 PPA 集成的参数和功能；请参阅 <a href="https://developer.paypal.com/api/nvp-soap/payflow/integration-guide/" target="_blank" rel="noopener">Payflow Gateway 开发人员指南和参考</a>。</p><p>以下测试 HTML 文件以测试模式提交安全令牌。此表包含 HTML 文件中 iframe 标记的参数：</p><table><thead><tr><th>名字</th><th>描述</th></tr></thead><tbody><tr><td>MODE</td><td>指定 TEST 以指示您的调用是测试调用。对于生产应用程序，您可以将值设置为 LIVE（这是默认值）。</td></tr><tr><td>SECURETOKENID</td><td>指定您为安全令牌创建（如上所述）的 ID。当您提交安全令牌（如下）时，请使用与上述相同的 SECURETOKENID 值。</td></tr><tr><td>SECURETOKEN</td><td>指定您刚刚从 Payflow 试点端点 (<a href="https://pilot-payflowpro.paypal.com" target="_blank" rel="noopener">https://pilot-payflowpro.paypal.com</a>) 收到（上图）的 SECURETOKEN 的值。</td></tr></tbody></table><p>在下面创建测试 HTML 文件。然后，在 iframe 标记的 src 属性中，替换您自己的 SECURETOKENID 和 SECURETOKEN 值。此测试 HTML 文件说明了如何在商家页面中包含托管页面，以使商家能够接受付款。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>This is a test HTML file.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://payflowlink.paypal.com?MODE<span class="token punctuation">=</span>TEST&amp;SECURETOKENID<span class="token punctuation">=</span>MySecureTokenID&amp;SECURETOKEN<span class="token punctuation">=</span>MySecureToken<span class="token punctuation">"</span></span>      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test_iframe<span class="token punctuation">"</span></span>      <span class="token attr-name">scrolling</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span>      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570px<span class="token punctuation">"</span></span>      <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>540px<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存并在浏览器中打开上述 HTML 文件。在“这是一个商家页面”的文字下方，会显示页面的 iframe（内联框架）部分。该页面的“托管结帐”部分使客户可以选择使用 PayPal 或信用卡付款，然后进行付款。<br><img src="https://www.paypalobjects.com/webstatic/en_US/developer/docs/pfg/payflow_iframe_with_hosted_pages.png" alt=""></p><h2 id="接收交易数据"><a href="#接收交易数据" class="headerlink" title="接收交易数据"></a>接收交易数据</h2><p>在上面页面的 iframe 部分中，其中显示了托管的结帐框架，输入测试信用卡号 4111111111111111 和到期日期值 12 和 12。然后单击立即付款。显示以下确认页面：<br><img src="https://www.paypalobjects.com/webstatic/en_US/developer/docs/pfg/payflow_pay_confirmation.png" alt=""></p><p>该确认页面使客户能够点击“返回商家网站。如果您单击该链接，将发生以下情况： 服务器将您的浏览器重定向到您的返回 URL，即您在 PayPal 管理器的设置页面上提供的返回 URL。（请参阅上面的“设置托管结帐页面”。请注意，PayPal 管理器中设置页面上的帮助按钮包含有关自定义选项的信息。）</p><p>在将您的浏览器重定向到 return URL 时，服务器通过 POST 将交易数据发送到 return URL。</p><p>在我们的示例中，通过 POST 返回的交易数据如下，没有链接中断：</p><pre><code>TYPE=S&amp;RESPMSG=Approved&amp;ACCT=1234&amp;COUNTRY=US&amp;VISACARDLEVEL=12&amp;TAX=0.00&amp;CARDTYPE=0&amp;PNREF=12341EE308F6&amp;TENDER=CC&amp;AVSDATA=XXN&amp;METHOD=CC&amp;SECURETOKEN=123456NYslUGMy0tlKafELwct&amp;SHIPTOCOUNTRY=US&amp;AMT=40.00&amp;SECURETOKENID=12528208de1413abc3d60c86cb15&amp;TRANSTIME=2012-03-26+14%3A07%3A59&amp;HOSTCODE=A&amp;COUNTRYTOSHIP=US&amp;RESULT=0&amp;AUTHCODE=124PNI&amp;EXPDATE=1212</code></pre><p>您可以根据需要解析此交易数据。有关可以通过 POST 发送到您的返回 URL 的其他参数的信息，请参阅 <a href="https://developer.paypal.com/api/nvp-soap/payflow/integration-guide/" target="_blank" rel="noopener">Payflow Gateway 开发人员指南和参考</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> PayPal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K3d vs k3s vs Kind vs Microk8s vs Minikube</title>
      <link href="/blog/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/"/>
      <url>/blog/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/</url>
      
        <content type="html"><![CDATA[<p><a href="https://thechief.io/c/editorial/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/" target="_blank" rel="noopener">原文</a></p><p>在本地运行 Kubernetes 是保证你的应用程序在生产环境中最常用的容器编排平台运行的最好方式。minikube 就是这样的一个本地 Kubernetes 工具。本文提供了一组可选项和一个简单的对比帮助你在使用时做出一个明智的选择。</p><ul><li><a href="https://thechief.io/c/editorial/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/#K3S" target="_blank" rel="noopener">K3S</a></li><li><a href="https://thechief.io/c/editorial/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/#K3d" target="_blank" rel="noopener">K3d</a></li><li><a href="https://thechief.io/c/editorial/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/#Kind" target="_blank" rel="noopener">Kind</a></li><li><a href="https://thechief.io/c/editorial/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/#MicroK8S" target="_blank" rel="noopener">MicroK8S</a></li><li><a href="https://thechief.io/c/editorial/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/#Minikube" target="_blank" rel="noopener">Minikube</a></li><li><a href="https://thechief.io/c/editorial/k3d-vs-k3s-vs-kind-vs-microk8s-vs-minikube/#K3d,_K3s,_Kind,_MicroK8s,_and_MiniKube:_What_sets_them_apart?" target="_blank" rel="noopener">K3d,K3s,Kind,MicroK8s,and MiniKube: What sets them apart?</a></li></ul><p>Kubernetes 是一个由 Google 开发的面对容器应用的自动部署、扩容、管理和编排的开源平台。它提供了跨多个服务器管理容器的简单系统，并具有优异的负载均衡和资源分配，保证每个应用以最佳的方式运行。</p><p>尽管 Kubernetes 是为了在云上构建运行的，开发人员出于各种原因需要在本机运行。在本地运行它可以帮助你快速的熟悉这项技术，而不需要纠结它的复杂性或者直接在云上操作带来的成本。在本地运行它是一个玩容器编排的不错的方式。开发者在本地使用它可以缓解开发环境和生产环境带来的差异，并保证应用可以高效的在生产中运行。</p><p>然而，本地 Kubernetes 设置要求一个工具帮助你创建。这篇文章概述比较了5种最常使用的工具。</p><h2 id="K3S"><a href="#K3S" class="headerlink" title="K3S"></a>K3S</h2><p><img src="https://static.thechief.io/prod/images/image_e4sblgn.width-1024.format-webp-lossless.webp" alt="k3s"><br>K3s 是一种轻量级工具，用于在资源匮乏和远端的物联网和边缘设备上运行的生产级别的 Kubernetes 负载。</p><p>K3s 帮助你通过虚拟机 VMWare/VirtualBox 在你本机上运行简单、安全、优化后的 Kubernetes 环境。</p><h2 id="K3d"><a href="#K3d" class="headerlink" title="K3d"></a>K3d</h2><p><img src="https://static.thechief.io/prod/images/image_1_Qcbhj6C.width-1024.format-webp-lossless.webp" alt="k3d"><br>k3d 是一个平台无关的轻量级包装器，在 docker 容器中运行 k3s。它有助于快速运行单个或多个 k3s 集群，无需进一步配置同时保持高可用性模式。</p><h2 id="Kind"><a href="#Kind" class="headerlink" title="[Kind]"></a>[Kind]</h2><p><img src="https://static.thechief.io/prod/images/image_2_OlK14k7.width-1024.format-webp-lossless.webp" alt="kind"><br>主要用于测试 Kubernetes, Kind(Kubernetes in Docker) 使用 Docker 容器作为节点，帮助你在本地和 CI 管道中运行 Kubernetes 集群。</p><p>它是一个开源的 CNCF 认证的 Kubernetes 安装程序，支持高可用多节点集群并从其源代码构建 Kubernetes 发行版</p><h2 id="MicroK8S"><a href="#MicroK8S" class="headerlink" title="[MicroK8S]"></a>[MicroK8S]</h2><p><img src="https://static.thechief.io/prod/images/image_3_AdNKIoS.width-1024.format-webp-lossless.webp" alt="MicroK8S"><br>由 Canonical 创建的 microK8S 是一个 Kubernetes 发行版，旨在运行快速、自我修复和高可用的 Kubernetes 集群。它针对在多个操作系统（包括 macOS、Linux 和 Windows）上快速轻松地安装单节点和多节点集群进行了优化。</p><p>它非常适合在云、本地开发环境以及边缘和物联网设备中运行 Kubernetes。它还可以在使用 ARM 或 Intel 的独立系统中高效工作，例如 Raspberry Pi。</p><h2 id="Minikube"><a href="#Minikube" class="headerlink" title="Minikube"></a>Minikube</h2><p><img src="https://static.thechief.io/prod/images/image_4_q65N6a7.width-1024.format-webp-lossless.webp?ref=thechiefio" alt="Minikube"><br>miniKube 是使用最广泛的本地 Kubernetes 安装程序。它提供了一个易于使用的指南，用于跨多个操作系统安装和运行单个 Kubernetes 环境。它将 Kubernetes 部署为容器、VM 或裸机，并实现了一个 Docker API 端点，帮助它更快地推送容器映像。它具有负载平衡、文件系统挂载和 FeatureGates 等高级功能，使其成为本地运行 Kubernetes 的最爱。</p><h2 id="K3d、K3s、Kind、MicroK8s-和-MiniKube：是什么让它们与众不同？"><a href="#K3d、K3s、Kind、MicroK8s-和-MiniKube：是什么让它们与众不同？" class="headerlink" title="K3d、K3s、Kind、MicroK8s 和 MiniKube：是什么让它们与众不同？"></a>K3d、K3s、Kind、MicroK8s 和 MiniKube：是什么让它们与众不同？</h2><p>这些工具中的每一个都为多个平台提供了一个易于使用且轻量级的本地 Kubernetes 环境，但有几件事使它们与众不同。</p><p>例如，K3s 提供了一个基于 VM 的 Kubernetes 环境。要设置多个 Kubernetes 服务器，您需要手动配置额外的虚拟机或节点，这可能非常具有挑战性。但是，它是为生产环境而设计的，这使其成为在本地模拟真实生产环境的最佳选择之一。</p><p>作为 K3s 的实现，K3d 具有 K3s 的大部分特性和缺点；但是，它不包括多集群创建。 K3s 专门用于在具有 Docker 容器的多个集群中运行 K3s，使其成为 K3s 的可扩展和改进版本。</p><p>虽然 minikube 是在本地运行 Kubernetes 的一般不错的选择，但一个主要缺点是它只能在本地 Kubernetes 集群中运行单个节点——这使它离生产多节点 Kubernetes 环境更远一些。</p><p>与 miniKube 不同，microK8S 可以在本地 Kubernetes 集群中运行多个节点。</p><p>与此列表中的其他工具相比，microK8S 在不支持 snap 包的 Linux 机器上安装具有挑战性。 microK8S 使用 canonical 创建的 snap 包来安装 Linux 机器工具，这使得在不支持它的 Linux 发行版上很难运行。 miniKube 还使用 VM 框架 multipass 安装在多个平台上，为 Kubernetes 集群创建 VM。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数组件中定义函数组件弊端</title>
      <link href="/blog/func-comp-define-func-comp/"/>
      <url>/blog/func-comp-define-func-comp/</url>
      
        <content type="html"><![CDATA[<p>嵌套函数定义在执行的时候，每次生成的是个新函数对象。这个告诉我们，不要在函数组件里定义子函数组件，函数执行的时候子函数组件会被先卸载再挂载的。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> funs1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>funs2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">funParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">funChil1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">funChil2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">funChil1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      funs1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>funChil1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">funChil2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  funs2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>funChil2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">funParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">funParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fun1:"</span><span class="token punctuation">,</span>funs1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">===</span>funs1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fun2:"</span><span class="token punctuation">,</span>funs2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">===</span>funs2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ECMAScript-标准文档查找过程"><a href="#ECMAScript-标准文档查找过程" class="headerlink" title="ECMAScript 标准文档查找过程"></a>ECMAScript 标准文档查找过程</h2><ul><li>[Function Object [[Call]]](<a href="https://262.ecma-international.org/12.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist" target="_blank" rel="noopener">https://262.ecma-international.org/12.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist</a>)<ul><li><a href="https://262.ecma-international.org/12.0/#sec-prepareforordinarycall" target="_blank" rel="noopener">PrepareForOrdinaryCall</a><ul><li><a href="https://262.ecma-international.org/12.0/#sec-newfunctionenvironment" target="_blank" rel="noopener">NewFunctionEnvironment</a><ul><li><a href="https://262.ecma-international.org/12.0/#sec-function-environment-records" target="_blank" rel="noopener">Function Environment Records</a></li></ul></li></ul></li><li><a href="https://262.ecma-international.org/12.0/#sec-ordinarycallevaluatebody" target="_blank" rel="noopener">OrdinaryCallEvaluateBody</a><ul><li><a href="https://262.ecma-international.org/12.0/#sec-runtime-semantics-evaluatebody" target="_blank" rel="noopener">Runtime Semantics: EvaluateBody</a></li><li><a href="https://262.ecma-international.org/12.0/#sec-functiondeclarationinstantiation" target="_blank" rel="noopener">Runtime Semantics: EvaluateFunctionBody</a><ul><li><a href="https://262.ecma-international.org/12.0/#sec-functiondeclarationinstantiation" target="_blank" rel="noopener">FunctionDeclarationInstantiation</a><ul><li>b.  Let fo be <a href="https://262.ecma-international.org/12.0/#sec-runtime-semantics-instantiatefunctionobject" target="_blank" rel="noopener">InstantiateFunctionObject</a> of f with argument lexEnv.<ul><li><ol start="2"><li>Let F be <a href="https://262.ecma-international.org/12.0/#sec-ordinaryfunctioncreate" target="_blank" rel="noopener">OrdinaryFunctionCreate</a>(<a href="https://262.ecma-international.org/12.0/#sec-properties-of-the-function-prototype-object" target="_blank" rel="noopener">%Function.prototype%</a>, sourceText, <a href="https://262.ecma-international.org/12.0/#prod-FormalParameters" target="_blank" rel="noopener">FormalParameters</a>, <a href="https://262.ecma-international.org/12.0/#prod-FunctionBody" target="_blank" rel="noopener">FunctionBody</a>, non-lexical-this, scope)</li></ol><ul><li>Let F be ! <a href="https://262.ecma-international.org/12.0/#sec-ordinaryobjectcreate" target="_blank" rel="noopener">OrdinaryObjectCreate</a>(functionPrototype, internalSlotsList).</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> ecmascript </tag>
            
            <tag> function </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next源码分析</title>
      <link href="/blog/next-source-analysis/"/>
      <url>/blog/next-source-analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="重定向路由-rewrite-参数分析过程"><a href="#重定向路由-rewrite-参数分析过程" class="headerlink" title="重定向路由 rewrite 参数分析过程"></a>重定向路由 rewrite 参数分析过程</h2><pre class="line-numbers language-js"><code class="language-js">next  build    <span class="token comment" spellcheck="true">//例子：</span>      <span class="token operator">~</span><span class="token operator">/</span>work<span class="token operator">/</span>dev<span class="token operator">-</span>web<span class="token operator">/</span>next<span class="token punctuation">.</span>js<span class="token operator">/</span>examples<span class="token operator">/</span>custom<span class="token operator">-</span>routes<span class="token operator">-</span>proxying<span class="token operator">/</span>node_modules<span class="token operator">/</span>next<span class="token operator">/</span>dist<span class="token operator">/</span>build<span class="token operator">/</span>index<span class="token punctuation">.</span>js        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> config<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span>rewrites<span class="token operator">===</span><span class="token string">'function'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">const</span> _rewrites<span class="token operator">=</span><span class="token keyword">await</span> config<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span><span class="token function">rewrites</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">~</span><span class="token operator">/</span>work<span class="token operator">/</span>dev<span class="token operator">-</span>web<span class="token operator">/</span>next<span class="token punctuation">.</span>js<span class="token operator">/</span>packages<span class="token operator">/</span>next<span class="token operator">/</span>build<span class="token operator">/</span>index<span class="token punctuation">.</span>ts        <span class="token keyword">const</span> <span class="token punctuation">{</span> headers<span class="token punctuation">,</span> rewrites<span class="token punctuation">,</span> redirects <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadCustomRoutes</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>        <span class="token operator">...</span>        routesManifest <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token operator">...</span>rewrites<span class="token punctuation">:</span> rewrites<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">buildCustomRoute</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">'rewrite'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token operator">...</span>        <span class="token keyword">await</span> promises<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>          routesManifestPath<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//path.join(distDir, ROUTES_MANIFEST) //routes-manifest.json</span>          JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>routesManifest<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token string">'utf8'</span>        <span class="token punctuation">)</span>  next<span class="token operator">-</span>server<span class="token operator">/</span>server    <span class="token comment" spellcheck="true">//例子:</span>      <span class="token operator">~</span><span class="token operator">/</span>work<span class="token operator">/</span>dev<span class="token operator">-</span>web<span class="token operator">/</span>next<span class="token punctuation">.</span>js<span class="token operator">/</span>examples<span class="token operator">/</span>custom<span class="token operator">-</span>routes<span class="token operator">-</span>proxying<span class="token operator">/</span>node_modules<span class="token operator">/</span>next<span class="token operator">/</span>dist<span class="token operator">/</span>next<span class="token operator">-</span>server<span class="token operator">/</span>server<span class="token operator">/</span>next<span class="token operator">-</span>server<span class="token punctuation">.</span>js      <span class="token operator">~</span><span class="token operator">/</span>work<span class="token operator">/</span>dev<span class="token operator">-</span>web<span class="token operator">/</span>next<span class="token punctuation">.</span>js<span class="token operator">/</span>packages<span class="token operator">/</span>next<span class="token operator">/</span>next<span class="token operator">-</span>server<span class="token operator">/</span>server<span class="token operator">/</span>next<span class="token operator">-</span>server<span class="token punctuation">.</span>ts        <span class="token operator">...</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>customRoutes <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCustomRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">...</span>            <span class="token function">require</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>distDir<span class="token punctuation">,</span> ROUTES_MANIFEST<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">...</span>          <span class="token keyword">const</span> rewrites <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>customRoutes<span class="token punctuation">.</span>rewrites<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>rewrite<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token operator">...</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token operator">...</span>          <span class="token comment" spellcheck="true">//generateRoutes()</span>          <span class="token operator">...</span>fsRoutes            match<span class="token punctuation">:</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/_next/data/:path*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token operator">...</span>            <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>pathname<span class="token punctuation">,</span>query<span class="token punctuation">,</span>parsedUrl<span class="token punctuation">)</span>              <span class="token operator">...</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parsedUrl<span class="token punctuation">)</span>                <span class="token operator">...</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parsedUrl<span class="token punctuation">)</span>                  <span class="token operator">...</span>                  <span class="token keyword">const</span> matched <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>router<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parsedUrl<span class="token punctuation">)</span>                    <span class="token operator">...</span>                    allRoutes<span class="token operator">=</span> <span class="token punctuation">[</span>                      <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>redirects                    <span class="token punctuation">]</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> testRoute <span class="token keyword">of</span> allRoutes<span class="token punctuation">)</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务端渲染过程"><a href="#服务端渲染过程" class="headerlink" title="服务端渲染过程"></a>服务端渲染过程</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token function">generateRoutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">const</span> fsRoutes<span class="token punctuation">:</span> Route<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    match<span class="token punctuation">:</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/_next/static/:path*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    match<span class="token punctuation">:</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/_next/data/:path*'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span>      <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>pathname<span class="token punctuation">,</span><span class="token operator">...</span>        <span class="token operator">...</span>        <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderToHTML</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> query<span class="token punctuation">)</span>          <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findPageComponents</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> query<span class="token punctuation">)</span>            <span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadComponents</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>distDir<span class="token punctuation">,</span>pagePath<span class="token operator">!</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span>              <span class="token keyword">const</span> Component <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requirePage</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> distDir<span class="token punctuation">,</span> serverless<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span>pagePath<span class="token punctuation">)</span>              <span class="token keyword">const</span> <span class="token punctuation">{</span> getStaticProps<span class="token punctuation">,</span> getStaticPaths<span class="token punctuation">,</span> getServerSideProps <span class="token punctuation">}</span> <span class="token operator">=</span> Component              <span class="token operator">...</span>              <span class="token keyword">const</span> DocumentMod <span class="token operator">=</span> <span class="token function">requirePage</span><span class="token punctuation">(</span><span class="token string">'/_document'</span><span class="token punctuation">,</span> distDir<span class="token punctuation">,</span> serverless<span class="token punctuation">)</span>              <span class="token keyword">const</span> AppMod <span class="token operator">=</span> <span class="token function">requirePage</span><span class="token punctuation">(</span><span class="token string">'/_app'</span><span class="token punctuation">,</span> distDir<span class="token punctuation">,</span> serverless<span class="token punctuation">)</span>              <span class="token keyword">const</span> ComponentMod <span class="token operator">=</span> <span class="token function">requirePage</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> distDir<span class="token punctuation">,</span> serverless<span class="token punctuation">)</span>              <span class="token operator">...</span>              <span class="token keyword">const</span> <span class="token punctuation">{</span> getServerSideProps<span class="token punctuation">,</span> getStaticProps<span class="token punctuation">,</span> getStaticPaths <span class="token punctuation">}</span> <span class="token operator">=</span> ComponentMod              <span class="token keyword">return</span> <span class="token punctuation">{</span>                App<span class="token punctuation">,</span>                Document<span class="token punctuation">,</span>                Component<span class="token punctuation">,</span>                buildManifest<span class="token punctuation">,</span>                reactLoadableManifest<span class="token punctuation">,</span>                pageConfig<span class="token punctuation">:</span> ComponentMod<span class="token punctuation">.</span>config <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                getServerSideProps<span class="token punctuation">,</span>                getStaticProps<span class="token punctuation">,</span>                getStaticPaths<span class="token punctuation">,</span>              <span class="token punctuation">}</span>          <span class="token operator">...</span>          <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">renderToHTMLWithComponents</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>pathname<span class="token punctuation">,</span>result<span class="token punctuation">,</span><span class="token punctuation">{</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderOpts <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// handle static page</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> components<span class="token punctuation">.</span>Component <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> components<span class="token punctuation">.</span>Component            <span class="token operator">...</span>            <span class="token keyword">const</span> isServerProps <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>components<span class="token punctuation">.</span>getServerSideProps            <span class="token operator">...</span>            <span class="token keyword">const</span> isDataReq <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>query<span class="token punctuation">.</span>_nextDataReq <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>isSSG <span class="token operator">||</span> isServerProps<span class="token punctuation">)</span>            <span class="token operator">...</span><span class="token punctuation">.</span>            <span class="token keyword">const</span> renderOpts<span class="token punctuation">:</span> RenderOpts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>components<span class="token punctuation">,</span><span class="token operator">...</span>opts<span class="token punctuation">,</span>isDataReq<span class="token punctuation">,</span><span class="token punctuation">}</span>            <span class="token operator">...</span>            renderResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">renderToHTML</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>pathname<span class="token punctuation">,</span>query<span class="token punctuation">,</span>renderOpts<span class="token punctuation">)</span>              <span class="token operator">...</span>              data <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>query<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token operator">...</span>              props<span class="token punctuation">.</span>pageProps <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>pageProps<span class="token punctuation">,</span> data<span class="token punctuation">.</span>props<span class="token punctuation">)</span>              <span class="token operator">...</span>              <span class="token comment" spellcheck="true">//renderPage</span>                  <span class="token keyword">const</span> <span class="token punctuation">{</span>App<span class="token punctuation">:</span> EnhancedApp<span class="token punctuation">,</span>Component<span class="token punctuation">:</span> EnhancedComponent<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">enhanceComponents</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> App<span class="token punctuation">,</span> Component<span class="token punctuation">)</span>                  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">renderToString</span><span class="token punctuation">(</span>                      <span class="token operator">&lt;</span>AppContainer<span class="token operator">></span>                        <span class="token operator">&lt;</span>EnhancedApp Component<span class="token operator">=</span><span class="token punctuation">{</span>EnhancedComponent<span class="token punctuation">}</span> router<span class="token operator">=</span><span class="token punctuation">{</span>router<span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                      <span class="token operator">&lt;</span><span class="token operator">/</span>AppContainer<span class="token operator">></span>                    <span class="token punctuation">)</span>                  <span class="token keyword">return</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> head <span class="token punctuation">}</span>              <span class="token keyword">const</span> documentCtx <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>ctx<span class="token punctuation">,</span> renderPage <span class="token punctuation">}</span>              <span class="token keyword">const</span> docProps<span class="token punctuation">:</span> DocumentInitialProps <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadGetInitialProps</span><span class="token punctuation">(</span>Document<span class="token punctuation">,</span>documentCtx<span class="token punctuation">)</span>              <span class="token operator">...</span>              <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token function">renderDocument</span><span class="token punctuation">(</span>Document<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">,</span>docProps<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">}</span>                <span class="token function">renderToStaticMarkup</span><span class="token punctuation">(</span>                  <span class="token operator">&lt;</span>AmpStateContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>ampState<span class="token punctuation">}</span><span class="token operator">></span>                    <span class="token punctuation">{</span>Document<span class="token punctuation">.</span><span class="token function">renderDocument</span><span class="token punctuation">(</span>Document<span class="token punctuation">,</span> <span class="token punctuation">{</span> __NEXT_DATA__<span class="token punctuation">:</span> <span class="token punctuation">{</span>gssp<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// whether the page is getServerSideProps , ...docProps}</span>                       <span class="token operator">&lt;</span>DocumentComponent <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                       <span class="token operator">...</span>                          <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token punctuation">(</span>                              <span class="token operator">&lt;</span>Html<span class="token operator">></span>                                <span class="token operator">&lt;</span>Head <span class="token operator">/</span><span class="token operator">></span>                                <span class="token operator">&lt;</span>body<span class="token operator">></span>                                  <span class="token operator">&lt;</span>Main <span class="token operator">/</span><span class="token operator">></span>                                  <span class="token operator">&lt;</span>NextScript <span class="token operator">/</span><span class="token operator">></span>                                <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>                              <span class="token operator">&lt;</span><span class="token operator">/</span>Html<span class="token operator">></span>                            <span class="token punctuation">)</span>                          <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//main</span>                          <span class="token keyword">const</span> <span class="token punctuation">{</span> inAmpMode<span class="token punctuation">,</span> html <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>DocumentComponentContext<span class="token punctuation">)</span><span class="token punctuation">.</span>_documentProps                          <span class="token operator">...</span>                          <span class="token keyword">return</span> <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"__next"</span> dangerouslySetInnerHTML<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> __html<span class="token punctuation">:</span> html <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端渲染过程"><a href="#客户端渲染过程" class="headerlink" title="客户端渲染过程"></a>客户端渲染过程</h2><pre class="line-numbers language-js"><code class="language-js">router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> query<span class="token punctuation">,</span> asPath<span class="token punctuation">,</span> <span class="token punctuation">{</span>    subscription<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> props<span class="token punctuation">,</span> err <span class="token punctuation">}</span><span class="token punctuation">,</span> App<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>      <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">{</span> App<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> props<span class="token punctuation">,</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token keyword">await</span> <span class="token function">doRender</span><span class="token punctuation">(</span>renderingProps<span class="token punctuation">)</span>              <span class="token keyword">const</span> appProps <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> Component<span class="token punctuation">,</span> err<span class="token punctuation">,</span> router <span class="token punctuation">}</span>              <span class="token operator">...</span>              <span class="token function">renderReactElement</span><span class="token punctuation">(</span>                  <span class="token operator">&lt;</span>Root callback<span class="token operator">=</span><span class="token punctuation">{</span>resolvePromise<span class="token punctuation">}</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>AppContainer<span class="token operator">></span>                    <span class="token operator">&lt;</span>App <span class="token punctuation">{</span><span class="token operator">...</span>appProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>AppContainer<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>Root<span class="token operator">></span>                <span class="token punctuation">,</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'__next'</span><span class="token punctuation">)</span>              <span class="token punctuation">)</span><span class="token function">push</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> Url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">:</span> Url <span class="token operator">=</span> url<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//pushState,replaceState 都是用来操作window.history的方法</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token string">'pushState'</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span>        routeInfo <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRouteInfo</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> query<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> shallow<span class="token punctuation">)</span>            <span class="token keyword">const</span> cachedRouteInfo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>components<span class="token punctuation">[</span>route<span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">></span>            <span class="token keyword">if</span><span class="token punctuation">(</span>shallow <span class="token operator">&amp;&amp;</span> cachedRouteInfo <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>route <span class="token operator">===</span> route<span class="token punctuation">)</span> <span class="token keyword">return</span> cachedRouteInfo<span class="token punctuation">;</span>            <span class="token operator">...</span>            routeInfo<span class="token punctuation">:</span><span class="token punctuation">{</span> Component<span class="token punctuation">:</span> res<span class="token punctuation">.</span>page<span class="token punctuation">,</span>              __N_SSG<span class="token punctuation">:</span> res<span class="token punctuation">.</span>mod<span class="token punctuation">.</span>__N_SSG<span class="token punctuation">,</span>              __N_SSP<span class="token punctuation">:</span> res<span class="token punctuation">.</span>mod<span class="token punctuation">.</span>__N_SSP<span class="token punctuation">,</span>            <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchComponent</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> componentResult <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageLoader<span class="token punctuation">.</span><span class="token function">loadPage</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>                    <span class="token operator">...</span>                    <span class="token keyword">const</span> cachedPage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pageCache<span class="token punctuation">[</span>route<span class="token punctuation">]</span>                    <span class="token operator">...</span>                    <span class="token comment" spellcheck="true">// Register a listener to get the page</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>pageRegisterEvents<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> fire<span class="token punctuation">)</span>                      <span class="token operator">...</span>                      <span class="token keyword">this</span><span class="token punctuation">.</span>loadingRoutes<span class="token punctuation">[</span>route<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>                      deps <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDependencies</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>                          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadScript</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> route<span class="token punctuation">)</span>                              script<span class="token punctuation">.</span>crossOrigin <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>__NEXT_CROSS_ORIGIN                            script<span class="token punctuation">.</span>src <span class="token operator">=</span> url                            document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>                          <span class="token function">appendLink</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">'stylesheet'</span><span class="token punctuation">)</span>            <span class="token operator">...</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>_getData<span class="token operator">&lt;</span>RouteInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>__N_SSG                <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getStaticData</span><span class="token punctuation">(</span>dataHref<span class="token operator">!</span><span class="token punctuation">)</span>                <span class="token punctuation">:</span> __N_SSP                    <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getServerData</span><span class="token punctuation">(</span>dataHref<span class="token operator">!</span><span class="token punctuation">)</span>                        <span class="token keyword">return</span> <span class="token function">fetchNextData</span><span class="token punctuation">(</span>dataHref<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isSsr<span class="token punctuation">)</span>                            res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>dataHref<span class="token punctuation">,</span> <span class="token punctuation">{</span>credentials<span class="token punctuation">:</span> <span class="token string">'same-origin'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInitialProps</span><span class="token punctuation">(</span>Component<span class="token punctuation">,</span><span class="token punctuation">{</span>pathname<span class="token punctuation">,</span>query<span class="token punctuation">,</span>asPath<span class="token punctuation">:</span> <span class="token keyword">as</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">as</span> any                  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                  routeInfo<span class="token punctuation">.</span>props <span class="token operator">=</span> props                  <span class="token keyword">this</span><span class="token punctuation">.</span>components<span class="token punctuation">[</span>route<span class="token punctuation">]</span> <span class="token operator">=</span> routeInfo                  <span class="token keyword">return</span> routeInfo                <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> pathname<span class="token operator">!</span><span class="token punctuation">,</span> query<span class="token punctuation">,</span> cleanedAs<span class="token punctuation">,</span> routeInfo<span class="token punctuation">)</span>            data <span class="token operator">=</span> routeInfo<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sub</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>components<span class="token punctuation">[</span><span class="token string">'/_app'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Component<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="next-i18n-分析"><a href="#next-i18n-分析" class="headerlink" title="next-i18n 分析"></a>next-i18n 分析</h2><ul><li>服务端：<ol><li>服务端渲染解析出来访用户的语言，然后匹配找到语言的资源文件，</li><li>解析渲染页面所需要的命名空间，然后选择相应的向 appTree 下注入这个 i18nStore，</li><li>最后由各组件 withTranslation 选择命名空间，得到相应的字符串。</li></ol></li><li>客户端<br>next 在客户端重建 appTree 的时候，会把该 i18nStore 一同恢复。</li><li>缺点<br>当 shallowRender router 跳转的时候，那么新页面的拿不到它所需的命名空间数据。</li><li>原因<br>渲染 App 时顺序：1.App 的 getInitialProps 执行 2.page 的 getServerSideProps 执行 3.渲染 App 4.渲染 Component<br>withAppTranslation 包装的组件会包装 App 的 getInitialProps，同时解析出此次请求需要的命名空间，但是这个时候还没有页面 getServerSideProps 的事情，所以需要在 page 页面 class 上时挂属性（例:getInitialProps）拿到响应的命名空间。<br>所以客户端路由的时候，先拿 getServerProps 的数据时是带不上这个页面的 i18n 命名空间的。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>amp教程</title>
      <link href="/blog/beginning-amp-course/"/>
      <url>/blog/beginning-amp-course/</url>
      
        <content type="html"><![CDATA[<p><a href="https://amp.dev/zh_cn/documentation/courses/beginning-course/?format=websites&level=beginner" target="_blank" rel="noopener">原文 Welcome to the AMP community!</a></p><h2 id="初级课程"><a href="#初级课程" class="headerlink" title="初级课程"></a>初级课程</h2><h3 id="欢迎来到-AMP-社区"><a href="#欢迎来到-AMP-社区" class="headerlink" title="欢迎来到 AMP 社区"></a>欢迎来到 AMP 社区</h3><h4 id="为什么有-AMP？"><a href="#为什么有-AMP？" class="headerlink" title="为什么有 AMP？"></a>为什么有 AMP？</h4><p>在许多方面，互联网是世界中心的枢纽。每天，来自全世界的许多人在线访问信息。但是许多人不是高速链接或者高性能设备上访问互联网，许多用户的体验不佳。</p><p>为了给网站访问者更好的体验，开发社区找到了提高网站性能的方法。在这个过程中开发者改善了辅助技术的用户的可访问性，变化无常的可靠性和各种设备上的网站设计。</p><p>有时候追踪学习所有 web 新技术非常困难。我们相信开发者想要更快速的网站，但是一路走来很容易出错。</p><p>AMP 就解决这些问题。AMP 目的是让开发者轻松的关注构建更好的功能而不用担心给用户带来不良的用户体验</p><h4 id="AMP-有什么好处？"><a href="#AMP-有什么好处？" class="headerlink" title="AMP 有什么好处？"></a>AMP 有什么好处？</h4><p>AMP 是一个 web 组件库用于实施最佳的 web 实践。AMP 解决了常见的开发障碍，以允许设计高性能，可访问和响应迅速的网站。</p><p>简而言之，AMP 让正确的事变得容易。让开发者腾出时间专注于给用户带来更有价值的功能。</p><p>AMP 致力于通过以下方式提高网站性能：</p><ul><li><p>通过添加常见网站功能标签来扩展 HTML。HTML 是为了创建基本的内容页面开发的，但是还没发展到跟上现代网站的步伐。一些相关的现代网站功能包括侧滑导航菜单，视频播放器和图片轮播。为这些功能添加的额外标签被叫做“web 组件”</p></li><li><p>减少 JavaScript 数量。AMP 需要运行 JavaScript，但是 AMP 限制了页面上的 JavaScript 何时以及如何使用。这种限制可以极大的提高移动端网站性能。AMP 组件提供了许多开发者第一次使用 JavaScript 的功能。</p></li><li><p>在网站的开发过程中更早的发现问题。正如我们已经说过的，在现代 web 开发中有许多需要跟踪的地方。AMP 通过提供验证程序来帮我们来管理它们，验证程序用来帮我们找到网站中可能影响性能或访问性的问题。它还可以帮助你学习如何解决发现的问题。</p></li></ul><p>AMP 的好处并不止于页面部署。像谷歌和微软都创建了缓存来存储没有验证错误的 AMP 页面。这些缓存对网站内容进行强大的性能优化，而不会影响到用户体验。缓存过的 AMP 页面还与搜索引擎集成在一起，所以你可以在几秒内甚至更少的时间从搜索结果到你的网站。</p><h4 id="学习-AMP-开发"><a href="#学习-AMP-开发" class="headerlink" title="学习 AMP 开发"></a>学习 AMP 开发</h4><p>学习 AMP 是学习 web 开发的好方法，因为 AMP 站点有：</p><ul><li>使用标准的 HTML，CSS 和 JavaScript 构建</li><li>兼容所有现代浏览器</li><li>不依赖特殊工具或软件来在线部署</li></ul><p>你将在构建 AMP 页面时获得技能，这些页面可以被转移到用其他的格式或者框架构建网站中。跟许多流行的框架一样，AMP 是基于组件的方式来设计和构建网站的。你讲学习到公认的构建最佳体验的网站，开始思考组件，并避免损坏用户的不良体验。这些通用的技能可以应用于整个 web。</p><p>AMP 解决了性能，可访问性和响应式设计问题，让你可以更加关注功能。但是，如果你磨炼你的技能，学习 AMP 也可以帮助你准确的了解 AMP 如何解决这些问题。你也将作为一名开发者继续学习和走向成熟，甚至你的用户享受 AMP 帮助你构建的体验。</p><h2 id="课程介绍"><a href="#课程介绍" class="headerlink" title="课程介绍"></a>课程介绍</h2><h3 id="这个课程适合谁"><a href="#这个课程适合谁" class="headerlink" title="这个课程适合谁"></a>这个课程适合谁</h3><p>这个课程是为了有志向的新开发和希望提高网站性能的的开发设计的。在本课程和以下课程你将：</p><ul><li>向你介绍 AMP 页面和传统“vanilla”网站的区别</li><li>使用实际的 AMP 页面和最佳体验逐步构建一个示例项目</li><li>学习构建现代网站的策略</li></ul><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><p>为了从这些课程中获得收益，你应该对 HTML 和 CSS 有基础的理解。足以识别 HTML 和 CSS 代码，并能够按照练习中的指示进行少量的添加和修改。请注意讲授这些概念超出了本课程的范围。如果需要，你可以在<a href="https://developer.mozilla.org/en-US/docs/Web/HTML" target="_blank" rel="noopener">HTML</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS" target="_blank" rel="noopener">CSS</a>复习这些知识。</p><h3 id="使用-Glitch-来跟踪代码"><a href="#使用-Glitch-来跟踪代码" class="headerlink" title="使用 Glitch 来跟踪代码"></a>使用 Glitch 来跟踪代码</h3><p>为了完成这些课程中的代码示例，我们将使用<a href="https://glitch.com/" target="_blank" rel="noopener">Glitch</a>。Glitch 是一个线上的代码编辑器，它允许你创建和预览网站而不需要在你电脑上安装任何东西。它也允许你创建一个服务，全部都在 Glitch 页面。</p><p>这个 Glitch 代码编辑环境看起来像这样：<br><img src="https://amp.dev/static/img/courses/beginner/image13.png?width=1000&hash=81846846441c0719ea8d81a85b15c447cbe5131d" alt="The online editor of Glitch"></p><p>上面红色的框表明了你可以输入 HTML 和 CSS。绿色的框表示该按钮将带你进入创建页面的实时版本。黄色框的按钮让你可以复制这个项目并修改它。蓝色的框表示你可以使用的文件。在资源文件夹下，你可以找到你的图片。</p><p>在这些课程中，你将需要各种图片来完成练习。所有完成这些课程的图片都会被保存在我们的 Glitch 项目中。要查看项目中的图片，请在 Glitch 编辑器的左侧文件列表中点击资产条目。要获得任何单个图片的链接，请从右侧的资产资产列表中选中该图片。在弹出的弹框中，点击 URL 旁边的赋值按钮。然后你可以在任何需要的地方使用这个链接。<br><img src="https://amp.dev/static/img/courses/beginner/image8.png?width=1000&hash=70e74330b4a3cf41bd91d88ecc2e376d991bf509" alt="The assets view in Glitch"><br><img src="https://amp.dev/static/img/courses/beginner/image12.png?width=1200&hash=7dd67d72f09d12373617986571a37d7b47beeb91" alt="The details pop-up (including URL) for an image in the assets collection"></p><p>在这个课程中，我们将从最基本的 HTML 页面开始。我们将在 Glitch 上创建一个空的项目，其包含一些图片，你稍后需要的服务器代码，带标题和一张图片的 index.html 文件。</p><p>打开<a href="https://glitch.com/edit/#!/nosy-leech" target="_blank" rel="noopener">这个</a>项目开始。点击右上角的“Remix This”按钮创建一个可以编辑的新项目。你可以在本课程和以后的课程继续使用这个编辑器。以后的每门课程都会给你提供该点开始的解决方案参考版本的机会。</p><p>你无需使用 Glitch 来完成这些培训。然而，一些完成练习所需要的代码值包含在 Glitch 示例上。如果你喜欢使用其他编辑器，你仍需要使用 Glitch 示例来找到这些代码。</p><h3 id="设置-AMP-验证器"><a href="#设置-AMP-验证器" class="headerlink" title="设置 AMP 验证器"></a>设置 AMP 验证器</h3><p>为了检测我们 AMP 页面的错误，我们有一个有价值的工具：AMP 验证器。编写有效的 AMP 页面是获得框架全部收益的关键。AMP 验证器可以通过两种方式访问：通过 Chrome 扩展程序，或者是通过在我们的 URL 上添加参数，所以我们需要在代码中内置验证器。就本课程来说，我们建议你使用 Chrome 扩展程序，因为它在构建你网站时更容易使用和访问。</p><ul><li>安装 Chrome 扩展程序，访问<a href="https://chrome.google.com/webstore/detail/amp-validator/nmoffdblmcmgeicmolmhobpoocbbmknc/related?hl=en" target="_blank" rel="noopener">链接</a></li><li>要改为内置的 AMP 验证器，在你 AMP 页面 URL 地址末尾添加#development=1，然后在你浏览器控制台查看结果。如果你使用 Chrome 扩展程序你不需要添加这个参数。</li></ul><h3 id="我们将构建什么"><a href="#我们将构建什么" class="headerlink" title="我们将构建什么"></a>我们将构建什么</h3><p>在我们三个课程中，你将为 Chico 的奶酪自行车商城建立一个网站。Chico 开发一款完全由奶酪制成的革命性自行车。对自行车需求如此之高让 Chico 需要尽可能快的构建一个网站。当我们完成这三门课程，Chico 的网站将看起来这样：<br><img src="https://amp.dev/static/img/courses/beginner/image14.png?width=330&hash=1b27ffdd511e8550ae8920116b236cdf74c50bd0" alt="How the site looks at the end of the Advanced Course"><br>你可以点击<a href="https://nice-consonant.glitch.me/" target="_blank" rel="noopener">这个</a>链接来看到实时的预览。纵观整个网站。我们有视频，注册表单，图片轮播，分享到其他媒体的方式。通过点击左上角的三行图标（也叫做汉堡菜单图标）。一旦菜单展开，点击我们的产品链接导航到产品列表。尝试按照价格对产品列表排序，并按照产品分类过滤产品列表。</p><p>我们选择 Chico 的网站作为我们的模型，因为它提供了我们今天在流行网站上常见的功能集合。它完全使用 AMP 来构建。在这些课程中，我们将从头开始构建此站点。</p><h2 id="我们的第一个-AMP-页面"><a href="#我们的第一个-AMP-页面" class="headerlink" title="我们的第一个 AMP 页面"></a>我们的第一个 AMP 页面</h2><h3 id="开始我们的旅程"><a href="#开始我们的旅程" class="headerlink" title="开始我们的旅程"></a>开始我们的旅程</h3><p>这是我们团队第一天构建 Chico 的奶酪自行车网站。到目前为止，这个网站是基础的 HTML 页面，表头包含网站的标题，一个我们自行车的图片，一些营销文字。<br><img src="https://amp.dev/static/img/courses/beginner/image17.png?width=1000&hash=fe919f49d78010e4d32814e1067b0190b46fc608" alt="Our basic HTML website"><br>在你的 Glitch 项目中，打开 index.html 并查看 HTML：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Chico's Cheese Bicycles<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fcheese-favicon.png?1540228964214<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>headerbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Chico's Cheese Bicycles<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>          <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fricotta-racer.jpg?1540228217746<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>below-hero<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What we're about<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            We sell the only ten-speed bicycles in the world made entirely of            cheese. They get you where you need to go, and you never arrive            hungry. Our bikes are 100% biodegradable. And with our new            rodent-repelling varnish they last longer than ever!          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们团队已经确定使用 AMP 将构建所需要的网站功能更加容易，因此我们的工作是将这个 HTML 页面转换成有效的 AMP 页面。</p><p>首先我们需要将全世界表明我们正在尝试构建 AMP 网站。为此，我们将为 html 标签加上一些装饰。如果 html 标签包含 ⚡ 符号或者单词<code>amp</code>，AMP 验证程序和 AMP 缓存会将我们的网站认为是 AMP 站点。</p><p>在你的 Glitch 项目，添加 ⚡ 符号到 html 标签，像这样：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">⚡</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个符号是必须的。表明我们正在构建 AMP 页面。下一步，我们讨论像 AMP 验证器这样的工具如何帮助我们确定使网站有效需要哪些更改。</p><h3 id="验证和-AMP-缓存"><a href="#验证和-AMP-缓存" class="headerlink" title="验证和 AMP 缓存"></a>验证和 AMP 缓存</h3><p>我们已经多次提到一个概念：编写有效的 AMP。让我们讨论一下它是什么意思，以及为什么它重要。</p><p>首先，有效的 AMP 是很重要，因为它对你的用户有好处。AMP 的规则代表了性能，可访问性和安全的最佳实践。但是验证错误是 AMP 告诉你仍有空间为你的用户改善网站。</p><p>其次，AMP 重要的原因是有用的 AMP 缓存。这个缓存是 AMP 体系结构中重要的组成部分。它是内容分发网络(CDN)，目的是：</p><ul><li>只服务有效的 AMP 页面</li><li>允许 AMP 页面去高效和安全的预加载</li><li>在缓存中的页面上做一些性能优化</li></ul><p>当用户请求你的 AMP 网站，它们可能是从就近的 AMP 缓存服务器发送给它。如果你的网站在 AMP 缓存中，那么当你使用 Google 之类的搜索引擎时，可以高效的预加载在到后台。如果用户在搜索结果中选中你的网站，即使连接不良，它也会在几秒内显示出来，这个 AMP 缓存将你站点上执行自动优化，例如：</p><ul><li>缓存字体</li><li>缓存和压缩图片，转换它们成 WebP 这样的新格式</li><li>对 AMP 文档消毒以阻止跨站脚本攻击或者其他漏洞</li><li>修复可能导致在各种浏览器下渲染不一致的 HTML 问题;例如，关闭所有标签，小写属性名或者转义文本</li></ul><p>当你使用 AMP 构建网站并完成这些训练中的练习时，检查保证你的网站有效。为了跟踪这些验证错误，我将使用在<a href="https://amp.dev/zh_cn/documentation/courses/beginning-course/course-introduction/?format=websites&level=beginner#setting-up-the-amp-validator" target="_blank" rel="noopener">课程介绍</a>中已经安装的 AMP 验证器。</p><h3 id="练习-1：使用-AMP-验证器"><a href="#练习-1：使用-AMP-验证器" class="headerlink" title="练习 1：使用 AMP 验证器"></a>练习 1：使用 AMP 验证器</h3><p>安装 AMP 验证器 chrome 扩展程序之后，这个验证器将自动在你打开的任何带有 html 标签中包含 AMP 符号(⚡)的页面上运行，像我们现在这样。打开你的 Glitch 项目并查看 AMP 验证器扩展程序的图标。它应该看起来类似于红色上有一个徽章，表明了有 7 个验证错误。<br><img src="https://amp.dev/static/img/courses/beginner/image6.png" alt="The AMP Validator Chrome extension showing AMP issues."><br>点击 AMP 验证器的图标打开弹窗，显示当前页面的验证错误列表，并给出这些错误可能的解决方案。<br><img src="https://amp.dev/static/img/courses/beginner/image22.png?width=2500&hash=7ee74f950b8b863213940e0dc221a38a4c7c850c" alt="The issues displayed in the AMP Validator Chrome Extension."><br>img 标签这一项：</p><pre><code>The tag &lt;img&gt; may only appear as a descendant of tag &#39;noscript&#39;. Did you mean &#39;amp-img&#39;?</code></pre><p>点击这一项末尾的 Debug 链接。这个 Debug 链接将带你直接跳转到你页面上包含这个错误的代码行。它帮助你在你文件中找到遇到的错误，并提供所需的上下文来理解如何解决这个错误。不用担心，这个消息现在似乎尚不清楚，但这很容易解决。我们需要使用 AMP 组件 <amp-img> 来替换 HTML 标签 <img> 。在本课程的<a href="https://amp.dev/zh_cn/documentation/courses/beginning-course/thinking-in-components/?format=websites&level=beginner" target="_blank" rel="noopener">组件的思考</a>这一节中，我们将探索为什么会出现这个错误，<amp-img> 是什么，然后如何解决它。<br><img src="https://amp.dev/static/img/courses/beginner/image16.png?width=2500&hash=73a6f348dbdad8011aa80519378e74a8c4442b14" alt="AMP debugger showing an error inline."><br>对于其他的验证错误项，点击”Learn more”的链接标签。这个链接将你从错误描述中转到响应的 AMP 文档，帮助你修复这个问题。<br><img src="https://amp.dev/static/img/courses/beginner/image21.png?width=1750&hash=06f514eceeae89e6bf72c99bfc23ea619f71f6af" alt="AMP documentation reached via the “Learn more” link in the AMP Validator."><br>下一步是修复这些验证问题。为此，我们需要更加的了解 AMP 页面必要的元素。除了向我们的 HTML 中添加闪电符号之外我们还需要做更多的事情创建一个有效的 AMP 页面。</p><h3 id="AMP-页面的剖析"><a href="#AMP-页面的剖析" class="headerlink" title="AMP 页面的剖析"></a>AMP 页面的剖析</h3><p>每个页面都以相同的基础模板开头。然后我们自定义并从那里构建页面。这个入门模板有时候叫做 AMP 样板。这个样板是设置 AMP 运行时并帮助 AMP 页面运行的更加平滑的标签组合。</p><p>在这一节，我们将对 AMP 样板的每个部分都进行一些解释。然而，你无需记住在你用 AMP 创建的每个页面添加这些标签。你可以简单的用这个样板开始构建 AMP 页面。</p><p>下面的这些标签是 AMP 页面必须的。有效的 AMP 页面一定包含：</p><ul><li>从 <code>&lt;!doctype html&gt;</code> doctype 开始</li><li>包含 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签</li><li><code>&lt;head&gt;</code> 内的第一个标签是 <code>&lt;meta charset=&quot;utf-8&quot;&gt;</code> 标签</li><li>在 <code>&lt;head&gt;</code> 标签中包含 <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,minimum-scale=1,initial-scale=1&quot;&gt;</code>。注意：建议 initial-scale=1</li></ul><p>下面这些规则专门用于设置 AMP 运行时。验证 AMP 页面一定包含：</p><ul><li>包含一个顶层的<code>&lt;html ⚡&gt;</code>标签。这个闪电象征符号表明它是一个 AMP 站点。注意：<code>&lt;html amp&gt;</code>也接受。</li><li>在它们的<code>&lt;head&gt;</code>标签中包含一个<code>&lt;script async src=&quot;https://cdn.ampproject.org/v0.js&quot;&gt;&lt;/script&gt;</code>标签。加载 AMP JavaScript 库。注意：作为最佳实践，你应该在<code>&lt;head&gt;</code>中尽量早的包含这个脚本。</li><li>在<code>&lt;head&gt;</code>中包含一个<code>&lt;link rel=&quot;canonical&quot; href=&quot;$SOME_URL&quot;&gt;</code>标签。如果存在指向常规的 HTML 版本，或者如果不存在非 AMP 的版本就指向自身。注意：你应该在你页面上替换<code>$SOME_URL</code>为真实的地址。</li><li>在<code>&lt;head&gt;</code>标签中包含 AMP 样式的样板代码。该 CSS 在页面上隐藏直到 AMP 库加载完成。以下是 AMP 样式的样板代码：</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">amp-boilerplate</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>    <span class="token property">-moz-animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>    <span class="token property">-ms-animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>    <span class="token property">animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>    <span class="token selector">from </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token atrule"><span class="token rule">@-moz-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>    <span class="token selector">from </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token atrule"><span class="token rule">@-ms-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>    <span class="token selector">from </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token atrule"><span class="token rule">@-o-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>    <span class="token selector">from </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token atrule"><span class="token rule">@keyframes</span> -amp-start</span> <span class="token punctuation">{</span>    <span class="token selector">from </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">to </span><span class="token punctuation">{</span>      <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token selector">&lt;/style>&lt;noscript  >&lt;style amp-boilerplate>    body </span><span class="token punctuation">{</span>      <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">-moz-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">-ms-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token property">animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS-和-AMP"><a href="#CSS-和-AMP" class="headerlink" title="CSS 和 AMP"></a>CSS 和 AMP</h3><p>CSS 自定义你网站的外观。你将几乎总是添加自定义样式到你的 AMP 页面上。不过，注意 AMP 对 CSS 的使用做了一些限制：</p><ul><li>样式只能存在于<code>&lt;style amp-custom&gt;</code>标签内的文档头，或在需要时作为内联样式使用。这个限制阻止加载外部样式表，但是也保存网络请求，启用缓存并提高性能。</li><li>一个 AMP 页面只能包含一个<code>&lt;style amp-custom&gt;</code>标签(装饰的样式标签)</li><li>一个页面最多包含 75k 的 css</li><li><code>!important</code>规则受限制</li><li>更多的关于 CSS 规则的限制，请查看<a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/develop/style_and_layout/style_pages/?format=websites" target="_blank" rel="noopener">此处</a>的文档</li></ul><p>要练习将自定义的样式添加到 AMP，请在<code>&lt;head&gt;</code>的页面上添加<code>&lt;style amp-custom&gt;</code>标签，看看会发生什么。完成后，你可以从你的页面中删除它。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">amp-custom</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">body </span><span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">1.5</span>rem<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">p,  h2 </span><span class="token punctuation">{</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px dotted red<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://amp.dev/static/img/courses/beginner/image10.png?width=560&hash=e71123278226e4245149ac2b1d9f11ea83a1f484" alt="Custom CSS affecting our page."></p><h3 id="练习-2：转换我们-HTML-页面的剩余部分"><a href="#练习-2：转换我们-HTML-页面的剩余部分" class="headerlink" title="练习 2：转换我们 HTML 页面的剩余部分"></a>练习 2：转换我们 HTML 页面的剩余部分</h3><p>现在是时候修正上一节练习在我们网站上发现的验证错误了。为此，我们需要给我们基础 HTML 网站添加缺失的 AMP 样板代码。</p><p>对此以及所有以后的练习，我们将应用所学的知识对我们的 Glitch 网站上的真实代码进行更改。我们会给你一些提示。在每次练习结束之后，我们将给出一个完整的解决方案。尝试依靠自己完成练习，但是如果你卡主了或者是需要提示，可以随时从解决方案一节中复制代码。</p><p>另外，在每一节课程的开头和末尾，我们提供一个包含我们到此为止完成的所有的代码。如果你丢失了当前的 Glitch 页面或者想从我们的解决方案开始，你可以从 Glitch 示例中复制代码，或者重新混合这些示例并从那里继续前行。</p><p>使用 AMP 的<a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/start/create/basic_markup/?format=websites" target="_blank" rel="noopener">文档</a>和上面的注释，更新你的 Glitch 项目，你会发现只有<code>&lt;img&gt;</code>标签验证错误依旧存在。另外，为了帮助我们构建 Chico 的奶酪自行车网站，我们已经提供了一些样式，可以在整个培训中使用。如果你打开<a href="https://pastebin.com/vNws2bA1" target="_blank" rel="noopener">这个</a>页面，<code>&lt;style amp-custom&gt;</code>标签包含你所需的样式。你应该复制这些样式到你正在工作的项目中去。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>可以在[<a href="https://glitch.com/~hungry-modem]这个" target="_blank" rel="noopener">https://glitch.com/~hungry-modem]这个</a> Glitch 示例中找到解决方案。这个页面包含改动的部分应该如下所示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">async</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.ampproject.org/v0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Chico's Cheese Bicycles<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>    <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span>    <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fcheese-favicon.png?1540228964214<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>    <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,minimum-scale<span class="token punctuation">=</span>1,initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canonical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://hungry-modem.glitch.me/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">amp-boilerplate</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>      <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>      <span class="token property">-moz-animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>      <span class="token property">-ms-animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>      <span class="token property">animation</span><span class="token punctuation">:</span> -amp-start <span class="token number">8</span>s <span class="token function">steps</span><span class="token punctuation">(</span><span class="token number">1</span>, end<span class="token punctuation">)</span> <span class="token number">0</span>s <span class="token number">1</span> normal both<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@-webkit-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>      <span class="token selector">from </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">to </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@-moz-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>      <span class="token selector">from </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">to </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@-ms-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>      <span class="token selector">from </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">to </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@-o-keyframes</span> -amp-start</span> <span class="token punctuation">{</span>      <span class="token selector">from </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">to </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token atrule"><span class="token rule">@keyframes</span> -amp-start</span> <span class="token punctuation">{</span>      <span class="token selector">from </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token selector">to </span><span class="token punctuation">{</span>        <span class="token property">visibility</span><span class="token punctuation">:</span> visible<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span>    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">amp-boilerplate</span><span class="token punctuation">></span></span><span class="token style language-css">      <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">-moz-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">-ms-animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token property">animation</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span>  <span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">amp-custom</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">...</span> styles elided due to length <span class="token number">...</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="一个几乎有效的-AMP-页面"><a href="#一个几乎有效的-AMP-页面" class="headerlink" title="一个几乎有效的 AMP 页面"></a>一个几乎有效的 AMP 页面</h3><p>如果你完成了上述的所有练习，恭喜！你的页面几乎是一个有效的 AMP 页面。如果你打开你的页面并打开 Chrome DevTools(<code>Command+Option+I 在Mac上 或者 Control+Shift+I 在Windows/Linux</code>)并选中 Console 标签页，你应该在控制台中看到这个消息，表示这个 AMP 库被成功的加载了：</p><pre><code>Powered by AMP ⚡ HTML</code></pre><p>接下来，如果你打开 AMP 验证扩展程序，会显示我们犯下了最后一个错误：</p><pre><code>The tag &#39;img&#39; may only appear as a descendant of tag &#39;noscript&#39;. Did you mean &#39;amp-img&#39;?</code></pre><p>这是需要理解的重要错误。一些 HTML 标签不允许出现在 AMP 文档中。在某些情况下，AMP 要求你使用其他来替换。我们叫一些自定义非 HTML 标签的标签为”组件“，并且我们将稍后在本训练的下一节来讨论它们。</p><h2 id="组件思考"><a href="#组件思考" class="headerlink" title="组件思考"></a>组件思考</h2><h3 id="添加功能给我们的网站"><a href="#添加功能给我们的网站" class="headerlink" title="添加功能给我们的网站"></a>添加功能给我们的网站</h3><p>到目前为止，我们将基础的 HTML 网站转化成了基础的 AMP 网站。目前我们的网站上仍有一个错误，我们将使用<code>&lt;amp-img&gt;</code>组件来替换<code>&lt;img&gt;</code>标签来修复这个错误。解决最后一个验证问题之后，我们将学习到上面是 AMP 组件，为什么某些 HTML 标签在 AMP 中被替换或禁止，以及如何为我们的网站中添加组件。</p><p>之后，是时候向我们的网站上添加额外的功能了。为了完成 Chico 的奶酪自行车首页的初始版本，我们将添加一些额外的营销内容。团队决定添加一个关于如何制作奶酪自行车的 YouTube 视频，一个各种奶酪自行车产品的图片轮播以及一些社交媒体链接，帮助用户分享我们的网站到它们喜欢的社交网络上。</p><p>看起来这么快的向我们的网站上添加这么多内容令人害怕。我们应该创建 HTML，CSS 和 JavaScript 来满足我们想要添加功能的要求（例如如何更改轮播图的滑动）。然后，我们来考虑如何提升整个站点的性能。</p><p>但是这是 AMP 之美。使用 AMP，我们不需要担心所有这些细节！AMP 库作者为我们提供了这些功能的插入构建块，并关心质量像性能、可访问性和安全。这些块本称之为组件，它们是 AMP 成功的关键。</p><h3 id="什么是-Web-组件？"><a href="#什么是-Web-组件？" class="headerlink" title="什么是 Web 组件？"></a>什么是 Web 组件？</h3><p>组件是构建 Web 的块。它们代表结构（HTML）、样式（CSS）和行为（JavaScript）的组合，并具有很容易在自己网站中使用和与其他人分享的接口。组件有如下特征：</p><ul><li>一个名字(如<code>&lt;amp-img&gt;</code>)，如 tag 名一样来确定一个组件</li><li>自定义属性，可以改变行为，样式，或者组件内容（如 width,height,src 和 attribution）</li><li>事件，可以捕获组件的用户输入（属性 on）</li></ul><p>可选的，组件也有”children”。在这里,”children”引用了内容(像文本，HTML 标签或者其他组件)被放置在组件的打开和闭合标签之间。这些 children 的显示内容因每个组件不同而不一样。</p><p>AMP 组件系统让你用最小的努力帮助你快速的构建高效且响应迅速的功能到页面上。这个组件库提供了一个完整的组件列表给你使用。有用于构建表单和轮播图的组件，用于集成页面分析，用于向服务器发送 XHR 请求的组件，等等。扩展性几乎是无限的。你可以在 AMP 组件参考<a href="https://amp.dev/zh_cn/documentation/components/?format=websites" target="_blank" rel="noopener">这里</a>看到完整的组件列表。</p><p>举例，这里是我们网站时使用的 3 个 AMP 组件：<br>| AMP component | How it renders on our site |<br>| —- | —– |<br>| <code>&lt;amp-img src=&quot;IMG-URL&quot; layout=&quot;responsive&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/amp-img&gt;</code> | <img src="https://amp.dev/static/img/courses/beginner/image14.png?width=1000&hash=1b27ffdd511e8550ae8920116b236cdf74c50bd0" alt=""> |</p><p>|<code>&lt;amp-twitter width=&quot;486&quot; height=&quot;657&quot; layout=&quot;responsive&quot; data-tweetid=&quot;ID&quot;&gt;&lt;/amp-twitter&gt;</code>|<img src="https://amp.dev/static/img/courses/beginner/image19.png?width=1000&hash=af27220195f943de1cd2b4815e76acf8ed7dd045" alt=""> |<br>|<code>&lt;amp-youtube data-videoid=&quot;ID&quot; layout=&quot;responsive&quot; width=&quot;480&quot; height=&quot;270&quot;&gt;&lt;/amp-youtube&gt;</code>|<img src="https://amp.dev/static/img/courses/beginner/image15.png?width=1000&hash=8b870c5a1cfb74d64993f9841a08814e7eac0fc3" alt=""> |</p><p>建立 AMP 站点的目的是尽可能的使用 AMP 组件。组件使得构建的 AMP 的性能优势最大化，因为你不需要创建已有的组件，从而利用 AMP 库作者的工作。</p><p>几乎所有的 AMP 组件都由至少一些 JavaScript 运行。对于某些 AMP 组件(如<code>&lt;amp-img&gt;</code>)，这个 JavaScript 直接内置到了 AMP 运行时脚本中，该脚本包含在页面的样式代码的顶部。对于大多数 AMP 组件，你需要包含单独的 script 标签。一个充分的理由是：你只包含你网站上真正需要的脚本。然后，用户只需要下载浏览页面所需要的代码。越少的代码下载意味着你的网站加载更快。</p><h3 id="练习-3：我们的第一个组件"><a href="#练习-3：我们的第一个组件" class="headerlink" title="练习 3：我们的第一个组件-"></a>练习 3：我们的第一个组件-<amp-img></h3><p>大多数 HTML 标签可以被直接在 AMP 中使用，像<code>&lt;img&gt;</code>标签，一定要替换成等效的 AMP 组件。这些组件结合了可访问性，响应能力和性能的内置最佳实践。</p><p>例如，在<code>&lt;amp-img&gt;</code>的情况下，AMP 要求我们去指定图片的尺寸。AMP 需要在资源(如 images)加载之前知道页面的布局。它可以提高在页面正在加载，图片资源还没有下载完成之前的用户体验。当图片下载完，可以将它插入到页面而不会造成页面上已存在的内容四处移动。它给 AMP 运行时空间去决定根据用户设备的能力和网络连接情况何时去加载网络图片资源。</p><p>要使用该组件来解决早起的<code>&lt;amp-img&gt;</code>验证错误，用 AMP 等效组件来替换页面中已存在的 img 标签。注意：编写<code>&lt;amp-img ...&gt;</code>而不是<code>&lt;img ...&gt;</code>需要给你的图片指定尺寸。给图片一个宽 640，高 480。</p><p>如果需要，<a href="https://amp.dev/zh_cn/documentation/components/amp-img/?format=websites" target="_blank" rel="noopener">参考</a>这里的<code>&lt;amp-img&gt;</code>文档。</p><h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>页面中包含的图片部分应该如下所示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fricotta-racer.jpg?1540228217746<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>”640”<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;/amp-img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排列和调整组件大小"><a href="#排列和调整组件大小" class="headerlink" title="排列和调整组件大小"></a>排列和调整组件大小</h3><p>下一个我们需要解决的问题是我们页面的外观。你不会在大的桌面显示器上注意到它，但是当我们在移动设备上查看我们的网站时就很容易看到问题所在。<br><img src="https://amp.dev/static/img/courses/beginner/image23.png?width=1000&hash=de743706d2eb97cf44b26e9f3945e2657bb88f2f" alt="自行车的图片超出了屏幕边缘"></p><p>我们添加到页面的图片不会缩小以适应更小的屏幕；它会溢出边缘。如果我们没有指定布局图片和调整大小的策略，它将默认按照我们代码中指定的宽高来固定。幸运的是，我们可以使用 AMP 的布局系统来解决这个问题。</p><p>我们将给我们的图片指定响应类型的 layout 属性，使其自动根据窗口调整大小来缩放。响应式布局假设图片为父容器的尺寸，同时遵循原始尺寸的长宽比。如果父容器只有 320 像素的宽，图片将维持长宽比并调整成 320<em>240(而不是 640</em>480)。</p><p>添加 layout 属性到我们的图片。如果正确完成，它看起来像这样：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fricotta-racer.jpg?1540228217746<span class="token punctuation">"</span></span>  <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>640<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-img</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在你完成改动之后，看下你的页面。图片会正确的按照长宽比，响应式的根据屏幕宽度去填充显示。问题解决。<br><img src="https://amp.dev/static/img/courses/beginner/image26.png?width=1000&hash=c8df8c9c35ded613d440e108b6664d8d724fd9f1" alt="纵横比正确的自行车图片"></p><p>除了<code>responsive</code>之外还有其他布局类型(实际上至少总共有 8 种)。例如，<code>fixed</code>布局表明组件永远不会调整分配给它的宽和高。<code>intrinsic</code>布局和<code>responsive</code>布局类似，除了它具有组件不能超过固有宽高的概念。某些布局只能应用于某些组件上。每个组件的文档将会指定那些布局对它有效。你可以在<a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/learn/amp-html-layout/layouts_demonstrated/?format=websites" target="_blank" rel="noopener">这里</a>查看看剩下的布局类型。</p><p>如果你想成为一个成功的 AMP 开发者，学习如何使用布局系统是关键。所有 AMP 提供的布局系统都可以用纯 CSS 去实现，但是通常它们很复杂或者有复杂的边界情况要求很深入的知识来解决。AMP 简化了过程并暴露一些选项，可以在你 AMP 页面上任何元素上使用。查看<a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/learn/amp-html-layout/?format=websites" target="_blank" rel="noopener">官方文档</a>学习更多的布局系统知识。</p><h3 id="练习-4：嵌入视频"><a href="#练习-4：嵌入视频" class="headerlink" title="练习 4：嵌入视频"></a>练习 4：嵌入视频</h3><p>下一步，来嵌入 YouTube 视频到我们的文档中。我们的营销团队发布了<a href="https://www.youtube.com/watch?v=BlpMQ7fMCzA" target="_blank" rel="noopener">这个</a>视频，来展示我们正在生产一款奶酪自行车。</p><p>使用这份<code>&lt;amp-youtube&gt;</code>文档嵌入这个 YouTube 视频放到<code>&lt;amp-imp&gt;</code>组件之后：</p><ul><li>设置视频 id 为<code>BlpMQ7fMCzA</code></li><li>使得视频布局<code>responsive</code></li><li>注意：不要忘记添加这个脚本到<code>&lt;head&gt;</code>中</li></ul><p>推荐样式指南：</p><ul><li>设置元素宽度 480，高度 270</li></ul><p>你更改之后，看下页面。你现在应该可以看到 YouTube 视频：<br><img src="https://amp.dev/static/img/courses/beginner/image18.png?width=1000&hash=42af1c8df34f27b866b35d7bc78c6754762e4de4" alt="页面中YouTube视频的图像"></p><h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-youtube</span>  <span class="token attr-name">data-videoid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BlpMQ7fMCzA<span class="token punctuation">"</span></span>  <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>270<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-youtube</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记住在<code>&lt;head&gt;</code>中包含<code>&lt;amp-youtube&gt;</code>脚本：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">async</span>  <span class="token attr-name">custom-element</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amp-youtube<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.ampproject.org/v0/amp-youtube-0.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="找到正确的组件"><a href="#找到正确的组件" class="headerlink" title="找到正确的组件"></a>找到正确的组件</h2><h3 id="浏览-AMP-组件文档"><a href="#浏览-AMP-组件文档" class="headerlink" title="浏览 AMP 组件文档"></a>浏览 AMP 组件文档</h3><p>到目前为止，我们使用的组件非常简单。对于<code>&lt;amp-img&gt;</code>和<code>&lt;amp-youtube&gt;</code>通过这篇文档的学习足够了，查看示例，然后复制代码到我们的网站。对于某些组件的高级功能，或者对更复杂的组件，我们将从这篇文档中读取和吸收更多的信息。</p><p>为了更高效的开发 AMP 网站，学会如何浏览 AMP 组件文档非常重要。在本系列的每个培训中广泛的练习这个技能。</p><p>下一步，我将添加奶酪自行车产品的图片集合供用户去滚动。对此，我们将使用一个图片轮播图组件。轮播图组件是一个包含一组子项的元素，它们滑动起来像幻灯片放映。轮播图的 AMP 实现是<code>&lt;amp-carousel&gt;</code>。这个组件不是内置的，所以你需要添加它的脚本到页面的<code>&lt;head&gt;</code>中。</p><p>当我们查看<code>&lt;amp-carousel&gt;</code>的<a href="https://amp.dev/zh_cn/documentation/components/amp-carousel/?format=websites" target="_blank" rel="noopener">文档</a>时，我们将寻找下面问题的答案：</p><ul><li>这个组件做什么？</li><li>我应该如何使用这个组件？</li><li>我应该如何使用属性来定制这个组件？</li><li>我应该如何改变这个组件的样式？</li><li>我们需要引用外部的脚本来启用这个组件吗？</li><li>这个组件支持哪些布局类型？</li></ul><p><img src="https://amp.dev/static/img/courses/beginner/image25.png?width=1750&hash=a70b70e161b20fc05d42dd6afac1f928c28c076b" alt="AMP documentation page fo carousel"><br>查看<code>&lt;amp-carousel&gt;</code>文档的下面各项：</p><ul><li><strong>描述</strong> - 每个组件文档的顶部是一个简单的介绍。总结了这个组件是什么，以及它存在的理由。</li><li><strong>行为 behavior</strong> - 这一节解析了组件是如何实现的。通常提供了示例代码和它的展示效果</li><li><strong>列出的属性</strong> - 我们在 web 组件的上一节讨论了自定义属性。它允许我们用某些方式来自定义我们的 AMP 组件。这一节包含了不同属性的列表，它们可能的值，以及这些值控制什么。</li><li><strong>样式 styling</strong> - 这一节解释了如何使用 CSS 来改变组件的外观。除了通过标签名和 id 来设置样式，许多组件提供了额外的 CSS 类名，在某些状态下使用它来改变组件的外观。例如，<code>&lt;amp-carousel&gt;</code>提供了类<code>.amp-carousel-button</code>，允许开发者重新调整改变轮播图滑动的按钮的样式。</li><li><strong>要求的脚本标签</strong> - 置于文档的顶部，这个标签需要添加我们网站的顶部让这个正常工作。许多组件都需要这些脚本才能正常工作。</li><li><strong>支持的布局类型</strong> - 我们在上一节讨论了<a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/learn/amp-html-layout/layouts_demonstrated/?format=websites" target="_blank" rel="noopener">布局</a>属性。它控制屏幕上这个元素的显示。这一节解释了那些布局类型对这个组件有效。</li></ul><p>几乎所有的 AMP 组件的文档都列出了这些项。让我们来探索其中一个示例的文档：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-carousel</span>  <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>carousel-with-preview<span class="token punctuation">"</span></span>  <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span>  <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>  <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slides<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/image1.jpg<span class="token punctuation">"</span></span>    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>    <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>apples<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-img</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/image2.jpg<span class="token punctuation">"</span></span>    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>    <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lemons<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-img</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/image3.jpg<span class="token punctuation">"</span></span>    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>450<span class="token punctuation">"</span></span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>    <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blueberries<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-carousel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个轮播图包含了 3 张图片用于提供给用户滑动。这个轮播图组件的实例的属性（id,width,height,layout,和 type）被拆分成 3 组：<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes" target="_blank" rel="noopener">所有 HTML 元素共有的属性</a>(id),<a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/learn/common_attributes/?format=websites" target="_blank" rel="noopener">所有 AMP 组件共有的属性</a>(width,height,和 layout)，轮播图组件特有的属性(type)。</p><p>在<code>&lt;amp-carousel&gt;</code>的文档中，我们看到组件有 type 属性。它显示 type 的有效输入包括 slides 和 carousel。</p><p>这意味着如果你不指定 type，它的默认值将是 carousel。</p><p>许多其他自定义的属性可以被用到<code>&lt;amp-carousel&gt;</code>组件上。当第一次使用 AMP 组件时，查看文档以了解通过哪些方式你可以通过这些属性自定义组件的行为和外观。</p><h3 id="练习-5：创建一个图片幻灯片"><a href="#练习-5：创建一个图片幻灯片" class="headerlink" title="练习 5：创建一个图片幻灯片"></a>练习 5：创建一个图片幻灯片</h3><p>来练习通过这篇文档添加<code>&lt;amp-carousel&gt;</code>到我们的项目。添加一个带有下面设置的轮播图到<code>&lt;p class=&quot;main-text&quot;&gt;</code>:</p><ul><li>给轮播图一个<code>responsive</code>的布局</li><li>给轮播图 type 设置为 slides</li><li>添加三张图片到轮播图：<code>assets/cheddar-chaser.jpg</code>,<code>assets/cheese.jpg</code>和<code>assets/mouse.jpg</code>。</li><li>如果用户尝试从最后一张滚动，轮播图图片回到开始</li></ul><p>推荐样式指南：</p><ul><li>给轮播图宽 412 和高 309</li><li>给每张图片宽 412 和高度 309</li></ul><p>在你做这些改动之后，查看实时页面来检查你的成果。你的页面看起来像这样：<br><img src="https://amp.dev/static/img/courses/beginner/image9.png?width=1000&hash=ac6a95075bd0b8e33800dd14a2d399b0c6d299be" alt="The carousel in our page."></p><h4 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h4><p>这里是你添加到项目中的代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-carousel</span> <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>412<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>309<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slides<span class="token punctuation">"</span></span> <span class="token attr-name">loop</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fcheddar-chaser.jpg?1540228205366<span class="token punctuation">"</span></span>    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>412<span class="token punctuation">"</span></span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>309<span class="token punctuation">"</span></span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-img</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fcheese.jpg?1540228223785<span class="token punctuation">"</span></span>    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>412<span class="token punctuation">"</span></span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>309<span class="token punctuation">"</span></span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-img</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.glitch.com/d7f46a57-0ca4-4cca-ab0f-69068dec6631%2Fmouse.jpg?1540228223963<span class="token punctuation">"</span></span>    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>412<span class="token punctuation">"</span></span>    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>309<span class="token punctuation">"</span></span>    <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-carousel</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记住在<code>&lt;head&gt;</code>中引入<code>&lt;amp-carousel&gt;</code>组件：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">async</span>  <span class="token attr-name">custom-element</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amp-carousel<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.ampproject.org/v0/amp-carousel-0.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发现新组件"><a href="#发现新组件" class="headerlink" title="发现新组件"></a>发现新组件</h3><p>当我们继续开发我们的奶酪自行车网站，我们不会一直知道添加我们想要的功能的 AMP 组件的名字。AMP 社区已经生产了大量用于处理不同功能的组件：广告和分析，动态内容，布局，媒体，展示和社会。典型的是当开发一个 AMP 站点给了一些新功能的要求，然后在通过在 AMP 组件的列表中检索出符合要求的组件。</p><p>第一种方式发现新 AMP 组件是使用你最喜欢的搜索引擎或者是在 AMP 项目<a href="https://amp.dev/" target="_blank" rel="noopener">网站</a>上使用搜索功能。这种方式适合你已经知道名字直接跳转到组件的文档。另外，你可以搜索你感兴趣的组件描述去找结果。举例，搜索“YouTube 视频”，第一个搜索结果是<code>&lt;amp-youtube&gt;</code>。类似，搜索“可折叠内容”，<code>&lt;amp-accordion&gt;</code>组件是第一个结果。</p><p>另外一种寻找组件的方式是使用<a href="https://amp.dev/zh_cn/documentation/components/?format=websites" target="_blank" rel="noopener">AMP Components Reference</a>页面。它包含了 AMP 支持的组件列表。每个组件的入口包含了组件的名字和这个组件能提供的功能的简单描述。我们可以通过点击它的名字去访问这个组件的文档。正如我们之前学习到的，这个文档将给你对这个组件的行为更深的了解。基于这些信息，我们应该可以决定这个组件是否满足我们的需求或者是否去搜索其他组件。在后面的培训中，我们将讨论如果没有组件符合我们的需求该怎么做。<br><img src="https://amp.dev/static/img/courses/beginner/image3.png?width=1750&hash=76dae16d0d5be7f067c1ba8ca1e20ab3de4b88f1" alt="The AMP Component Reference page."></p><p>最后，我们可能仍然对这些组件如何在我们网站上运作有点疑问，或者我们不清楚在更复杂的场景中如何使用组件。在 amp.dev 上<a href="https://amp.dev/zh_cn/documentation/examples/?format=websites" target="_blank" rel="noopener">AMP By Example</a>的页面展示了许多 AMP 组件，显示了这些组件的各种方式来满足现代网站的用户场景。通常，你可以从组件的文档转到响应的 AMP by Example 页面上。<br><img src="https://amp.dev/static/img/courses/beginner/image7.png?width=1750&hash=de5b63554527c405e24ebf9b5c7696b31770aba3" alt="AMP By Example page for the amp-carousel component."></p><h3 id="练习-6：添加社交分享链接"><a href="#练习-6：添加社交分享链接" class="headerlink" title="练习 6：添加社交分享链接"></a>练习 6：添加社交分享链接</h3><p>在现代 web 页面社交媒体链接是很常见的。AMP 提供了一个准备好链接的按钮允许用户通过一次点击来分享你的页面到他的社交媒体上，从而帮你您提供用户的参与度。</p><p>使用 AMP 文档，添加按钮到<code>&lt;amp-youtube&gt;</code>之后让用户通过一次点击来分享我们的页面。然而，你将需要在<a href="https://amp.dev/zh_cn/documentation/components/?format=websites" target="_blank" rel="noopener">AMP Components Reference</a>上寻找相应的 AMP 组件。（<strong>注意</strong>：这一节的标题应该是帮助你寻找到你想要的组件）。</p><p>一旦你定位到正确的的组件，点击组件的名字访问它的文档。使用这个文档添加这样的组件：</p><ul><li>给用户选项来在下面的平台分享你的页面：Email，LinkedIn，Tumblr，和 Twitter。</li></ul><p>推荐样式指南：</p><ul><li>使用带 social-bar 的样式的 div 包裹 AMP 组件</li><li>给每个 AMP 组件设置 width 和 height 为 44</li></ul><p>在你完成这个任务之后，你的页面应该包含用户可以分享你页面的按钮：<br><img src="https://amp.dev/static/img/courses/beginner/image19.png?width=680&hash=af27220195f943de1cd2b4815e76acf8ed7dd045" alt="Social media buttons embedded in the page."></p><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>social-bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-social-share</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-social-share</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-social-share</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>linkedin<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-social-share</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-social-share</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tumblr<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-social-share</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-social-share</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twitter<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>44<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-social-share</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记住在<code>&lt;head&gt;</code>上引用<code>&lt;amp-social-share&gt;</code>脚本</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">async</span>  <span class="token attr-name">custom-element</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amp-social-share<span class="token punctuation">"</span></span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.ampproject.org/v0/amp-social-share-0.1.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结论和下一步"><a href="#结论和下一步" class="headerlink" title="结论和下一步"></a>结论和下一步</h2><p>恭喜！你已经完成了 AMP 初学者的课程，并成功创建你的第一个 AMP 页面。</p><p>反思一下到目前为止的构建。你已经创建了一个引人入胜的 AMP 网页，有图片，轮播图和视频。想一想我们不需要做的工作，像编写 JavaScript 允许我们跟踪轮播图当前滑动的哪一张，或者计算如何包装我们的轮播图从最后一张滑到第一张。我们没有沉迷于细节和繁琐的工作，而是专注于关注构建出让我们蓬勃发展的奶酪自行车业务更加高效的网站。</p><p>正如你课程中所看到的，大多数现代化网站有的功能都有对应的 AMP 组件。就像我们目前所做的那样，我们通常只需要少量的额外代码就可以使用这些组件来构建出完整功能的网站。在这个课程中，你需要学习如何找到并使用 AMP 组件来构建出简单的用户页面。向你介绍了 AMP 的简单和强大和它提供的工具。最后，你学习了 AMP 验证器以及它在启用 AMP 缓存的作用性。在我们下面的课程中，我们将学习如何处理用户输入和事件，如何在 AMP 组件上调用 action 去改变它的状态和外观，如何组合多个 AMP 组件来只做出更加精良的用户页面。我们将继续在 Chico 的奶酪网站上扩大规模，让 Chico 有机会去打动爱好奶酪自行车的人。</p><p><a href="https://aquamarine-baritone.glitch.me/" target="_blank" rel="noopener">这里</a>是今天我们构建的完成版本。<br>以下是其他额外话题和链接去探索：</p><ul><li><a href="https://amp.dev/zh_cn/documentation/examples/?format=websites" target="_blank" rel="noopener">AMP By Example</a></li><li><a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/optimize-and-measure/discovery/?format=websites" target="_blank" rel="noopener">All about Page Discovery</a></li><li><a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/learn/spec/amphtml/?format=websites#html-tags" target="_blank" rel="noopener">Disallowed HTML Tags</a></li><li><a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/develop/style_and_layout/style_pages/?format=websites" target="_blank" rel="noopener">Restricted CSS Rules &amp; Animations</a></li><li><a href="https://amp.dev/zh_cn/documentation/guides-and-tutorials/start/create/basic_markup/?format=websites" target="_blank" rel="noopener">The AMP Boilerplate</a></li><li><a href="https://amp.dev/zh_cn/documentation/components/?format=websites" target="_blank" rel="noopener">List of available AMP Components</a></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="解释样板-AMP-HTML"><a href="#解释样板-AMP-HTML" class="headerlink" title="解释样板 AMP HTML"></a>解释样板 AMP HTML</h3><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a><link rel="canonical">标签</h4><p>AMP 刚开始时，它仅用于创建用于移动设备的网页。一个网页应该有一个服务于移动设备的 AMP 版本，一个用于桌面设备的常规 HTML 编写的版本（成为“canonical”版本）。你应该使用<code>&lt;link&gt;</code>标签来连接这两个版本，让搜索引擎知道这两个文档代表相同的网页。</p><p>所以，非 AMP 文档包含 AMP 文档的链接。比如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amphtml<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.site.com/amp/document.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>并且，AMP 文档包含非 AMP 文档的链接，比如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canonical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.site.com/document.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在 AMP 功能更加强大，除非你在桌面页面上需要其他功能，在移动和桌面两个设备上使用 AMP 都很简单。这样一来，你只需要维护一个页面而非两个！尽管如此，这个<code>&lt;link&gt;</code>仍然需要。这种情况下，你只需要简单的连接页面到自己，比如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canonical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.site.com/amp/document.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在所有设备上都使用一个 AMP 页面被称之为“canonical AMP”。这就是我们为奶酪自行车商店所做的。</p><h4 id="amp-boilerplate-标签"><a href="#amp-boilerplate-标签" class="headerlink" title="amp-boilerplate  标签"></a>amp-boilerplate <style> 标签</h4><p>所有 AMP HTML 页面一定要在<code>&lt;head&gt;</code>标签中包含一些默认样式。这个样式会影响到页面外观，直到 AMP 库被完全加载。从本质上讲，它目的是先隐藏内容，直到页面完全准备好，即页面上的所有元素都准备好且 AMP 知道在哪里渲染以及它们将要占多少空间。完成此操作，页面就会淡入。这样，用户可以立刻以最终形式查看页面，使它们感觉页面以及立刻加载完成。</p><h4 id="为什么使用视窗-lt-meta-gt-标签"><a href="#为什么使用视窗-lt-meta-gt-标签" class="headerlink" title="为什么使用视窗&lt;meta&gt;标签"></a>为什么使用视窗<code>&lt;meta&gt;</code>标签</h4><p>AMP 可以在移动和桌面设备上运行。因为用户可能在任何一个设备上运行的你的网页，最好是在开发的时候就在这两个设备上检查你的网页。点击移动手机设备图标就可以在 Chrome DevTools 中模拟移动设备体验：<br><img src="https://amp.dev/static/img/courses/beginner/image5.png?width=470&hash=8bd8fac56020d9cadf3fe022193a08532cb0714e" alt="Mobile preview in DevTools"></p><p>现在从菜单中选择“Nexus Fx”移动设备：<br><img src="https://amp.dev/static/img/courses/beginner/image1.png?width=390&hash=4c3da386bfacbc8823e930dd9ded686ed4f5115c" alt="Select a mobile device"></p><p>你应该可以看到你浏览器中选择的设备对应页面显示页面的效果：<br><img src="https://amp.dev/static/img/courses/beginner/image11.png?width=470&hash=2980d95ab3572d7d21c381f9bdd4251c036aa04b" alt="A simulation of how the page looks on mobile"></p><p>注意内容不应该填充满整个移动设备。这个“viewport”标签可以解决这个问题。这个标签根据给定的屏幕大小缩放页面。由于我们想要 AMP 页面对移动设备优化，并使其变成响应式，不用说 AMP 验证器需要此标签。</p><p>所以下面标签一定要放到我们 AMP 页面的<code>&lt;head&gt;</code>标签中，将其添加到快捷图标链接下方。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,minimum-scale<span class="token punctuation">=</span>1,initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果你刷新页面，现在在小屏幕上看起来会好一些，比如这样：<br><img src="https://amp.dev/static/img/courses/beginner/image20.png?width=470&hash=4066d835368fd81e7e1ef796a075bb02b187b1f3" alt="Mobile optimized page"><br>除了标题之外，你不会注意到太大的区别。随着我们跟进一步了解缩放的原理，你可以尝试一下。</p><h3 id="AMP-中的懒加载"><a href="#AMP-中的懒加载" class="headerlink" title="AMP 中的懒加载"></a>AMP 中的懒加载</h3><p>“Lazy-loading”意味着资源（图片，数据，视频，脚本等）不是立刻加载，只有在需要的时候才去加载。AMP 下载资源时，它会优化下载，所以以便更重要的资源被首先下载。图片和广告只有在某些条件满足时才下载，如果它们被用户看到，或者用户可能很快速的滑动它们。这些媒体资产的等效组件(<code>&lt;amp-img&gt;</code>代替<code>&lt;img&gt;</code>)被称为”托管资源”，因为它们是否以及何时将它们加载显示给用户由 AMP 决定。AMP 可以随时决定卸载当前用户看不到的资源。AMP 性能优化之一就是要求元素如<code>&lt;amp-img&gt;</code>之类的元素预先声明其高度。有助于帮助 AMP 计算如何最好的方式布局显示。这非常关键，例如，因为 AMP 会预先加载第一视窗的所有资源，即用户访问网站第一眼看到的所有资源。</p><h3 id="Fixed-vs-Responsive-布局"><a href="#Fixed-vs-Responsive-布局" class="headerlink" title="Fixed vs Responsive 布局"></a>Fixed vs Responsive 布局</h3><p>页面包含布局系统以保证在浏览器渲染页面之前页面布局尽可能的严格。该系统给我们提供了一个 layout 属性，让我们以各种方式定位和缩放元素 – 固定尺寸，响应式设计，固定高度等等。布局系统强制某些元素的尺寸声明。</p><p>这个布局属性对于大多数元素来说是有效的，它指定了 AMP 组件在页面上的显示方式。两种常见的 layout 属性值是“fixed”和“responsive”。如果元素有固定布局，则宽度和高度一定存在。然后，元素将保持此精确大小（以像素为单位），不用担心屏幕或者视图窗口发生变化。如果元素是响应式布局，同样宽和高也一定存在。这种情况下，虽然，元素将自动调整大小以占用可用空间，维持给定宽高的尺寸比列。可用空间依赖于它的父元素。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> amp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转盘抽奖库 lottery-wheel</title>
      <link href="/blog/lottery-wheel/"/>
      <url>/blog/lottery-wheel/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/fralonra/lottery-wheel" target="_blank" rel="noopener">原文</a><br>一个帮助你实现转盘抽奖游戏的库。使用了<a href="https://github.com/adobe-webplatform/Snap.svg" target="_blank" rel="noopener">Snap.svg</a>和<a href="https://github.com/juliangarnier/anime/" target="_blank" rel="noopener">anime.js</a>。<br><a href="https://fralonra.github.io/lottery-wheel/demo/" target="_blank" rel="noopener">demo</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-shell"><code class="language-shell">npm install lottery-wheel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者下载最新版<a href="https://github.com/fralonra/lottery-wheel/releases" target="_blank" rel="noopener">release</a>。<br>然后在你的 HTML 中引用 lottery-wheel.min.js 或者 lottery-wheel.js</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/path/to/lottery-wheel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设在你的 html 文件中有一个 id 为”wheel”的元素。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wheel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后你可以使用下面的代码来创建抽奖轮盘:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"apple"</span><span class="token punctuation">,</span>      chance<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"banana"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"orange"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"peach"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">onSuccess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><ul><li>constructor(option)<br>option 详情看<a href="https://github.com/fralonra/lottery-wheel#options" target="_blank" rel="noopener">下面</a></li><li>draw()<br>当 draw 属性被设置为 false 时，手动渲染轮子。<pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token string">"London"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  draw<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  wheel<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h3><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>默认值</th></tr></thead><tbody><tr><td>el</td><td>当轮子被挂载的元素.<a href="https://github.com/fralonra/lottery-wheel#el" target="_blank" rel="noopener">详情</a></td><td>Object</td><td>-</td></tr><tr><td>data</td><td>奖品数组。<a href="https://github.com/fralonra/lottery-wheel#data" target="_blank" rel="noopener">详情</a></td><td>Array</td><td>-</td></tr><tr><td>pos</td><td>转轮的左上角与父元素关联 (el 元素)</td><td>Array</td><td>[0,0]</td></tr><tr><td>radius</td><td>转轮的半径, px</td><td>Number</td><td>100</td></tr><tr><td>buttonText</td><td>按钮上的文字</td><td>String</td><td>‘Draw’</td></tr><tr><td>fontSize</td><td>奖品上的文字大小</td><td>Number</td><td>(自动生成)</td></tr><tr><td>buttonWidth</td><td>button 的宽度,px</td><td>Number</td><td>50</td></tr><tr><td>buttonFontSize</td><td>button 上文本的大小</td><td>Number</td><td>(自动生成)</td></tr><tr><td>limit</td><td>转轮可以运行的最大次数</td><td>Number</td><td>0 (不限制)</td></tr><tr><td>duration</td><td>动画要执行多久 单位是毫秒</td><td>Number</td><td>5000</td></tr><tr><td>turn</td><td>在动画期间，转轮旋转的最小圈数</td><td>Number</td><td>4</td></tr><tr><td>draw</td><td>true 的话，转轮将在实例被创建时立刻渲染。否则你可以调用<a href="https://github.com/fralonra/lottery-wheel#draw" target="_blank" rel="noopener">draw</a>手动渲染它。</td><td>Boolean</td><td>true</td></tr><tr><td>clockwise</td><td>true 的话，旋转运动将是顺时针。否则，将是逆时针方向</td><td>Boolean</td><td>true</td></tr><tr><td>theme</td><td>预设置使用的颜色 <a href="https://github.com/fralonra/lottery-wheel#themes" target="_blank" rel="noopener">详情</a></td><td>String</td><td>default</td></tr><tr><td>image</td><td>允许你使用图片资源渲染转轮。看<a href="https://github.com/fralonra/lottery-wheel#image" target="_blank" rel="noopener">image</a></td><td>Object</td><td>-</td></tr><tr><td>color</td><td>用来重写当前主题颜色的对象。看<a href="https://github.com/fralonra/lottery-wheel#themes" target="_blank" rel="noopener">themes</a></td><td>Object</td><td>-</td></tr><tr><td>onSuccess</td><td>当奖品被领取成功会调用这个回调函数。<a href="https://github.com/fralonra/lottery-wheel#onsuccess" target="_blank" rel="noopener">详情</a></td><td>Function</td><td>-</td></tr><tr><td>onFail</td><td>超过领取限制次数时，尝试领取会调用这个回调函数</td><td>Function</td><td>-</td></tr><tr><td>onButtonHover</td><td>当鼠标划过按钮上时触发回调 <a href="https://github.com/fralonra/lottery-wheel#onbuttonhover" target="_blank" rel="noopener">详情</a></td><td>Function</td><td>-</td></tr></tbody></table><h4 id="el"><a href="#el" class="headerlink" title="el"></a>el</h4><p>el 属性定义了在哪个元素上渲染转轮。你应该传递一个 DOM 元素：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><p>这个 data 属性使用数组来定义转轮游戏关联的事务。数组的长度要在 3 和 12 之间。</p><p>最简单的方式是将每个奖品的名字放到数组中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token string">"London"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>它将会生成下面带默认 options 的转轮。每个奖品奖项都有相同的机会被抽奖，程序创建 4 个奖品对象，text 属性被 data 数组中的字符串设置，chance 属性自动为 1。<br><img src="https://github.com/fralonra/lottery-wheel/blob/master/doc/images/data.png" alt=""><br>你也可以自定义每个奖品的对象。奖品对象的属性在<a href="https://github.com/fralonra/lottery-wheel#prize-object" target="_blank" rel="noopener">这里</a>被列出来</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span>      chance<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"London"</span><span class="token punctuation">,</span>      chance<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"New York"</span><span class="token punctuation">,</span>    <span class="token string">"Tokyo"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="onSuccess"><a href="#onSuccess" class="headerlink" title="onSuccess"></a>onSuccess</h4><p>当奖品被领取成功之后，回调函数被调用。</p><table><thead><tr><th>参数</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>data</td><td>领取奖品对象</td><td>Object</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"prize A"</span><span class="token punctuation">,</span> <span class="token string">"prize B"</span><span class="token punctuation">,</span> <span class="token string">"prize C"</span><span class="token punctuation">,</span> <span class="token string">"prize D"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">onSuccess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Congratulations! You picked up </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>data<span class="token punctuation">.</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="onFail"><a href="#onFail" class="headerlink" title="onFail"></a>onFail</h4><p>尝试已经达到领取限制时调用这个回调。(限制是 limit 属性)。注意默认可以领取无限次</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"prize A"</span><span class="token punctuation">,</span> <span class="token string">"prize B"</span><span class="token punctuation">,</span> <span class="token string">"prize C"</span><span class="token punctuation">,</span> <span class="token string">"prize D"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  limit<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token function">onFail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"You have no more chance to draw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这种情况下，如果你已经领取奖品，下次点击这个按钮将会弹出警告对话框。</p><h4 id="onButtonHover"><a href="#onButtonHover" class="headerlink" title="onButtonHover"></a>onButtonHover</h4><p>当鼠标滑过按钮时会调用</p><table><thead><tr><th>参数</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>anime</td><td>引用 animejs。看这个使用<a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener">文档</a></td><td>-</td></tr><tr><td>button</td><td>参考按钮所在的捕获元素</td><td>Object</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"prize A"</span><span class="token punctuation">,</span> <span class="token string">"prize B"</span><span class="token punctuation">,</span> <span class="token string">"prize C"</span><span class="token punctuation">,</span> <span class="token string">"prize D"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function">onButtonHover</span><span class="token punctuation">(</span>anime<span class="token punctuation">,</span> button<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      targets<span class="token punctuation">:</span> button<span class="token punctuation">.</span>node<span class="token punctuation">,</span>      scale<span class="token punctuation">:</span> <span class="token number">1.2</span><span class="token punctuation">,</span>      duration<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>奖品对象</p><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>默认</th></tr></thead><tbody><tr><td>text</td><td>奖品名字</td><td>String</td><td>‘’</td></tr><tr><td>chance</td><td>奖品可以被领取的可能性。值越高，奖品被领取的概率越大。概率计算的公式 <code>probability = 1 * chance / (每个chance的和)</code></td><td>Number</td><td>1</td></tr><tr><td>color</td><td>奖品的背景颜色 (重写转轮的 color.prize)</td><td>String</td><td>-</td></tr><tr><td>fontColor</td><td>文本的颜色 (重写转轮的 color.fontColor)</td><td>String</td><td>-</td></tr><tr><td>fontSize</td><td>文本的大小（将重写转轮的 fontSize）</td><td>Number</td><td>-</td></tr></tbody></table><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"Beijing"</span><span class="token punctuation">,</span>      color<span class="token punctuation">:</span> <span class="token string">"silver"</span><span class="token punctuation">,</span>      fontSize<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      text<span class="token punctuation">:</span> <span class="token string">"London"</span><span class="token punctuation">,</span>      fontColor<span class="token punctuation">:</span> <span class="token string">"#008000"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"New York"</span><span class="token punctuation">,</span>    <span class="token string">"Tokyo"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码的转轮结果是<br><img src="https://github.com/fralonra/lottery-wheel/blob/master/doc/images/prize.png" alt=""></p><h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>主题是个存储转轮颜色的对象。它有下面的属性：</p><ul><li>border: 转轮边框的背景颜色</li><li>prize: 奖品部分的背景颜色</li><li>button: 按钮部分的背景颜色</li><li>line: 奖品部分之间的线条颜色</li><li>prizeFont: 奖品文本的颜色</li><li>buttonFont: 按钮文本的颜色</li></ul><p>下面是 3 个预设置的主题：</p><ul><li>default</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    border<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    prize<span class="token punctuation">:</span> <span class="token string">'gold'</span><span class="token punctuation">,</span>    button<span class="token punctuation">:</span> <span class="token string">'darkorange'</span><span class="token punctuation">,</span>    line<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    prizeFont<span class="token punctuation">:</span> <span class="token string">'red'</span><span class="token punctuation">,</span>    buttonFont<span class="token punctuation">:</span> <span class="token string">'white'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>light</li></ul><pre><code>light: {    border: &#39;orange&#39;,    prize: &#39;lightyellow&#39;,    button: &#39;tomato&#39;,    line: &#39;orange&#39;,    prizeFont: &#39;orange&#39;,    buttonFont: &#39;white&#39;}</code></pre><p><img src="https://github.com/fralonra/lottery-wheel/raw/master/doc/images/theme-light.png" alt=""></p><ul><li>dark</li></ul><pre class="line-numbers language-js"><code class="language-js">dark<span class="token punctuation">:</span> <span class="token punctuation">{</span>    border<span class="token punctuation">:</span> <span class="token string">'silver'</span><span class="token punctuation">,</span>    prize<span class="token punctuation">:</span> <span class="token string">'dimgray'</span><span class="token punctuation">,</span>    button<span class="token punctuation">:</span> <span class="token string">'darkslategray'</span><span class="token punctuation">,</span>    line<span class="token punctuation">:</span> <span class="token string">'silver'</span><span class="token punctuation">,</span>    prizeFont<span class="token punctuation">:</span> <span class="token string">'silver'</span><span class="token punctuation">,</span>    buttonFont<span class="token punctuation">:</span> <span class="token string">'lightyellow'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/fralonra/lottery-wheel/raw/master/doc/images/theme-dark.png" alt=""><br>你可以通过设置 color 属性来改变颜色</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Beijing"</span><span class="token punctuation">,</span> <span class="token string">"London"</span><span class="token punctuation">,</span> <span class="token string">"New York"</span><span class="token punctuation">,</span> <span class="token string">"Tokyo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  theme<span class="token punctuation">:</span> <span class="token string">"dark"</span><span class="token punctuation">,</span>  color<span class="token punctuation">:</span> <span class="token punctuation">{</span>    button<span class="token punctuation">:</span> <span class="token string">"#fef5e7"</span><span class="token punctuation">,</span>    buttonFont<span class="token punctuation">:</span> <span class="token string">"#34495e"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/fralonra/lottery-wheel/raw/master/doc/images/color.png" alt=""></p><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p>使用 image 属性让你可以通过对象的设置，使用一个已存在的资源来渲染转轮。它生成图像 svg 元素，并支持 jpeg,png 和 svg 格式。<br>属性</p><table><thead><tr><th>参数</th><th>描述</th><th>类型</th></tr></thead><tbody><tr><td>turntable</td><td>转盘图片</td><td>String</td></tr><tr><td>button</td><td>按钮的图片。宽度由 buttonWidth 控制，剩下的按照比列缩放。默认在转盘的中心</td><td>String</td></tr><tr><td>offset</td><td>按钮的 y 轴的偏移。如果是负，按钮向上移动</td><td>Number</td></tr></tbody></table><p>这里的案例显示当时用仓库下的/doc/images 的图片的效果：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> wheel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wheel</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"wheel"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Prize A"</span><span class="token punctuation">,</span> <span class="token string">"Prize B"</span><span class="token punctuation">,</span> <span class="token string">"Prize C"</span><span class="token punctuation">,</span> <span class="token string">"Prize D"</span><span class="token punctuation">,</span> <span class="token string">"Prize E"</span><span class="token punctuation">,</span> <span class="token string">"Prize F"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  image<span class="token punctuation">:</span> <span class="token punctuation">{</span>    turntable<span class="token punctuation">:</span> <span class="token string">"turntable.png"</span><span class="token punctuation">,</span>    button<span class="token punctuation">:</span> <span class="token string">"button.png"</span><span class="token punctuation">,</span>    offset<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/fralonra/lottery-wheel/blob/master/doc/images/image.png" alt=""></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我开了分支，为它支持了 remoteDrawn 属性，支持了奖品有远程接口支持的功能<br><a href="https://github.com/keyboard3/lottery-wheel" target="_blank" rel="noopener">keyboard3/lottery-wheel</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> js </tag>
            
            <tag> animate </tag>
            
            <tag> library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Page 可见性 API</title>
      <link href="/blog/page-visibility-api/"/>
      <url>/blog/page-visibility-api/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="noopener">原文</a></p><p>使用选项卡浏览，任何 web 页面都有可能在后台，因此对用户不可见。这个页面可见性 API 提供了当 document 显示和隐藏的事件给你监听，以及查看当前页面可见性的状态。</p><blockquote><p>注意：这个 API 对于保存资源和提高性能非常有用，它使得页面不显示的时候可以避免执行不必要的任务。</p></blockquote><p>当用户缩小窗口或者切换其他 tab 页的时候，这个 API 会发送<a href="https://developer.mozilla.org/en-US/docs/Web/Events/visibilitychange" target="_blank" rel="noopener">visibilitychange</a>事件告诉监听者页面状态发生变更。你可以检测这个事件执行不同的行为。例如，如果你的 web 应用正在播放视频，当用户切换 tab 进入后台时暂停视频，在用户回到页面时重新播放视频。用户不会丢失它的播放位置，这个视频的音轨不会干扰到新 tab 页面的声音，并且用户在这个期间不会错误任何视频。</p><p>iframe 的可见性状态和福文档一样。使用 css 属性(像 display:none;)不会触发可见性事件或者改变 document 包含的 frame 的状态。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>让我们考虑下页面可见性 API 的几个用户场景：</p><ul><li>站点有图片轮播控件，它不应该前进下一张除非用户看到这个页面了。</li><li>当页面不再显示，显示信息仪表盘的应用程序不应该继续轮询服务器了</li><li>页面想要检测什么时候被渲染，以便可以精确的计算出页面浏览量。</li><li>网站像在当设备处于待机状态时关闭声音（用户按住电源按钮关闭屏幕显示）</li></ul><p>开发者历史上采用过不完善的代理来检测这一点。例如，在 window 上监听 blur 和 focus 事件帮助你知道什么时候你的页面不再是激活页面，但是它没有告诉你你的页面是不是真的在用户面前隐藏了。这个页面可见性 API 可以做到。</p><blockquote><p>注意：onblur 和 onfocus 会告诉你用户切换了窗口焦点，但并不意味着它隐藏了。只有当用户切换了选项卡或者缩小了包含 tab 的浏览器窗口才算是页面隐藏了。</p></blockquote><h3 id="策略的目的是为了后台页面性能"><a href="#策略的目的是为了后台页面性能" class="headerlink" title="策略的目的是为了后台页面性能"></a>策略的目的是为了后台页面性能</h3><p>区别于 Page 可见性 API，用户代理通常有很多策略来减轻后台或隐藏 tab 带来的性能影响。这些包括:</p><ul><li>许多浏览器会停止向后台 tab 和隐藏的 iframe 发送<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">requestAnimationFrame()</a>回调，为了提高性能以及电池寿命。</li><li>计时器像<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout" target="_blank" rel="noopener">setTimeout()</a>在后台/未激活 tab 中是节流的，帮助提高性能。详情见<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Reasons_for_delays_longer_than_specified" target="_blank" rel="noopener">延迟超过指定值的原因</a>。</li><li>在现代浏览器（firefox58+，Chrome 57+）中基于预算的后台超时限制是有效的，对后台计时器 CPU 使用率做了额外的限制。在现代浏览器的这类操作都相似，详细看下面：<ul><li>在 Firefox 中，后台选项卡的窗口每个都有自己的时间预算（时间单位是毫秒） – 预算最大最小值分贝是 +50 毫秒和-150 毫秒。chrome 类似，预算单位是秒。</li><li>窗口控制 30 秒之后进行节流，它的节流延时器规则和窗口计时器指定的规则一样（同样，<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Reasons_for_delays_longer_than_specified" target="_blank" rel="noopener">延迟时间比指定长的原因</a>）。在 Chrome 中，它的值是 10 秒。</li><li>计时器任务仅当预算为负的时候才允许执行。</li><li>一旦计时器代码运行结束，它执行花费的时间是减去了窗口的超时预算的时间。</li><li>在 Firefox 和 Chrome 中，预算以每秒 10 毫秒的速度增加。</li></ul></li></ul><p>某些进程不收此节流行为的限制。在这些场景中，你可以使用页面可见性 API 来减少用户隐藏页面是的性能影响。</p><ul><li>播放音频的 tab 页面可以被视为前台并且不被节流</li><li>运行实时网络连接的代码 tab 页面（<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noopener">WebSockets</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API" target="_blank" rel="noopener">WebRTC</a>）不被节流，为了避免关闭这些连接造成的意外关闭。</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB</a>进程也不应该被节流，为了避免超时。</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>查看<a href="http://daniemon.com/tech/webapps/page-visibility/" target="_blank" rel="noopener">现场案例</a>（带声音的视频）<br>这个案例当你选择其他 tab 时视频暂停，当你回到这个 tab 时视频播放，它被下面的代码创建：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Set the name of the hidden property and the change event for visibility</span><span class="token keyword">var</span> hidden<span class="token punctuation">,</span> visibilityChange<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>hidden <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Opera 12.10 and Firefox 18 and later support</span>  hidden <span class="token operator">=</span> <span class="token string">"hidden"</span><span class="token punctuation">;</span>  visibilityChange <span class="token operator">=</span> <span class="token string">"visibilitychange"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>msHidden <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  hidden <span class="token operator">=</span> <span class="token string">"msHidden"</span><span class="token punctuation">;</span>  visibilityChange <span class="token operator">=</span> <span class="token string">"msvisibilitychange"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>webkitHidden <span class="token operator">!==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  hidden <span class="token operator">=</span> <span class="token string">"webkitHidden"</span><span class="token punctuation">;</span>  visibilityChange <span class="token operator">=</span> <span class="token string">"webkitvisibilitychange"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> videoElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"videoElement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// If the page is hidden, pause the video;</span><span class="token comment" spellcheck="true">// if the page is shown, play the video</span><span class="token keyword">function</span> <span class="token function">handleVisibilityChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">[</span>hidden<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    videoElement<span class="token punctuation">.</span><span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    videoElement<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Warn if the browser doesn't support addEventListener or the Page Visibility API</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> document<span class="token punctuation">.</span>addEventListener <span class="token operator">===</span> <span class="token string">"undefined"</span> <span class="token operator">||</span> hidden <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>    <span class="token string">"This demo requires a browser, such as Google Chrome or Firefox, that supports the Page Visibility API."</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Handle page visibility change</span>  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>visibilityChange<span class="token punctuation">,</span> handleVisibilityChange<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// When the video pauses, set the title.</span>  <span class="token comment" spellcheck="true">// This shows the paused</span>  videoElement<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>    <span class="token string">"pause"</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Paused"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token boolean">false</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// When the video plays, set the title.</span>  videoElemnt<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>    <span class="token string">"play"</span><span class="token punctuation">,</span>    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Playing"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token boolean">false</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="将属性添加到-Document-接口"><a href="#将属性添加到-Document-接口" class="headerlink" title="将属性添加到 Document 接口"></a>将属性添加到 Document 接口</h3><p>页面可见性 API 添加下面的属性给 Document 接口：</p><ul><li>Document.hidden <strong>只读</strong><br>如果页面对用户不显示这个值就是 true，否则就是 false</li><li>Document.visibilityState | <strong>只读</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMString" target="_blank" rel="noopener">DOMString</a>表明了 document 的当前显示状态，值可能有：<ul><li>visible<br>页面内容至少部分被显示。实践中意味着页面是非缩小窗口中的前台 tab</li><li>hidden<br>页面内容没有显示给用户看，由于 document 的 tab 在后台或者是 window 被缩小了，又或者是设备屏幕息屏了。</li><li>prerender<br>这个页面内容被预渲染并且没有显示给用户看。document 可以以预渲染状态开始，但无法从其他状态变化过来，因为一个 document 只有一次预渲染机会。</li><li>unloaded<br>这个页面正在被从内存中卸载</li></ul></li><li>Document.onvisibilitychange<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener" target="_blank" rel="noopener">EventListener</a>提供当<a href="https://developer.mozilla.org/en-US/docs/Web/Events/visibilitychange" target="_blank" rel="noopener">visibilitychange</a>事件被触发时的代码调用。<pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//startSimulation and pauseSimulation defined elsewhere</span><span class="token keyword">function</span> <span class="token function">handleVisibilityChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>hidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">pauseSimulation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">startSimulation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> handleVisibilityChange<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> mdn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 主要概念</title>
      <link href="/blog/react-main-concepts/"/>
      <url>/blog/react-main-concepts/</url>
      
        <content type="html"><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>最简单的 React 示例如下：</p><pre class="line-numbers language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在页面的顶部显示了”Hello,world!“</p><h3 id="如何读这篇指南"><a href="#如何读这篇指南" class="headerlink" title="如何读这篇指南"></a>如何读这篇指南</h3><p>在这个指南中，我们们将介绍构建 React 应用的模块：元素和组件。一旦掌握它们，你可以复用很小的模块创建复杂的应用。</p><blockquote><p>提示：<br>这个指南是为了那些喜欢一步步学习概念的人设计的。如果你更喜欢边做边学，看我们的练习教程。你应该发现这篇指南和那个教程相互补充，适合每个人。</p></blockquote><p>这是一步步学习 React 主要概念的第一个章节。你可以在右侧的导航栏找到所有的章节列表。如果你在移动设备上读它，你可以从屏幕上的右下角的按钮访问导航。</p><p>这个指南的每一章都建立在章节开头的知识介绍之上。<strong>你可以在侧边栏中顺序的阅读主要概念的指南章节，学习更多的 React 知识</strong>。例如，<a href="https://reactjs.org/docs/introducing-jsx.html" target="_blank" rel="noopener">介绍 Jsx</a>是下一章</p><h3 id="知识水平假设"><a href="#知识水平假设" class="headerlink" title="知识水平假设"></a>知识水平假设</h3><p>React 是一个 JavaScript 库，所以我们假设你对 JavaScript 语言有基础的理解。<strong>如果你感觉不自信的话，我们建议<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">通过 JavaScript 教程</a>来检查你的知识水平</strong>，使你遵循本指南而不会迷路。这可能会花费你 30 分钟到 1 个小时，但是并不会让你感觉你需要同时学 React 和 JavaScript。</p><blockquote><p>注意：<br>这个指南在案例中会偶尔使用最新的 JavaScript 语法。如果你最近几年没有用 JavaScript 工作，这<a href="https://gist.github.com/gaearon/683e676101005de0add59e8bb345340c" target="_blank" rel="noopener">三点</a>会让你收货很大</p></blockquote><h2 id="介绍-JSX"><a href="#介绍-JSX" class="headerlink" title="介绍 JSX"></a>介绍 JSX</h2><p>考虑下面的变量声明：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是很有趣的标签语法，既不是 string 也不是 HTML。</p><p>它叫做 JSX，它是 JavaScript 的语法扩展。我们建议与 React 一起来描述 UI。JSX 可能让你想起模板语言，但是它具有 JavaScript 的全部能力。</p><p>JSX 产生 React 元素。我们将在下一章探索将它们渲染到 DOM。在下面，你可以找到必要的 JSX 基础知识。</p><h3 id="为什么是-JSX？"><a href="#为什么是-JSX？" class="headerlink" title="为什么是 JSX？"></a>为什么是 JSX？</h3><p>React 包含一个事实就是渲染逻辑和其他 UI 逻辑强耦合： 事件如何处理，状态如何随时间变化，数据如何准备显示。</p><p>取代人为的将标记语言和逻辑放到不同文件来实现分离，React 使用松散耦合的单元”组件“（包含二者）来<a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener">关注分离点</a>。我们将在下一节来回到组件上，但是如果你还不熟悉在 JS 中添加标记，<a href="https://www.youtube.com/watch?v=x7cQ3mrcKaY" target="_blank" rel="noopener">这个话题</a>将说服你。</p><p>React 不要求使用 JSX，但是它当在 JS 代码中作为可视化 UI 时非常有用。它还允许显示更多有用的错误和警告信息。</p><p>不用担心，开始吧</p><h3 id="嵌套表达式到-JSX"><a href="#嵌套表达式到-JSX" class="headerlink" title="嵌套表达式到 JSX"></a>嵌套表达式到 JSX</h3><p>在下面的案例中，我们声明了一个 name 变量，然后使用它，将它包裹在大括号中。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"Josh Perez"</span><span class="token punctuation">;</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可以将任何有效的 JavaScript 表达式放到 JSX 的大括号中。例如，2+2，user.firstName，或者 formatName(user)都是有效的 JavaScript 表达式。</p><p>在下面的案例中，我们我们嵌入了 JavaScript 函数调用的结果到 h1 元素中。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> user<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>  firstName<span class="token punctuation">:</span> <span class="token string">"Harper"</span><span class="token punctuation">,</span>  lastName<span class="token punctuation">:</span> <span class="token string">"Perez"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加``故意为之，否则被格式化掉了</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token template-string"><span class="token string">`(  &lt;h1>    Hello, {formatName(user)}!  &lt;/h1>)`</span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了可读性将 JSX 分离成了多行。这并不强制，当你这么做的时候，我们建议你将它们包裹在（）中避免自动插入；符号的陷阱。</p><h3 id="JSX-也是一个表达式"><a href="#JSX-也是一个表达式" class="headerlink" title="JSX 也是一个表达式"></a>JSX 也是一个表达式</h3><p>编译之后，JSX 表达式变成了常规的 JavaScript 函数调用并评估为 JavaScript 对象。</p><p>这意味着你可以将 JSX 放到 if 语句和 for 循环中，分配它到变量，将它作为一个参数，并从函数中返回它。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">getGreeting</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token function">formatName</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> Stranger<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用-JSX-指定属性"><a href="#用-JSX-指定属性" class="headerlink" title="用 JSX 指定属性"></a>用 JSX 指定属性</h3><p>你可以使用引号来指定字符串字面量作为属性：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">tabIndex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以在大括号中嵌入 JavaScript 表达式作为属性</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当嵌入 JavaScript 表达式作为属性时，不要将大括号周围加上引号。你应该使用为字符串使用”，为表达式使用{}。但是不应该放到相同的属性上。</p><blockquote><p>警告：<br>因为 JSX 更加贴近 Javascript 而不是 HTML，React 使用小写驼峰的属性命名约定来代替 HTML 属性名。<br>例如，在 JSX 中 class 变成 className，tabindex 变成 tabIndex。</p></blockquote><h3 id="用-JSX-指定-Children"><a href="#用-JSX-指定-Children" class="headerlink" title="用 JSX 指定 Children"></a>用 JSX 指定 Children</h3><p>如果标签是空的，你应该立刻使用<code>/&gt;</code>标签结束，像 XML：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>JSX 标签可能包含 children:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Good to see you here<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSX-防止注入攻击"><a href="#JSX-防止注入攻击" class="headerlink" title="JSX 防止注入攻击"></a>JSX 防止注入攻击</h3><p>将用户输入嵌入到 JSX 是非常安全的：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> title <span class="token operator">=</span> response<span class="token punctuation">.</span>potentiallyMaliciousInput<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This is safe:</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认情况下，React 会在渲染之前，转义任何嵌入到 JSX 的值。这样保证你不会注入未显示的写在你应用中的任何东西。任何东西都会被在渲染之前转成字符串。这回帮助防止 XSS（跨站脚本）攻击。</p><h3 id="JSX-代表对象"><a href="#JSX-代表对象" class="headerlink" title="JSX 代表对象"></a>JSX 代表对象</h3><p>Babel 编译 JSX 成<code>React.createElement()</code>调用。</p><p>这两个示例是相同的：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> element <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"h1"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">"greeting"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"Hello, world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>React.createElement()</code>执行一些检查帮助你写无 bug 的代码，但是实际上它会创建类似下面的对象：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Note: 这个结构被简化了</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>  type<span class="token punctuation">:</span> <span class="token string">"h1"</span><span class="token punctuation">,</span>  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    className<span class="token punctuation">:</span> <span class="token string">"greeting"</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些对象被称为“React 元素”。你可以认为它们描述了你想要在屏幕上如何显示。React 读取这些对象，用它们构造 DOM 并实时更新。</p><p>我们间能够在下一节讨论 React 元素渲染到 DOM</p><blockquote><p>提示：<br>我们建议为你选择的编译器使用<a href="https://babeljs.io/docs/editors" target="_blank" rel="noopener">Babel 语言定义</a>，因为 ES6 和 JSX 代码都会被正确的高亮。</p></blockquote><h2 id="渲染元素"><a href="#渲染元素" class="headerlink" title="渲染元素"></a>渲染元素</h2><p>元素时 React 应用中最小的构建块。</p><p>元素描述了你想要在屏幕上显示的内容：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不像浏览器 DOM 元素，React 元素时一个纯对象，<br>创造编译。React DOM 负责更新 DOM 以匹配 React 元素。</p><blockquote><p>注意：<br>可能让元素和一个广泛知道的“组件”概念混淆。我们将在下一章介绍组件。元素时组件的组成部分，我们建议你在继续之前读完这一节。</p></blockquote><h3 id="渲染元素到-DOM"><a href="#渲染元素到-DOM" class="headerlink" title="渲染元素到 DOM"></a>渲染元素到 DOM</h3><p>假设你 HTML 文件中有一处定义了一个 div:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们认为它是 root DOM 节点，因为它下面的任何东西都被 React DOM 管理。</p><p>只被 React 构建的应用通常只要一个 root DOM 节点。如果你集成 React 到已存在的应用上，你可能根据你的需求有多个独立的 root DOM 节点。</p><p>为了将 React 元素渲染到 root DOM 节点，需要将它们传递到<code>ReactDOM.render()</code>中。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更新渲染过的元素"><a href="#更新渲染过的元素" class="headerlink" title="更新渲染过的元素"></a>更新渲染过的元素</h3><p>React 元素时<a href="https://en.wikipedia.org/wiki/Immutable_object" target="_blank" rel="noopener">不可变</a>的。一旦你创建了一个元素，你无法修改它的 children 和属性。一个元素被认为是动画的一帧：它代表了 UI 在那个特定的时间点。</p><p>到目前为止，我们的知识中只有一种方式更新 UI，那就是创建新元素，并传递给<a href="https://reactjs.org/docs/react-dom.html#render" target="_blank" rel="noopener">ReactDOM.render()</a></p><p>考虑下面滴答时钟案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它每秒从<a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval" target="_blank" rel="noopener">setInterval()</a>回调中调用<a href="https://reactjs.org/docs/react-dom.html#render" target="_blank" rel="noopener">ReactDOM.render()</a></p><blockquote><p>注意：<br>实际上，大多数 React 应用只调用一次 ReactDOM.render()。下一节我们将学习这样的代码如何封装进有<a href="https://reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noopener">状态的组件</a>中。<br>我建议不要跳过主题，因为她们相互关联。</p></blockquote><h3 id="React-只更新必要的"><a href="#React-只更新必要的" class="headerlink" title="React 只更新必要的"></a>React 只更新必要的</h3><p>React DOM 对比之前的哪一个的元素以及它的 children，只应用使得 DOM 达到理想状态需要的 那些 DOM 更新。</p><p>你可以使用浏览器工具来诊断<a href="https://reactjs.org/redirect-to-codepen/rendering-elements/update-rendered-element" target="_blank" rel="noopener">最后的示例</a>来验证上述所说的：</p><p>虽然我每秒创建了整个 UI 树，但是 React DOM 使得仅仅发生变化的文本节点更新。</p><p>根据我们的经验，思考在任何给定时间点如何显示 UI，而不是思考如何随着时间改变它，可以消除一整类 bug。</p><h2 id="组件和属性"><a href="#组件和属性" class="headerlink" title="组件和属性"></a>组件和属性</h2><p>组件让你将 UI 分成独立的，可重用的部分，并独立的思考每个部分。这个页面介绍了组件的概念。你可以<a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener">这里有详细的组件 API</a></p><p>从概念上讲，组件就像 JavaScript 函数。它接受任意的输入（叫”props”）并返回你想要显示到屏幕上的 React 元素。</p><h3 id="函数和类组件"><a href="#函数和类组件" class="headerlink" title="函数和类组件"></a>函数和类组件</h3><p>最简单定义一个组件的方式是写一个 JavaScript 函数：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个函数是一个有效的 React 组件，因为它接受单个带数据的“props”（代表属性）对象并返回 React 元素。我们叫这样的组件为“函数组件”，因为它们实际上是 JavaScript 函数。</p><p>你也可以使用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">ES6 类</a>定义一个组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Welcome</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面两个组件从 React 的视角是等价的。</p><p>函数和类组件都有一些附加的功能，我们将在下一节讨论它</p><h3 id="渲染一个组件"><a href="#渲染一个组件" class="headerlink" title="渲染一个组件"></a>渲染一个组件</h3><p>以前，我们仅遇到代表 DOM 标签的 React 元素：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而，元素也可以代表用户定义的组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当 React 看到一个元素时用户定义的组件，它会传递 JSX attributes 和 children 作为单独的一个对象传递给这个组件。我们叫这个对象为 props。</p><p>例如，这个代码在页面上渲染“Hello, Sara”</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们概括一下这个案例中发生了什么：</p><ol><li>我们调用 ReactDOM.render()渲染<code>&lt;Welcome name=&quot;Sara&quot; /&gt;</code>元素</li><li>React 使用<code>{name: &#39;Sara&#39;}</code>作为 props 来调用 Welcome 组件</li><li>我们的 Welcome 组件返回<code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;</code></li><li>React DOM 有效的匹配<code>&lt;h1&gt;Hello, Sara&lt;/h1&gt;.</code>来更新 DOM。</li></ol><blockquote><p>注意：组件名一直以大写字母开头。<br>React 将小写字母开头的组件认为是 DOM 标签。例如，<code>&lt;div /&gt;</code>代表表示 HTML div 标签，但是<code>&lt;Welcome /&gt;</code>表示一个组件并在作用域内导入 Welcome。<br>想要了解这个约定背后的信息，阅读<a href="https://reactjs.org/docs/jsx-in-depth.html#user-defined-components-must-be-capitalized" target="_blank" rel="noopener">JSX</a></p></blockquote><h3 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h3><p>组件可以在它们的输出中引用其他组件。这让我们可以对任何层次的细节都可以用相同的组件抽象。A button, a form, a dialog, a screen: 在 React 应用中，所有都表示为组件。</p><p>例如，我们创建一个 App 组件，渲染 Welcome 多次。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Welcome</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>props<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Sara<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Cahal<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Welcome</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Edite<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>典型的，新 React 应用的顶部只有一个 App 组件。然而，如果你集成 React 到已存在的应用，你可能会从一个像 Button 这样的很小的组件开始自下而上逐步进入视图结构顶部。</p><h3 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h3><p>不要害怕拆分组件到更小的组件。</p><p>例如，思考下面的 Comment 组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Comment</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>          <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Avatar<span class="token punctuation">"</span></span>          <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span>          <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它接受 author(对象),text(字符串),date(日期)作为 props，并在社交媒体网站上描述为一个评论组件</p><p>因为所有都嵌套，所以这个组件改动其他很棘手。并且也很难独立的重用它的各个部分。让我们从它提取出更小的组件。</p><p>首先，我们提取 Avatar：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Avatar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Avatar<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>avatarUrl<span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 Avatar 不需要知道它将被渲染进 Comment。这是为什么我给他的 prop 一个更广泛的名字：user 而不是 author。</p><p>我们建议命名 props 应该从组件自身的角度而不是使用它的上下文。</p><p>我们现在可以稍微简化一下 Comment：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Comment</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面，我们将提取 UserInfo 组件渲染 Avatar 和 user 的 name：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserInfo</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UserInfo-name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让我们进一步简化 Comment：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Comment</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserInfo</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>author<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Comment-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token function">formatDate</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提取组件可能看起来是一个繁重的工作，但是拥有可重用组件的面板在更大的应用上会带来回报。一个好的经验是如果你 UI 的部分是被多次使用(Button,Panel,Avatar)，或者它自身足够复杂（App,FeedStory,Comment），那么它是重用组件的不错选择。</p><h3 id="Props-是只读的"><a href="#Props-是只读的" class="headerlink" title="Props 是只读的"></a>Props 是只读的</h3><p>无论你声明的组件是函数的或者是类的，它自己的 props 一定不能被修改。思考下面的 sum 函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个函数是纯函数，因为它不会修改自己的输入，并且每次针对相同的输入返回相同的结果。</p><p>相反，下面的函数是不纯的，因为它修改了自己是输入：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>  account<span class="token punctuation">.</span>total <span class="token operator">-</span><span class="token operator">=</span> amount<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>React 是很灵活的但是它有一条严格的规则：</p><p><strong>对于他们的 Props,所有的组件一定要像纯函数一样工作</strong></p><p>当然，应用 UI 是动态并随着时间变化。下一节，我们将介绍新的概念 state。State 允许 React 组件跟着用户的操作随着时间去修改它们的输出，网络响应，或者其他，这些并不违反此规则。</p><h2 id="状态和生命周期"><a href="#状态和生命周期" class="headerlink" title="状态和生命周期"></a>状态和生命周期</h2><p>这个页面介绍了在 React 组件中状态和生命周期的概念。你可以从<a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener">组件 API 文档中</a>找到更详细的说明。</p><p>思考上一节的时钟案例。在渲染元素中，我们只有一个方式更新 UI。我们通过调用 ReactDOM.reader()来改变渲染输出：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一节，我们将学习如何使得时钟组件真正的复用和封装。它将设置自己的 timer 并每秒更新自己。</p><p>我们通过如何封装时钟开始学习：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Clock</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token attr-name">date</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">setInterval</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，它缺失了一个关键的要求：实际上时钟设置 timer 并每秒更新自己应该是时钟自己的实现细节。</p><p>理想情况下，我们想要写一次 Clock，它会更新自己：</p><pre class="line-numbers language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了实现它，我们需要为 Clock 组件添加 state。</p><p>State 类似于 props，但是它是私有的，完全由组件自己控制。</p><h3 id="将函数转成类"><a href="#将函数转成类" class="headerlink" title="将函数转成类"></a>将函数转成类</h3><p>你讲函数组件 Clock 转变成类组件，需要 5 步：</p><ol><li>创建 ES6 类，使用相同的名字，继承自 React.Component</li><li>添加一个 render 空方法</li><li>将函数的主体迁移到 render 函数中</li><li>在 render 函数中替换 props 为 this.props</li><li>删除剩余的空函数声明</li></ol><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Clock 显示是类定义而不是函数。</p><p>这个 render 函数在每次更新时调用，但是只会将<Clock/>渲染到相同的 DOM 节点，只有一个 Clock 类是实例被使用。这让我们可以使用附加的功能比如本地 state 和生命周期函数。</p><h3 id="给类添加本地-State"><a href="#给类添加本地-State" class="headerlink" title="给类添加本地 State"></a>给类添加本地 State</h3><p>我们将 date 从 props 移动到 state 需要 3 补：</p><ol><li>在 render 函数中替换 this.props.date 成 this.state.date</li></ol><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>添加<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes#Constructor" target="_blank" rel="noopener">类构造函数</a>初始化 this.state</li></ol><pre><code>class Clock extends React.Component {  constructor(props) {    super(props);    this.state = {date: new Date()};  }  render() {    return (      &lt;div&gt;        &lt;h1&gt;Hello, world!&lt;/h1&gt;        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;      &lt;/div&gt;    );  }}</code></pre><p>注意我们如何传递 props 给基类构造函数：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>类组件应该一直传递 props 给基类构造函数</p><ol start="3"><li>从<code>&lt;Clock /&gt;</code>元素中删除 date prop</li></ol><pre class="line-numbers language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们稍后将 timer 代码添加会组件本身。</p><p>结果看起来这样：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面，我们将让 Clock 配置自己的 timer 并每秒更新自己。</p><h3 id="给类添加生命周期函数"><a href="#给类添加生命周期函数" class="headerlink" title="给类添加生命周期函数"></a>给类添加生命周期函数</h3><p>在具有许多应用的组件中，当它们销毁时释放被组件占用的资源非常重要。</p><p>我们想要 Clock 第一次渲染到 DOM 之后设置 timer。这种情况被称之为挂载。</p><p>我们想在 Clock 的 DOM 被删除的时候清除 timer。这种被称为卸载。</p><p>我们声明一些指定方法在组件挂载和卸载的时候运行一些代码。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token punctuation">,</span> world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些方法被称为生命周期函数</p><p>componentDidMount 函数运行在组件输出被渲染到 DOM 之后。这是设置 timer 的好地方：</p><pre class="line-numbers language-js"><code class="language-js"> <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timerID <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token number">1000</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意我们立刻保留 timer ID 到 this 上(this.timerID)。</p><p>虽然 this.props 由 React 自己设置，并且 this.state 有特殊含义。如果你需要存储某些东西并不想让它参与数据流（比如 timer ID），你可以自由的将类中添加额外的字段。</p><p>我们将在 componentWillUnmount 生命周期函数中拆除 timer：</p><pre class="line-numbers language-jsx"><code class="language-jsx"> <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timerID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后，我们将实现 tick 函数，用来让 Clock 组件每秒都运行</p><p>它将使用 this.setState()来更新调度组件的本地 state。</p><pre><code>class Clock extends React.Component {  constructor(props) {    super(props);    this.state = {date: new Date()};  }  componentDidMount() {    this.timerID = setInterval(      () =&gt; this.tick(),      1000    );  }  componentWillUnmount() {    clearInterval(this.timerID);  }  tick() {    this.setState({      date: new Date()    });  }  render() {    return (      &lt;div&gt;        &lt;h1&gt;Hello, world!&lt;/h1&gt;        &lt;h2&gt;It is {this.state.date.toLocaleTimeString()}.&lt;/h2&gt;      &lt;/div&gt;    );  }}ReactDOM.render(  &lt;Clock /&gt;,  document.getElementById(&#39;root&#39;));</code></pre><p>现在时钟每秒都在变更。</p><p>让我们快速的概括发生了什么，这些方法调用的顺序：</p><ol><li>当<code>&lt;Clock /&gt;</code>被传递给 ReactDOM.render()，React 调用 Clock 组件的构造函数。由于 Clock 需要显示当前时间，它会使用包含当前时间的对象初始化 this.state。我们稍后更新这个 state。</li><li>React 然后调用 Clock 组件的 render 方法。这是 React 学习如何在屏幕显示内容的方式。React 更新 DOM 匹配 Clock 渲染输出。</li><li>当 Clock 输出被插入到 DOM 上，React 调用 componentDidMount 生命周期方法。在里面，Clock 组件告诉浏览器设置 timer 来每秒调用组件的 tick 方法。</li><li>浏览器每秒调用 tick 方法。在里面，Clock 组件通过调用 setState()传递包含当前时间的对象来调度 UI 刷新。感谢 setState 调用，React 知道 state 发生变更，然后再次调用 render 方法告诉屏幕内容刷新。这个时候，render 方法的 this.state.date 将不同，所以 render 输出将包含更新后的时间。React 响应的更新 DOM。</li><li>如果 Clock 组件从 DOM 中删除，React 调用 componentWillUnmount 方法，所以 timer 停止。</li></ol><h3 id="正确的使用状态"><a href="#正确的使用状态" class="headerlink" title="正确的使用状态"></a>正确的使用状态</h3><p>这里有三件关于 setState 需要知道的事情。</p><h4 id="不要直接修改-State"><a href="#不要直接修改-State" class="headerlink" title="不要直接修改 State"></a>不要直接修改 State</h4><p>例如，它将不会触发组件重新渲染：</p><pre><code>// Wrongthis.state.comment = &#39;Hello&#39;;</code></pre><p>应该使用 setState():</p><pre><code>// Correctthis.setState({comment: &#39;Hello&#39;});</code></pre><p>只有构造函数允许赋值给 this.state</p><h4 id="State-更新可能是异步的"><a href="#State-更新可能是异步的" class="headerlink" title="State 更新可能是异步的"></a>State 更新可能是异步的</h4><p>React 为了性能可能将多个 setState 调用批处理到单个更新上。</p><p>因为 this.props 和 this.state 可能异步更新，你不应该依赖它们的值来计算下一个 state。</p><p>举例，下面更新 counter 可能失败：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Wrong</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  counter<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>为了修复它，使用 setState 接受一个函数而不是对象。这个函数接受上一个 state 作为第一个参数，更新的 props 作为第二个参数。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Correct</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们上面使用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>，它和常规函数一样工作：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Correct</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> props<span class="token punctuation">.</span>increment<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="状态更新已合并"><a href="#状态更新已合并" class="headerlink" title="状态更新已合并"></a>状态更新已合并</h4><p>当你调用 setState()，React 合并你提供的对象到当前的 state。</p><p>举例，你的 state 可能包含一些独立的变量：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      posts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      comments<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后你可以独立的调用 setState 来单独的更新它们：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        posts<span class="token punctuation">:</span> response<span class="token punctuation">.</span>posts      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fetchComments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        comments<span class="token punctuation">:</span> response<span class="token punctuation">.</span>comments      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个合并是浅层的，所以 this.setState({comments})完整的保留了 this.state.posts，但是完全的替换了 this.state.comments。</p><h3 id="向下的数据流"><a href="#向下的数据流" class="headerlink" title="向下的数据流"></a>向下的数据流</h3><p>无论父组件还是子组件都不知道某个组件是有状态还是无状态，它们也不知道它是函数还是类定义的。</p><p>这是为什么状态经常被称为本地或封装。它无法被其他任何组件访问，只能被自身所有和设置。</p><p>一个组件可能选择将自己的状态向下作为 props 传递给子组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样也在用户定义的组件生效：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FormattedDate</span> <span class="token attr-name">date</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>date<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 FormattedDate 组件应该接受 props 来的 date，它不需要知道它来自 Clock 的状态、Clock 的 props 或者手动输入的：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FormattedDate</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>It is <span class="token punctuation">{</span>props<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这通常被称为“自顶向下”或者“单向”数据流。任何状态始终属于某个特定组件，并且从该状态派生的数据或 UI 都只能影响树中组件和它下方的组件。</p><p>如果你将组件树想象成 props 的瀑布流，每个组件的状态就像额外的水源，它在任意点加入瀑布，但也向下流动。</p><p>为了证明所有组件是纯粹隔离的，我们创建了一个 App 组件并渲染 3 个<code>&lt;Clock&gt;</code>：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Clock</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个 Clock 设置自己的 timer 并独立的更新。</p><p>在 React 应用中，组件是有状态还是无状态的，它的实现细节随着时间变化可能发生许多改动。你可以在有状态的组件中使用无状态的组件，反之亦然。</p><h2 id="处理事件"><a href="#处理事件" class="headerlink" title="处理事件"></a>处理事件</h2><p>给 React 元素处理事件类似于给 DOM 元素处理事件。但是有一些语法有区别：</p><ul><li>react 事件使用驼峰命名，而不是小写</li><li>你传递给 JSX 的是函数而不是字符串</li></ul><p>举例，HTML：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>activateLasers()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Activate Lasers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>react 有简单的区别：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>activateLasers<span class="token punctuation">}</span><span class="token operator">></span>Activate Lasers<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>另外不同的是你无法 return false 在 React 中阻止默认行为。你必须显示的调用 preventDefault。举例，在 plain HTML，阻止 link 打开新页面的默认行为，你可以这么写：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console.log(<span class="token punctuation">'</span>The link was clicked.<span class="token punctuation">'</span>); return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 React 中，应该这么写：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ActionLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"The link was clicked."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      Click me    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，e 是合成的事件。React 根据<a href="https://www.w3.org/TR/DOM-Level-3-Events/" target="_blank" rel="noopener">W3C 规范</a>来定义这些合成事件，所以你不需要担心夸浏览器兼容问题，看<a href="https://reactjs.org/docs/events.html" target="_blank" rel="noopener">SyntheticEvent</a>文档学习更多相关知识。</p><p>使用 React 时，你通常不需要添加 addEventListener 去监听 DOM 元素创建完成。你应该监听元素第一次渲染完成。</p><p>当你用<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">ES6 class</a>定义一个组件，常见范式是事件处理器是 class 的一个函数。举例，这个 Toggle 组件渲染 button 让用户切换“ON”和“OFF”的状态：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Toggle</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isToggleOn<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// This binding is necessary to make `this` work in the callback</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      isToggleOn<span class="token punctuation">:</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>isToggleOn<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isToggleOn <span class="token operator">?</span> <span class="token string">"ON"</span> <span class="token punctuation">:</span> <span class="token string">"OFF"</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toggle</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你必须关心 JSX 回调中的 this 含义。在 JavaScript 中，class 方法不是默认<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener">绑定</a>的。如果你忘记 bindthis.handleClick 并传递它给 onClick，当方法被实际调用时,this 是 undefined。</p><p>这不是 React 指定的行为；它是<a href="https://www.smashingmagazine.com/2014/01/understanding-javascript-function-prototype-bind/" target="_blank" rel="noopener">函数在 JavaScript 中的工作方式</a>。通常，如果你更喜欢方法不带()，像 nClick={this.handleClick}，应该要绑定它。</p><p>如果 bind 让你烦恼，这里有两个方式可以解决这个问题。如果你使用实验性的<a href="https://babeljs.io/docs/plugins/transform-class-properties/" target="_blank" rel="noopener">公开的 class 字段语法</a>，你应该使用 class 字段正确的绑定回调。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">LoggingButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这个语法保证this绑定到handleClick</span>  <span class="token comment" spellcheck="true">// Warning: 这是 *实验性* 语法.</span>  handleClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">Create React App</a>默认开启了这个语法</p><p>如果你不使用 class 字段语法，你可以使用箭头函数：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">LoggingButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"this is:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这个语法保证 `this` 被绑定到handleClick</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个语法的问题是每次 LoggingButton 渲染时都会创建不同的 callback 函数。大多数情况下，没有关系。但是，如果回调是作为 prop 传递给低级别的组件，这些组件可能会做额外的重复渲染。我们通常建议在构建函数中绑定它或者使用 class 字段语法，来避免这种性能问题。</p><h3 id="传递参数给事件处理器"><a href="#传递参数给事件处理器" class="headerlink" title="传递参数给事件处理器"></a>传递参数给事件处理器</h3><p>循环内，通常希望将额外的参数传递给事件处理器。举例，如果 id 是 row ID，以下任何一种方法都可以：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">deleteRow</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>deleteRow<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Delete Row<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面两个是等效的，分别使用<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数</a>和<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind" target="_blank" rel="noopener">Function.prototype.bind</a>。</p><p>这两种情况下，e 代表 React 事件作为 id 之后的第二个参数传递。使用箭头函数，我们需要显示的传递，但是使用 bind， 任何参数将自动转发。</p><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>在 React 中，你可以创建不同的组件封装不同的行为。然后你可以根据应用的状态来渲染其中一些。</p><p>在 React 中条件渲染工作和 JavaScript 工作方式一样。使用 JavaScript 操作符 if 或者条件操作符来创建代表当前状态的元素，并让 React 更新 UI 匹配它们。</p><p>考虑这两个组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">UserGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome back<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">GuestGreeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Please sign up<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我将创建 Greeting 组件格局 user 是否登录来显示这两个组件之一：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> props<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GuestGreeting</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// Try changing to isLoggedIn={true}:</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个案例根据 isLoggedIn prop 的值渲染不同的 greeting。</p><h3 id="元素变量"><a href="#元素变量" class="headerlink" title="元素变量"></a>元素变量</h3><p>你可以使用变量来保存元素。它可以帮助你有条件渲染组件中的一部分，其余的输出不变。</p><p>考虑这两个新组件代表登出和登录按钮：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">LoginButton</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">LogoutButton</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Logout<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在下面的案例，我们将创建<a href="https://reactjs.org/docs/state-and-lifecycle.html#adding-local-state-to-a-class" target="_blank" rel="noopener">无状态组件</a>叫 LoginControl。</p><p>它将根据它当前状态渲染<code>&lt;LoginButton /&gt;</code> or <code>&lt;LogoutButton /&gt;</code>。它也渲染来自上一个案例的<code>&lt;Greeting /&gt;</code>。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">LoginControl</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleLoginClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleLogoutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isLoggedIn<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>    <span class="token keyword">let</span> button<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoggedIn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Greeting</span> <span class="token attr-name">isLoggedIn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isLoggedIn<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">{</span>button<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginControl</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>声明变量并使用 if 语句能够很好的条件渲染组件，有时候你可能想要用更短的语法。这里有两个在 JSX 中内联的条件表达式，解释如下：</p><h3 id="内联的-if-逻辑和-amp-amp-操作符"><a href="#内联的-if-逻辑和-amp-amp-操作符" class="headerlink" title="内联的 if 逻辑和&amp;&amp;操作符"></a>内联的 if 逻辑和&amp;&amp;操作符</h3><p>你可以在 JSX 的大括号中嵌入<a href="https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx" target="_blank" rel="noopener">任意的表达式</a>。这包括 JavaScript 逻辑&amp;&amp;操作符。条件的包裹一个元素可以很方便：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Mailbox</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> unreadMessages <span class="token operator">=</span> props<span class="token punctuation">.</span>unreadMessages<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>You have <span class="token punctuation">{</span>unreadMessages<span class="token punctuation">.</span>length<span class="token punctuation">}</span> unread messages<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"React"</span><span class="token punctuation">,</span> <span class="token string">"Re: React"</span><span class="token punctuation">,</span> <span class="token string">"Re:Re: React"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Mailbox</span> <span class="token attr-name">unreadMessages</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>messages<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之所以有效，因为在 JavaScript 中 true &amp;&amp; expression 总是变成 expression,并且 false &amp;&amp; expression 总是 false。</p><p>因此，如果条件是 true，&amp;&amp; 后面的元素会立刻输出。如果是 false，React 将忽略并跳过。</p><h3 id="内联的-if-else-条件操作符"><a href="#内联的-if-else-条件操作符" class="headerlink" title="内联的 if-else 条件操作符"></a>内联的 if-else 条件操作符</h3><p>用于内联渲染元素的另一种方法是用 JavaScript 条件符号 condition?true:false。</p><p>在下面的案例，我们使用它来条件渲染小文本模块。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      The user is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>isLoggedIn <span class="token operator">?</span> <span class="token string">'currently'</span> <span class="token punctuation">:</span> <span class="token string">'not'</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span> logged <span class="token keyword">in</span><span class="token punctuation">.</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尽管表示的不是很明显，但是它可以使用大的表达式：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isLoggedIn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isLoggedIn<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>isLoggedIn        <span class="token operator">?</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LogoutButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLogoutClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token punctuation">:</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LoginButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleLoginClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就像 JavaScript 一样，你可以根据你团队的可读性来选择合适的排版样式。记住只要条件变得太复杂，可能就是提取组件的好时机。</p><h3 id="阻止组件渲染"><a href="#阻止组件渲染" class="headerlink" title="阻止组件渲染"></a>阻止组件渲染</h3><p>在很少的情况下你可能想要隐藏自己，即使被其他组件渲染。返回 null 来代替渲染输出。</p><p>在下面的案例中，<code>&lt;WarningBanner /&gt;</code>依赖 prop 的 warn 值来渲染。如果值是 false，然后这个组件就不会渲染：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">WarningBanner</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>warn<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Warning<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> showWarning<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleToggleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>      showWarning<span class="token punctuation">:</span> <span class="token operator">!</span>state<span class="token punctuation">.</span>showWarning<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WarningBanner</span> <span class="token attr-name">warn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleToggleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>showWarning <span class="token operator">?</span> <span class="token string">"Hide"</span> <span class="token punctuation">:</span> <span class="token string">"Show"</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件 render 方法返回 null 不会印象组件生命周期方法的触发。componentDidUpdate 仍然会被被调用。</p><h2 id="列表和-keys"><a href="#列表和-keys" class="headerlink" title="列表和 keys"></a>列表和 keys</h2><p>首先让我们回顾一下，如何在 JavaScript 中转换列表。</p><p>下面给我们的代码，我们使用 map()函数将 numbers 数组的值转换成 2 倍。我们通过 map()返回一个新数组给 doubled 变量，然后打印它：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> number <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doubled<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个代码输出<code>[2, 4, 6, 8, 10]</code>到控制台。</p><p>在 React 中，将数组转换成元素列表几乎相同。</p><h3 id="渲染多个组件"><a href="#渲染多个组件" class="headerlink" title="渲染多个组件"></a>渲染多个组件</h3><p>你可以构建元素的集合，然后在 JSX 中用大括号{}包裹它们。</p><p>下面，我们使用 JavaScript map()函数循环 numbers 数组。每个 item 返回<code>&lt;li&gt;</code>元素。最后我们赋值元素数组结果给 listItems:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们将整个 listItems 数组包含在<code>&lt;ul&gt;</code>元素内，然后渲染它到 DOM 中：</p><pre class="line-numbers language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这段代码显示数字到 1-5 的符号列表。</p><h3 id="基础的-List-组件"><a href="#基础的-List-组件" class="headerlink" title="基础的 List 组件"></a>基础的 List 组件</h3><p>通常你应该在组件中渲染列表。</p><p>我们可以重构之前的案例为一个接受 numbers 数组的组件并输出 list 元素。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NumberList</span> <span class="token attr-name">numbers</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你运行这段代码，系统会警告应该为 list item 提供 key。当创建列表元素时，key 是你需要包括的特殊字符串属性。我们将在下一节讨论为什么它如此重要。</p><p>为 numbers.map()中的列表项赋值 key，修复这个缺失 key 的问题。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NumberList</span> <span class="token attr-name">numbers</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Keys"><a href="#Keys" class="headerlink" title="Keys"></a>Keys</h3><p>keys 帮助 React 识别哪些 item 发生更改，添加或者删除。应该为数组元素分配 keys，让元素能够稳定的被识别：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>number<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>选 key 的最好方式是使用独一无二的字符串识别 list 项和它相邻的项：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> todoItems <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你没有使用稳定 id 来渲染 item 时，最后一招，你可以使用 item 的 index 作为 keys：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> todoItems <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>todo<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// 仅当item没有稳定的id时</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>todo<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果 items 的顺序可能发生变化，我们不建议使用 index 作为 keys。这可能导致性能的负面影响并且会对组件状态造成问题。查询 Robin Pokorny 的文章<a href="https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318" target="_blank" rel="noopener">深度解析为什么使用 index 作为 key 会带来负面影响</a></p><p>如果你有兴趣了解更多，这里有一篇<a href="https://reactjs.org/docs/reconciliation.html#recursing-on-children" target="_blank" rel="noopener">深度解析为什么 keys 是必须的</a></p><h3 id="用-key-提取组件"><a href="#用-key-提取组件" class="headerlink" title="用 key 提取组件"></a>用 key 提取组件</h3><p>keys 仅在数组周围的上下文中才有效。</p><p>举例，如果提取 ListItem 组件，你应该保留 key 在<code>&lt;ListItem /&gt;</code>数组中而不是 ListItem 组件里的<code>&lt;li&gt;</code>元素上。</p><p>例子：错误使用 key</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> value <span class="token operator">=</span> props<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// Wrong! 不应该在这里指定key:</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// Wrong! key应该在这里指定:</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NumberList</span> <span class="token attr-name">numbers</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例子：正确使用 key</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Correct! 不需要在这里指定key:</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// Correct! key应该在数组中指定.</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NumberList</span> <span class="token attr-name">numbers</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>numbers<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span>  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个好的经验是 map()中的元素都需要 keys。</p><h3 id="key-一定在相邻-key-中唯一"><a href="#key-一定在相邻-key-中唯一" class="headerlink" title="key 一定在相邻 key 中唯一"></a>key 一定在相邻 key 中唯一</h3><p>在数组中使用 keys 应该让它们相邻唯一。但是不需要它们在全局唯一。我们可以在不同的数组中使用相同的 keys。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> sidebar <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> props<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>sidebar<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>      <span class="token punctuation">{</span>content<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">"Welcome to learning React!"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string">"Installation"</span><span class="token punctuation">,</span> content<span class="token punctuation">:</span> <span class="token string">"You can install React from npm."</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Blog</span> <span class="token attr-name">posts</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>posts<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>keys 是给 React 的提示，它们不会传递给你的组件。如果你的组件需要相同的值，使用不同的名字显示的作为 prop 传递它：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> content <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Post</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">id</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">title</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的例子，Post 组件应该读 props.id，而不是 props.key。</p><h3 id="在-JSX-中嵌入-map"><a href="#在-JSX-中嵌入-map" class="headerlink" title="在 JSX 中嵌入 map()"></a>在 JSX 中嵌入 map()</h3><p>在上面的例子中我们独立声明了 listItems 变量，然后把它包含到 JSX 中：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">const</span> listItems <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>listItems<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JSX 允许<a href="https://reactjs.org/docs/introducing-jsx.html#embedding-expressions-in-jsx" target="_blank" rel="noopener">嵌入任何表达式</a>到大括号中，所以我们应该内联 map()结果：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">NumberList</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> numbers <span class="token operator">=</span> props<span class="token punctuation">.</span>numbers<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItem</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>number<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有时候这么做会使得代码更清晰，但是这种风格也会被滥用。像在 JavaScript 中，由你决定值得提取变量以提高可读性。记住如果 map()的主体过于嵌套，这应该是提取组件的好时机。</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><blockquote><p>HTML 表单元素和 React 的其他 DOM 元素工作方式有点不一样，因为表单元素原生保持一些内部状态。举例，这个表单在纯 HTML 中接受单个 name：</p></blockquote><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>    Name<span class="token punctuation">:</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当用户提交表单，这个表单有默认 HTML 表单的行为，即浏览到新页面。如果你想要在 React 使用这个行为，这就可以了。但是大多数情况下，更方便的是用 JavaScript 函数来处理表单提交，可以访问用户输入这个表单的数据。标准实现这个的技术叫做“受控组件”。</p><h3 id="受控组件"><a href="#受控组件" class="headerlink" title="受控组件"></a>受控组件</h3><p>在 HTML 中，表单元素像<code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>通常维护自己的状态并且根据用户输入来更新它。在 react 中，易变的状态通常保存在组件的 state 中，只被 setState()更新。</p><p>我们可以通过将 React 状态变成“单一事实真像”来合并他们俩。然后 React 渲染的表单控制后续用户输入发生的事情。输入表单元素的值受 由 React 这样方式的受控组件控制。</p><p>举例，如果我们想让上一个列子在提交时打印 name，我们可以将表单写成受控组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">NameForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"A name was submitted: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          Name<span class="token punctuation">:</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>            <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span>            <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为 value 属性是在我们表单元素上设置的，显示的 value 一直是 this.state.value，使得 React 状态称为了真像的来源。因为每次按键运行 handleChange 来更新 React 状态，显示的 value 由用户输入来更新。</p><p>使用受控组件，输入的 value 一直由 React 状态驱动。虽然这意味着你必须输入更多的代码，但是现在你也可以传递值给其他 UI 元素，或者从其他事件处理器中重置它。</p><h3 id="textarea-标签"><a href="#textarea-标签" class="headerlink" title="textarea 标签"></a>textarea 标签</h3><p>在 HTML 中，<code>&lt;textarea&gt;</code>元素由它的 children 来定义 text：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">></span></span>Hello there<span class="token punctuation">,</span> <span class="token keyword">this</span> is some text <span class="token keyword">in</span> a text area<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 React 中，<code>&lt;textarea&gt;</code>使用 value 属性来替换它。这种方式，使用<code>&lt;textarea&gt;</code>的表单可以与使用单行 input 的表单一样。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">EssayForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token string">"Please write an essay about your favorite DOM element."</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"An essay was submitted: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          Essay<span class="token punctuation">:</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 this.state.value 在构造函数中初始化，所以文本区域开始带一些文本在其中。</p><h3 id="select-标签"><a href="#select-标签" class="headerlink" title="select 标签"></a>select 标签</h3><p>在 HTML 中，<code>&lt;select&gt;</code>创建一个下拉的列表。举例，这个 HTML 创建了一个下拉列表的 flavors：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grapefruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Grapefruit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>coconut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    Coconut  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mango<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mango<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意 Coconut 选项是初始被选中的，因为这个 selected 属性。React 中，用根的 Select 标签的 value 属性来替换选项的 selected 属性。在受控组件中非常方便，因为你只需要在一个地方更新它。举例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">FlavorForm</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">"coconut"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> value<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSubmit</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Your favorite flavor is: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSubmit<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          Pick your favorite flavor<span class="token punctuation">:</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>grapefruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Grapefruit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Lime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>coconut<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Coconut<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mango<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Mango<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的来说，这使得<code>&lt;input type=&quot;text&quot;&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>所有工作都非常相似 - 它们都接受一个 value 属性，你可以它来实现一个受控组件。</p><blockquote><p>注意：<br>你可以传递一个数组给 value 属性，允许你在 select 标签中选择多个选项：</p></blockquote><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">multiple</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="文件输入标签"><a href="#文件输入标签" class="headerlink" title="文件输入标签"></a>文件输入标签</h3><p>在 HTML 中，一个<code>&lt;input type=&quot;file&quot;&gt;</code>让用户从它们的设备存储中选择一个或多个文件上传到服务器或者由 JavaScript 通过<a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications" target="_blank" rel="noopener">File API</a>操作</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为它的值是只读的，所以它在 React 中是不受控的组件。稍后在文档中和其他不受控组件一起讨论。</p><h3 id="处理多个输入"><a href="#处理多个输入" class="headerlink" title="处理多个输入"></a>处理多个输入</h3><p>当你需要处理多个受控的 input 元素，你可以给每个元素添加 name 属性，并让处理器函数根据 event.target.name 的值来选择要执行的操作。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Reservation</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      isGoing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      numberOfGuests<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleInputChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>    <span class="token keyword">const</span> value <span class="token operator">=</span> target<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">"isGoing"</span> <span class="token operator">?</span> target<span class="token punctuation">.</span>checked <span class="token punctuation">:</span> target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> target<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          Is going<span class="token punctuation">:</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isGoing<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>            <span class="token attr-name">checked</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isGoing<span class="token punctuation">}</span></span>            <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          Number <span class="token keyword">of</span> guests<span class="token punctuation">:</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>numberOfGuests<span class="token punctuation">"</span></span>            <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span>            <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>numberOfGuests<span class="token punctuation">}</span></span>            <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleInputChange<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们使用 ES6 的<a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#Computed_property_names" target="_blank" rel="noopener">计算属性 name</a>语法来更新 state key 为给定的输入 name。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">:</span> value<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>它和 ES5 这段代码等效：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> partialState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>partialState<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>partialState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外，因为 setState()自动<a href="https://reactjs.org/docs/state-and-lifecycle.html#state-updates-are-merged" target="_blank" rel="noopener">合并部分 state 到当前 state</a>，我们只需要用修改过的部分来调用它。</p><h3 id="控制输入-Null-值"><a href="#控制输入-Null-值" class="headerlink" title="控制输入 Null 值"></a>控制输入 Null 值</h3><p>在受控组件上指定 value 属性值会阻止用户更改这个 input，除非你希望这么做。如果你指定了 value，但是 input 仍然可以被编辑，你可能偶然的设置 value 为 undefined 或者 null。</p><p>下面代码演示它。（输入首先被锁定，但经过短暂的延迟后变成可编辑）</p><pre class="line-numbers language-jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hi<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> mountNode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="受控组件的替代品"><a href="#受控组件的替代品" class="headerlink" title="受控组件的替代品"></a>受控组件的替代品</h3><p>使用受控组件有时可能很乏味，因为你可能需要为你每种数据更改方式写一个事件处理器，还需要通过 React 组件来传递所有输入状态。当你将已存在的代码转成 React，或者使用非 React 库集成到 React 应用时它会变得特别烦人。在这些场景下，你可能想看下<a href="https://reactjs.org/docs/uncontrolled-components.html" target="_blank" rel="noopener">非受控组件</a>，这是一种实现 input 表单的另外一种技术。</p><h3 id="全面解决方案"><a href="#全面解决方案" class="headerlink" title="全面解决方案"></a>全面解决方案</h3><p>如果你在查找一个完美的解决方案包括验证，跟踪访问的字段以及处理表单提交，<a href="https://jaredpalmer.com/formik" target="_blank" rel="noopener">Formik</a>是一个不错的选择。然而，它基于受控组件和管理状态相同的原理创建- 所以不要忽略学习它们。</p><h2 id="状态提升"><a href="#状态提升" class="headerlink" title="状态提升"></a>状态提升</h2><blockquote><p>通常，一些组件需要反映相同的变化数据。我们建议提升共享的状态到它们最近的父组件中。让我们看看它是如何运作的。</p></blockquote><p>在这节中，我们创建了一个温度计来计算在给定气压下水是否会沸腾。</p><p>我们从 BoilingVerdict 的组件开始。它接受 celsius 温度作为 prop，然后打印它是否足以沸腾水。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">BoilingVerdict</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>celsius <span class="token operator">>=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The water would boil<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The water would not boil<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面，我们创建了一个名为 Calculator 组件。它渲染<code>&lt;input&gt;</code>组件让你输入水温，保存它的值到 this.state.temperature。</p><p>另外，它根据当前输入值渲染 BoilingVerdict。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Enter temperature <span class="token keyword">in</span> Celsius<span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BoilingVerdict</span> <span class="token attr-name">celsius</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加第二个输入"><a href="#添加第二个输入" class="headerlink" title="添加第二个输入"></a>添加第二个输入</h3><p>我们新的要求是，除了已有的摄氏度输入，我们还提供华氏度输入，并保持它们的同步。</p><p>我们以从 Calculator 中提取 TemperatureInput 组件开始。我们将添加新的 scale prop 到其中，它可以是”c”或者”f”：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> scaleNames <span class="token operator">=</span> <span class="token punctuation">{</span>  c<span class="token punctuation">:</span> <span class="token string">"Celsius"</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span> <span class="token string">"Fahrenheit"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TemperatureInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>scale<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Enter temperature <span class="token keyword">in</span> <span class="token punctuation">{</span>scaleNames<span class="token punctuation">[</span>scale<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们现在可以改变 Calculator 渲染独立的温度输入框：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TemperatureInput</span> <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TemperatureInput</span> <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我有两个输入框，但是当你向其中一个输入温度时，另外一个不会更新。它与我们的要求相矛盾：我们想要保持两个同步。</p><p>我们无法在 Calculator 中显示 BoilingVerdict。因为 Calculator 无法知道当前的温度，它们被隐藏在 TemperatureInput 内部。</p><h3 id="编写转换功能"><a href="#编写转换功能" class="headerlink" title="编写转换功能"></a>编写转换功能</h3><p>首先，我们将写两个函数分别是将摄氏度转成华氏度，以及相反过程：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">toCelsius</span><span class="token punctuation">(</span>fahrenheit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fahrenheit <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">toFahrenheit</span><span class="token punctuation">(</span>celsius<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>celsius <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两个函数转换数字。我们将写另外一个函数接受温度字符串和转换函数作为参数，并返回字符串。我们将使用它来计算根据另外一个值来计算它的值。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">tryConvert</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> convert<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> input <span class="token operator">=</span> <span class="token function">parseFloat</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> rounded <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>output <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> rounded<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，<code>tryConvert(&#39;abc&#39;, toCelsius)</code>返回空字符串，而<code>tryConvert(&#39;10.22&#39;, toFahrenheit)</code>返回 50.396。</p><h3 id="提升状态"><a href="#提升状态" class="headerlink" title="提升状态"></a>提升状态</h3><p>当前，两个 TemperatureInput 组件独立的保存它们的值到本地 state 中：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TemperatureInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>temperature<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>temperature<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然而，我们想让输入组件互相同步。当我们更新摄氏度输入，华氏度输入组件反映转化后的温度，反之亦然。</p><p>在 React 中，共享状态是通过根据需要将它们移到最近的公共父组件中。这叫做”状态提升“。我们将从 TemperatureInput 中删除本地状态并将它们移到 Calculator 中。</p><p>如果 Calculator 拥有共享状态，它会变成两个输入组件的当前温度的”真相源头“。它可以指导两个拥有一致的值。因为两个 TemperatureInput 组件的 props 都来自原相同的父组件 Calculator，这两个组件将一直是同步的。</p><p>让我们来看下它是如何一步步的工作。</p><p>首先，我们将在 TemperatureInput 组件中使用 this.props.temperature 来替换 this.state.temperature。至此，让我们假装 this.props.temperature 已经存在，虽然未来我们将从 Calculator 传递它：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Before: const temperature = this.state.temperature;</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道<a href="https://reactjs.org/docs/components-and-props.html#props-are-read-only" target="_blank" rel="noopener">props 是只读的</a>。当 temperature 在本地状态中，TemperatureInput 可以调用<code>this.setState()</code>来更改它。然而，现在 temperature 来自于父组件传递的 prop，TemperatureInput 组件无法控制它。</p><p>在 React 中，它通常让组件受控来解决。就像 DOM<code>&lt;input&gt;</code>接受 value 和 onChange prop，所以可以自定义 TemperatureInput 组件接受 temperature 和 onTemperatureChange 来自父组件 Calculator 的 props。</p><p>现在，当 TemperatureInput 组件想要更新它的 temperature 时，它调用<code>this.props.onTemperatureChange</code>：</p><pre class="line-numbers language-js"><code class="language-js">  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Before: this.setState({temperature: e.target.value});</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onTemperatureChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>在自定义组件中 temperature 和 onTemperatureChange 属性名没有特殊的意义。我们可以用任意的名字称呼它们，像 value 和 onChange 的名字是一种常见的约束。</p></blockquote><p>Calculator 组件将提供 onTemperatureChange 和 temperature 属性。它将通过修改自己的本地状态来处理更改，用新值来渲染两个输入组件。我们将看到新 Calculator 实现的非常快。</p><p>深入了解 Calculator 更改之前，让我们来概括 TemperatureInput 的更改。我们删除了本地状态，改用 this.state.temperature 而不是 this.state.temperature。当我们想要更改时我们调用<code>this.props.onTemperatureChange()</code>来代替<code>this.setState()</code>，它由 Calculator 提供：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">TemperatureInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onTemperatureChange</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>scale<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>Enter temperature <span class="token keyword">in</span> <span class="token punctuation">{</span>scaleNames<span class="token punctuation">[</span>scale<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>temperature<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们转到 Calculator 组件。</p><p>我们将存储当前输入组件的 temperature 和 scale 到本地状态。它是我们从输入组件中提升的状态，它将作为两个组件的”真相源头”。它是我们需要知道渲染两个输入组件的所有数据的最小表示形式。</p><p>举例，如果我们输入 37 到摄氏度输入组件，Calculator 组件状态将是：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"temperature"</span><span class="token operator">:</span> <span class="token string">"37"</span><span class="token punctuation">,</span>  <span class="token property">"scale"</span><span class="token operator">:</span> <span class="token string">"c"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果稍后修改华摄度字段为 212，Calculator 状态值变成：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"temperature"</span><span class="token operator">:</span> <span class="token string">"212"</span><span class="token punctuation">,</span>  <span class="token property">"scale"</span><span class="token operator">:</span> <span class="token string">"f"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以存储两个输入的值，但是实际证明不需要。存储最近修改输入的值和 scale 足够了。我们可以根据当前的 temperature 和 scale 来推断另外一个输入组件的值。</p><p>这两个输入是同步的，因为它们的值是被相同的 state 计算出来的：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleCelsiusChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleCelsiusChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleFahrenheitChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleFahrenheitChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> temperature<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> scale<span class="token punctuation">:</span> <span class="token string">"c"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleCelsiusChange</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> scale<span class="token punctuation">:</span> <span class="token string">"c"</span><span class="token punctuation">,</span> temperature <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleFahrenheitChange</span><span class="token punctuation">(</span>temperature<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> scale<span class="token punctuation">:</span> <span class="token string">"f"</span><span class="token punctuation">,</span> temperature <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> scale <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>scale<span class="token punctuation">;</span>    <span class="token keyword">const</span> temperature <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>temperature<span class="token punctuation">;</span>    <span class="token keyword">const</span> celsius <span class="token operator">=</span>      scale <span class="token operator">===</span> <span class="token string">"f"</span> <span class="token operator">?</span> <span class="token function">tryConvert</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> toCelsius<span class="token punctuation">)</span> <span class="token punctuation">:</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">const</span> fahrenheit <span class="token operator">=</span>      scale <span class="token operator">===</span> <span class="token string">"c"</span> <span class="token operator">?</span> <span class="token function">tryConvert</span><span class="token punctuation">(</span>temperature<span class="token punctuation">,</span> toFahrenheit<span class="token punctuation">)</span> <span class="token punctuation">:</span> temperature<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TemperatureInput</span>          <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c<span class="token punctuation">"</span></span>          <span class="token attr-name">temperature</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>celsius<span class="token punctuation">}</span></span>          <span class="token attr-name">onTemperatureChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleCelsiusChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TemperatureInput</span>          <span class="token attr-name">scale</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f<span class="token punctuation">"</span></span>          <span class="token attr-name">temperature</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>fahrenheit<span class="token punctuation">}</span></span>          <span class="token attr-name">onTemperatureChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleFahrenheitChange<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BoilingVerdict</span> <span class="token attr-name">celsius</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>celsius<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在，无论你编辑哪个输入框，Calculator 的 this.state.temperature 和 this.state.scale 都会被更新。其中一个输入框保留用户输入，另外一个输入值始终根据这个值来重新计算。</p><p>让我们概括当你修改一个输入框时发生了什么：</p><ul><li>React 调用 DOM<code>&lt;input&gt;</code>的 onChange 函数。在我们的例子中，在 TemperatureInput 组件中它是 handleChange 方法</li><li>在 TemperatureInput 组件中的 handleChange 方法使用新的值调用<code>this.props.onTemperatureChange()</code>。它的 props 包含 onTemperatureChange，由父组件 Calculator 提供。</li><li>起初渲染时，Calculator 要指定摄氏度 TemperatureInput 组件的 onTemperatureChange 是 Calculator 的 handleCelsiusChange 方法，华摄度 TemperatureInput 组件的 onTemperatureChange 是 Calculator 的 handleFahrenheitChange 方法。所以我们修改的输入组件调用 Calculator 其中任何一个。</li><li>在这些方法中，Calculator 通过调用<code>this.setState()</code>设置当前修改过的 scale 和 input 来告诉 React 重新渲染它自己。</li><li>React 调用 Calculator 组件的 render 方法去 UI 呈现。两个输入组件的值基于当前温度和 scale 重新计算。在此执行温度转换。</li><li>React 根据 Calculator 提供的新值来分别调用 TemperatureInput 组件的 render 方法去 UI 呈现。</li><li>React 调用 BoilingVerdict 组件的 render 方法，传递华摄度的温度给它。</li><li>React DOM 根据输入的值是否匹配水沸腾，并将结果更新回 DOM。我刚编辑输入框接收的当前值，另一个输入框更新了转化之后的温度值。</li></ul><p>每次更新都会走这些步骤，所以输入框一直同步。</p><h3 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h3><p>在 React 应用中任何可变数据应该只有唯一数据源。通常，state 是第一个被添加到需要渲染数据的组件中。然后，如果其他组件也需要它，你可以提升它到最近的公共父组件中。你应该依赖<a href="https://reactjs.org/docs/state-and-lifecycle.html#the-data-flows-down" target="_blank" rel="noopener">自顶向下的数据流</a>，而不是在不同组件之间同步 state。</p><p>提升状态会比双向绑定方式写更多的模板代码，但是好处是，花费很少的工作来找到和隔离 bug。因为由于状态只存在于组件内，并且只有组件可以更改它，bug 出现的范围很少。另外，你可以实现任何自定义逻辑来转换用户输入。</p><p>如果有些东西可以被 props 和 state 同时驱动，它就不应该存在 state 中。举例，没有存储 celsiusValue 和 fahrenheitValue，我们只存储了最近修改的 temperature 和它的 scale。另外的输入框的值可以被 render()函数计算出来。这使得我们可以清楚输入框内容，在不丢失用户输入精度的情况下应用四舍五入计算。</p><p>当你在 UI 上看到某些错误的时候，你可以使用<a href="https://github.com/facebook/react/tree/master/packages/react-devtools" target="_blank" rel="noopener">React Developer Tools</a>来诊断 props,逐级搜索结构树知道找到相应修改状态的组件。它让你能够跟踪 bug 的源头：<br><img src="https://reactjs.org/ef94afc3447d75cdc245c77efb0d63be/react-devtools-state.gif" alt="图"></p><h2 id="组合-vs-继承"><a href="#组合-vs-继承" class="headerlink" title="组合 vs 继承"></a>组合 vs 继承</h2><blockquote><p>React 有非常强大的组合模型，我们建议使用组合而不是继承来在组件间复用代码</p></blockquote><p>这一节，我们将考虑初学者使用继承时遇到些问题，并展示我们如何使用组合来解决它们的。</p><h3 id="包含关系"><a href="#包含关系" class="headerlink" title="包含关系"></a>包含关系</h3><p>一些组件无法提前知道它们的 children。这在 Sidebar（侧边栏）或者 Dialog 等代表盒子的组件中非常常见。</p><p>我们建议像这样的组件使用使用指定的 children 属性来传递 children 元素给它们的输出。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FancyBorder</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token string">"FancyBorder FancyBorder-"</span> <span class="token operator">+</span> props<span class="token punctuation">.</span>color<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>让其他组件通过嵌套到 JSX ，可以传任意的 children 给它们。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyBorder</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dialog-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dialog-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Thank you <span class="token keyword">for</span> visiting our spacecraft<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyBorder</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>任何在<code>&lt;FancyBorder&gt;</code>JSX 标签都被认为是 FancyBorder 的 children prop。因为 FancyBorder 在<code>&lt;div&gt;</code>中渲染<code>{props.children}</code>, 传递的元素最终出现在输出中。</p><p>很少有，有时候你需要在组件中要多个洞。这种情况你可以自己想出约定，而不是使用 children。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">SplitPane</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SplitPane<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SplitPane-left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>left<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SplitPane-right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>right<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SplitPane</span> <span class="token attr-name">left={&lt;Contacts</span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span> right<span class="token operator">=</span><span class="token punctuation">{</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Chat</span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React 元素像 <code>&lt;Contacts /&gt;</code>和<code>&lt;Chat /&gt;</code>只是对象，所以你可以跟其他数据一样作为 props 传递。这种方法可能让你想到了其他库中的槽，但是 React 没有这样的限制，你可以将任何东西作为 props 属性传递。</p><h3 id="特列关系"><a href="#特列关系" class="headerlink" title="特列关系"></a>特列关系</h3><p>有时候我们认为相关的组件是其他组件的特列。我们可能认为 WelcomeDialog 是 Dialog 的特列。</p><p>在 React 中，它可能被组合实现，特殊组件渲染通用组件并使用 props 配置它。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyBorder</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dialog-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dialog-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyBorder</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Dialog</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Welcome<span class="token punctuation">"</span></span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Thank</span> <span class="token attr-name">you</span> <span class="token attr-name">for</span> <span class="token attr-name">visiting</span> <span class="token attr-name">our</span> <span class="token attr-name">spacecraft!"</span> <span class="token punctuation">/></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组合也适用于 classes 定义的组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyBorder</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dialog-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dialog-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyBorder</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SignUpDialog</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleSignUp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleSignUp<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> login<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Dialog</span>        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mars</span> <span class="token attr-name">Exploration</span> <span class="token attr-name">Program"</span>        <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>How</span> <span class="token attr-name">should</span> <span class="token attr-name">we</span> <span class="token attr-name">refer</span> <span class="token attr-name">to</span> <span class="token attr-name">you?"</span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleSignUp<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Sign Me Up<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Dialog</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleChange</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> login<span class="token punctuation">:</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleSignUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Welcome aboard, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>login<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="那么继承呢？"><a href="#那么继承呢？" class="headerlink" title="那么继承呢？"></a>那么继承呢？</h3><p>在 Facebook,我们使用上千个组件，我们没有找到任何案例使用继承来创建层级结构。</p><p>Props 和组合让你清晰和安全方式灵活的自定义组件 UI 和行为。记住组件可能接受任意的 props，包括基础类型，React 元素或者函数。</p><p>如果你想要在组件之间复用非 UI 功能，我们建议提取它到独立的 JavaScript 模块中。组件不用继承，可以导入它使用函数，对象或者 class。</p><h2 id="React-哲学"><a href="#React-哲学" class="headerlink" title="React 哲学"></a>React 哲学</h2><blockquote><p>我们认为 React 是使用 JavaScript 构建大型快速应用的首选方式。它在 Facebook 和 Instagram 上表现的很好。</p></blockquote><p>React 重要方面之一是让你在构建应用时候思考应用程序。在这篇文档中，我们将引导你完成在 React 中构建一个可搜索的产品数据表格的思考过程。</p><h3 id="从设计稿开始"><a href="#从设计稿开始" class="headerlink" title="从设计稿开始"></a>从设计稿开始</h3><p>想象我们已经有了 JSON API 和设计师的设计稿。设计稿如下：<br><img src="https://reactjs.org/static/1071fbcc9eed01fddc115b41e193ec11/d4770/thinking-in-react-mock.png" alt="设计稿"><br>我们 JSON API 返回的数据格式如下：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>category<span class="token operator">:</span> <span class="token string">"Sporting Goods"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token string">"$49.99"</span><span class="token punctuation">,</span> stocked<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Football"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token operator">:</span> <span class="token string">"Sporting Goods"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token string">"$9.99"</span><span class="token punctuation">,</span> stocked<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Baseball"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token operator">:</span> <span class="token string">"Sporting Goods"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token string">"$29.99"</span><span class="token punctuation">,</span> stocked<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Basketball"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token operator">:</span> <span class="token string">"Electronics"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token string">"$99.99"</span><span class="token punctuation">,</span> stocked<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"iPod Touch"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token operator">:</span> <span class="token string">"Electronics"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token string">"$399.99"</span><span class="token punctuation">,</span> stocked<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"iPhone 5"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>category<span class="token operator">:</span> <span class="token string">"Electronics"</span><span class="token punctuation">,</span> price<span class="token operator">:</span> <span class="token string">"$199.99"</span><span class="token punctuation">,</span> stocked<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Nexus 7"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-1：将-UI-拆分为组件层次结构"><a href="#步骤-1：将-UI-拆分为组件层次结构" class="headerlink" title="步骤 1：将 UI 拆分为组件层次结构"></a>步骤 1：将 UI 拆分为组件层次结构</h3><p>首先在设计稿中你将需要给每个组件（和子组件）画一个方框，并给它们名字。如果你和设计师一起工作，他们可能已经做过这样的工作了，所以跟他们进行交流！他们的 Photoshop 图层名字最终可以作为你 React 组件的名字。</p><p>但是你知道哪些应该在一个组件？使用决定创建新方法和对象相同的技术。其中一种技术是<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">单一职责</a>，它就是一个组件应该只做一件事。随着组件增长，它应该被分解到更小的组件中。</p><p>因为你需要经常显示 JSON 数据模型给用户，你会发现如果你的模型构建的恰当，你的 UI （组件的的层次结构）将一一对应。因为 UI 和数据模型都倾向于相同的信息结构。分离你的 UI 到组件，每个组件都会对应数据模型的一部分。<br><img src="https://reactjs.org/static/eb8bda25806a89ebdc838813bdfa3601/6b2ea/thinking-in-react-components.png" alt="modal-ui map"><br>你看到这，在我们的应用中有 5 个组件。已经将代表每个组件的数据斜体表示了。</p><ol><li><strong>FilterableProductTable(orange):</strong> 包含整个案例</li><li><strong>archBar (blue):</strong> 接收所有用户输入</li><li><strong>ProductTable (green):</strong> 根据用户的输入显示和过滤数据集合</li><li><strong>ProductCategoryRow (turquoise):</strong> 显示么个目录的头</li><li><strong>ProductRow (red):</strong> 每行显示一个产品</li></ol><p>如果你查看 ProductTable，你讲会看到 table 头（包含 Name 和 Prize 的标签）不是我们自己的组件。这是偏好的问题，选择哪种方式一直有一个争论。在这个示例中，保密保留它作为 ProductTable 的一部分，因为它是数据渲染集合的一部分，这是 ProductTable 的责任。然而，如果头变得很复杂（比如，如果我们向添加用于分类的排序），创建我们自己的 ProductTableHeader 组件会更有意义。</p><p>现在我们确定了在设计稿中的组件，让我们拿牌它们到层次结构中。在设计稿中组件在另外的组件中，在层次结构中应该作为 child 显示。</p><ul><li>FilterableProductTable<ul><li>SearchBar</li><li>ProductTable<ul><li>ProductCategoryRow</li><li>ProductRow</li></ul></li></ul></li></ul><h3 id="步骤-2：在-React-中构建一个静态的版本"><a href="#步骤-2：在-React-中构建一个静态的版本" class="headerlink" title="步骤 2：在 React 中构建一个静态的版本"></a>步骤 2：在 React 中构建一个静态的版本</h3><p>现在你有了组件的层次结构，是时候实现自己的应用。最简单的方式是构建一个版本将你的数据模型渲染成 UI，但没有交互。最好应该将这些处理过程分开，因为构建静态版本要求大量的打字而无需思考，而添加交互性要求大量思考而不是大量的打字。我们将了解原因。</p><p>要构建呈现数据模型的应用的静态版本，你需要构建可以复用其他组件的组件并使用 props 作为数据传递。props 是从父对象给子对象传递数据的一种方式。如果你熟悉 state 概念，根本不需要使用 state 来创建静态版本。State 只在交互的时候用，它是随着时间发生变化的数据。因为这是应用的静态版本，所以你不需要使用它。</p><p>你可以自顶向下或者自底向上的构建。也就是说，你可以从层次机构中较高的组件开始构建（比如，从 FilterableProductTable 开始），也可以从层次结构较低的组件开始构建（ProductRow）。在简单的示例中，通常自顶向下更简单。对于大型项目，自底向上构建写单元测试容易。</p><p>在这一步的最后，你讲拥有一个用于呈现数据模型的可复用的组件库。因为这是你应用的静态版本所以这些组件只有 render 方法。层次结构顶层的组件（FilterableProductTable）将用的数据模型作为 prop。如果更改了基础数据模型，可以再调用一次<code>ReactDOM.render()</code>，UI 将会更新。你可以看到 UI 的更新方式以及在哪里可以修改它们。React 单向数据流（也叫做单向绑定）让一切都模块化和快速。</p><p>如果你需要执行这个步骤的帮助，可以参考<a href="https://reactjs.org/docs/" target="_blank" rel="noopener">React 文档</a></p><p>一个简单的插曲：Props 对比 State<br>React 中有两种类型的数据”model”：props 和 state。理解它们两者的区别很重要；如果不熟悉它们之间的不同可以去浏览官方 React 文档。或者看常见问题汇总（FAQ）：state 和 props 之间有什么区别？</p><h3 id="步骤-3：确定-UI-状态的最小表现（但完整）"><a href="#步骤-3：确定-UI-状态的最小表现（但完整）" class="headerlink" title="步骤 3：确定 UI 状态的最小表现（但完整）"></a>步骤 3：确定 UI 状态的最小表现（但完整）</h3><p>为了使你的 UI 具有可交互性，你需要能够触发对基础数据模型的更改。React 使用 state 来实现。</p><p>为了正确的构建应用，你需要思考你应用需要的最小可变状态集。这里的关键是 DRY：不要重复自己。找出你应用所需的状态的绝对最小表现，根据需要计算任何事情。举例，如果你构建 TODO 列表，保存 TODO items 数组；不要保存一个独立的 count 状态变量。而应该当想要渲染 TODO 的 count 时，获取 TODO items 数组的长度。</p><p>考虑我们示例应用中的所有数据。我们有：</p><ul><li>产品的原始列表</li><li>用户输入的搜索文字</li><li>复选框的值</li><li>筛选的产品列表</li></ul><p>让我们研究每一个，看是否是状态。对所有数据询问 3 个问题：</p><ul><li>它是父对象通过 props 传递进来的嘛？如果是，它可能不是 state。</li><li>它随着时间推移不变嘛？如果是，它应该不是 strate。</li><li>你可以根据你组件中的其他任何的 state 或者 props 计算得到它吗？如果是，它不是 state</li></ul><p>产品的原始列表作为 props 传递，所以它不是 state。搜索文本和复选框应该是 state，因为它们随着时间推移更改并且无法通过其他任何东西计算得到。最后，过滤的产品列表也不是 state，因为它可以被产品的原始列表和搜索文本以及复选框的值组合在一起计算得到。Think of all of the pieces of data in our example application. We have:</p><p>The original list of products<br>The search text the user has entered<br>The value of the checkbox<br>The filtered list of products<br>Let’s go through each one and figure out which one is state. Ask three questions about each piece of data:</p><p>Is it passed in from a parent via props? If so, it probably isn’t state.<br>Does it remain unchanged over time? If so, it probably isn’t state.<br>Can you compute it based on any other state or props in your component? If so, it isn’t state.<br>The original list of products is passed in as props, so that’s not state. The search text and the checkbox seem to be state since they change over time and can’t be computed from anything. And finally, the filtered list of products isn’t state because it can be computed by combining the original list of products with the search text and value of the checkbox.</p><p>So finally, our state is:</p><p>The search text the user has entered<br>The value of the checkbox</p><p>所以，最后，我们的 state 是：<br>用户已经输入的搜索文本<br>复选框的值</p><h3 id="步骤-4：确定你的状态应该放在那里"><a href="#步骤-4：确定你的状态应该放在那里" class="headerlink" title="步骤 4：确定你的状态应该放在那里"></a>步骤 4：确定你的状态应该放在那里</h3><p>好的，我们可以确定应用最小 state 集。下面，我们需要确定那些组件改变，或者拥有改状态</p><p>记住：React 是单向数据流的组件层次结构。它可能无法立刻清除那个组件应该拥有什么状态。<strong>它通常是新人最难理解的部分</strong>。所以请按照下面的步骤来弄清楚。</p><p>对于你应用的每个状态：</p><ul><li>根据每个组件的状态来确定显示的内容</li><li>找到公共所有者组件（在层次结构中所有需要状态的组件之上的单个组件）</li><li>公共所有者或者其他在层次结构中更高级别的组件应该拥有它的状态</li><li>如果你无法找到拥有状态意义的组件，创建一个仅用于保留状态的新组件，然后放在公共的所有者组件之上。</li></ul><p>让我们在应用中运行这个策略：</p><ul><li>ProductTable 需要根据 state 和搜索文本以及复选框状态来过滤产品列表。</li><li>公共的所有者组件是 FilterableProductTable。</li><li>从概念上将过滤文本和复选框值放到 FilterableProductTable 有意义。</li></ul><p>所以，我们决定将我们的状态放到 FilterableProductTable 中，首先，添加实例属性<code>this.state = {filterText: &#39;&#39;, inStockOnly: false}</code>到 FilterableProductTable’s 的构造函数中反映应用的初始状态。然后传递属性 filterText 和 inStockOnly 到 ProductTable 以及 SearchBar 中。最后使用这些属性在 ProductTable 中过滤这些行，然后在 SearchBar 中设置表单字段的值。</p><p>你可以看到你应用将有下面的行为：设置 filterText 到”ball“然后刷新你的应用。你讲看到这个数据 table 被正确的更新。</p><h3 id="步骤-5：添加逆向数据流"><a href="#步骤-5：添加逆向数据流" class="headerlink" title="步骤 5：添加逆向数据流"></a>步骤 5：添加逆向数据流</h3><p>至此，我们已经创建一个根据 props 和 state 顺着层次结构正确的呈现的应用。现在是时候支持另外一种数据流：在深层次结构中的表单组件需要更新 FilterableProductTable 的状态。</p><p>React 使得数据流清晰帮助你理解你的程序是如何工作的，但是要求比传统的数据流双向绑定要输入更多的代码。</p><p>如果你尝试输入或者选中的例子当前版本的复选框，你讲看到 React 会忽略你的输入。这是故意的，因为我们将 input 的输入 prop 设置成 FilterableProductTable 的 state。</p><p>让我们考虑下我们要发生的事情。我们想要保证当用户更改表单时，我们更新 state 来反映用户输入。因为组件应该只更新它们自己的 state，FilterableProductTable 将传递回调给 SearchBar，当它触发时状态就会更新。我们可以在输入组件中使用 onChange 事件来通知它。回调函数由 FilterableProductTable 传入，将调用 setState(),并且应用将会被更新。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>希望让你了解如何使用 React 来构建组件和应用，尽管让你比之前使用过的输入更多代码，记住代码的读取远要比写多，并且阅读这个模块清晰代码也不困难。当你开始构建大型的组件库时，你将感谢这种显示性和模块性，并且随着代码复用，你代码行数将开始减少。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react hooks</title>
      <link href="/blog/react-hooks/"/>
      <url>/blog/react-hooks/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hooks 是 React 16.8 新加的。它可以不写 Class 也能用到 State 以及 React 的其他特性</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明一个新的状态变量，我们将会调用这个count</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个新的 useState 函数使我们学习的第一个“Hook”，但是这个案例只是演示。如果不理解不用担心。<br><strong>你可以在下一页学习 HOOKS</strong>。这页，我们继续解释为什么我们给 React 给 HOOKS，它们怎么帮助你写下好的应用。</p><blockquote><p>注意<br>React 16.8 是支持 Hooks 的第一个版本。升级的时候，不要忘记升级所有的包，包括 React DOM。 React Native 从 0.59 版本支持 HOOKS</p></blockquote><h3 id="视频介绍"><a href="#视频介绍" class="headerlink" title="视频介绍"></a>视频介绍</h3><p>在 React 2018 会议上，Sophie Alpert 和 Dan Abramov 介绍了 Hooks，跟着 Ryan Florence 演示如何使用它们去重构一个应用。看下面的视频</p><h3 id="不用破坏性改动"><a href="#不用破坏性改动" class="headerlink" title="不用破坏性改动"></a>不用破坏性改动</h3><p>在我们继续之前，注意 Hooks：</p><ul><li>完全可选。你可以只在一些组件中试用 Hooks,不用重新已存在的代码。如果你不想要你不用立刻学习和使用 Hooks。</li><li>百分百的向后兼容。Hooks 不包含任何破坏性改动</li><li>现在可用。Hooks 已经发布在 16.8 版本</li></ul><p><strong>React 没有计划去删除类</strong>。你可以在下面的章节中督导更多关于渐进策略。</p><p><strong>Hooks 不会影响你已有的 React 概念</strong>。相反，Hooks 会为 React 概念提供更直接的 API。你已经知道的：属性，状态，上下文，引用，以及生命周期。稍后我们会提到，Hooks 也提供了更强大的方式来组合它们。</p><p><strong>如果你只想要学习 Hooks，直接跳到下一节！</strong>你可以继续读这一页学习更多关于为什么我们添加 Hooks，以及我们如何使用它们不需要重写自己的应用</p><h3 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h3><p>Hooks 解决了我们过去 5 年写过和维护的上千个 React 组件的各种不相关的问题。无论你在学习 React，还是每天使用，或者使用者类似的组件模型的框架，你可能遇到过这些问题。</p><h3 id="很难在组件之间复用状态逻辑"><a href="#很难在组件之间复用状态逻辑" class="headerlink" title="很难在组件之间复用状态逻辑"></a>很难在组件之间复用状态逻辑</h3><p>React 没有提供将可复用的行为附加到组件的方式（比如，链接到 Store）。如果你使用 React，你可能比较熟悉像<a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">render props</a>和<a href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener">higher-order components</a>。但是这些方案需要使用它们需要重构你的组件，它们会使得你的代码非常难理解。如果你在 React DevTools 中观察过 React 应用，你将会发现由 Providers，consumers，higher-order 组件,render props，以及其他抽象包裹的组件回调地狱。尽管我们可以在<a href="https://github.com/facebook/react-devtools/pull/503" target="_blank" rel="noopener">DevTools</a>过滤它们，这些指向了一个更深的问题：React 需要为共享状态逻辑提供更好的原生途径。</p><p>使用 Hooks,你可以从组件里提取状态逻辑，使得它们可以独立测试和重复使用。<strong>Hooks 允许你户需要你改变组件树结构来重用状态逻辑</strong>。它使得在组件之间或者是在社区中共享状态逻辑变得简单。</p><p>我们在<a href="https://reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">构建自己的 Hooks</a>讨论更多的内容</p><h3 id="复杂组件变得更难理解"><a href="#复杂组件变得更难理解" class="headerlink" title="复杂组件变得更难理解"></a>复杂组件变得更难理解</h3><p>我们经常开始维护一个简单的组件，但是逐渐状态变得难以管理且有许多副作用。每个生命周期函数经常不相关的逻辑混在一起。比如，组件可能在 componentDidMount 和 componentDidUpdate 中执行相同的获取数据操作。但是相同的 componentDidMount 函数也包含其他逻辑比如设置时间按监听，还需要在 componentWillUnmount 清理它。相互关联的代码需要在不同的地方一起变更，但是完全不相同的代码却要合并到一个方法里。这非常容易制造 bugs 和不一致的地方。</p><p>在许多情况下不可能将组件分割成更小，因为状态逻辑需要全局存在才行。这使得非常难以测试。这也是许多人更喜欢独立一个状态管理库的一个原因。然而，这些库会创造出太多的抽象，要求你在不同文件之间跳转，且使得组件之间复用更加困难。</p><p>为了解决它，<strong>Hooks 让你基于相关联的逻辑将组件分割到更小的函数中（比如设置订阅和获取数据）</strong>，而不是强制基于生命周期分割 diamante。你可以使用 reducer 管理组件的本地状态，让它变得可预测。</p><p>我们将在<a href="https://reactjs.org/docs/hooks-effect.html#tip-use-multiple-effects-to-separate-concerns" target="_blank" rel="noopener">Using the Effect Hook.</a>更多的讨论它们。</p><h3 id="类会使得人和机器弄混"><a href="#类会使得人和机器弄混" class="headerlink" title="类会使得人和机器弄混"></a>类会使得人和机器弄混</h3><p>除了会使得代码重用和 diamante 组织变得更困难之外，我们发现类是学习 React 的最大屏障。你需要理解<code>this</code>是如何在 JS 中工作的，它与许多语言的运行方式都不一样。你需要记着绑定事件处理函数。没有问题的<a href="https://babeljs.io/docs/en/babel-plugin-transform-class-properties/" target="_blank" rel="noopener">语法提案</a>，代码也非常的冗余。人们很好的理解 props，state,以及从上而下的数据流，但是很难理解类。React 的 class 和 function 组件的区别，使用过的即使是有经验的开发者之间也会存在分歧。</p><p>另外，React 以及存在 5 年了，我们希望下一个 5 年也能够与时俱进。像<a href="https://svelte.dev/" target="_blank" rel="noopener">Svelte</a>,<a href="https://angular.io/" target="_blank" rel="noopener">Angular</a>,<a href="https://glimmerjs.com/" target="_blank" rel="noopener">Glimmer</a>以及其他展示的那样，组件的<a href="https://en.wikipedia.org/wiki/Ahead-of-time_compilation" target="_blank" rel="noopener">预编译</a>有许多潜力。尤其是在没有限制模板的时候。最近，我们一直用<a href="https://prepack.io/" target="_blank" rel="noopener">Prepack</a>实验<a href="https://github.com/facebook/react/issues/7323" target="_blank" rel="noopener">组件折叠</a>,并且我们已经取得了初步成果。然而我们发现类组件会无意中鼓励一些开发范式使得一些优化方案回退到很慢的情况。类给现在的工具仍然会造成问题。比如，类无法压缩的不好，并且他会使得热加载不稳定。我们想要提供新的这个 API 使得代码能够更好的被优化。</p><p>为了解决这些问题，<strong>Hooks 让你在不使用类的情况下获得更多的 React 特性</strong>。概念上，React 组件已经非常接近函数。Hooks 拥抱函数，但是不会牺牲 React 实际的核心。Hooks 提供解决方案，并且不要求你学习复杂的功能或者响应式的编程技巧。</p><blockquote><p>案例<br><a href="https://reactjs.org/docs/hooks-overview.html" target="_blank" rel="noopener">Hooks 一览</a> 是一个很好的学习 Hooks 的地方</p></blockquote><h3 id="渐进兼容策略"><a href="#渐进兼容策略" class="headerlink" title="渐进兼容策略"></a>渐进兼容策略</h3><blockquote><p>总结：没有计划从 React 中删除类</p></blockquote><p>我们知道 React 开发者更关注迭代产品,没有时间来看每个版本的新 api。Hooks 非常新，可能等更多的案例和教程出来之后再考虑学习和适配它们更好。</p><p>我们知道向 React 添加新的原生概念门槛非常高。对于更好奇的读者，我们准备了更加<a href="https://github.com/reactjs/rfcs/pull/68" target="_blank" rel="noopener">详细的征求意见文档</a>，来挖掘更详细的动机，并且提供了具体的设计决策和相关现有技术的额外视角。</p><p><strong>至关重要的是，Hooks 可以和现有代码同时工作，所以你可以渐进的使用它们</strong>。不用赶着迁移 Hooks。我们建议编码任何“大的重写”，尤其是对已经存在的复杂的 class 组件。在我们的经验里，最好的练习方式是在首先在新的非核心组件中使用 Hooks，保证团队中的每个人都能够适应它。在你尝试 Hooks 之后，请随时发送邮件给我吗，无论积极和负面的。</p><p>我们意图让 Hooks 能够覆盖所用 class 的场景，但是我们仍然会对 class 支持。在 Facebook，我们有上千个用 class 的组件，我们绝对没有计划去重写它们。相反，我们会在新的代码中将 Hooks 与 class 一起使用。</p><h2 id="Hooks-一览"><a href="#Hooks-一览" class="headerlink" title="Hooks 一览"></a>Hooks 一览</h2><p>Hooks 是<a href="https://reactjs.org/docs/hooks-intro.html#no-breaking-changes" target="_blank" rel="noopener">向后兼容</a>。这个页面为有经验 React 用户提供了 Hooks 概览。</p><blockquote><p>详细介绍<br>读这篇<a href="https://reactjs.org/docs/hooks-intro.html#motivation" target="_blank" rel="noopener">动机</a>来学习为什么我们要在 React 使用 Hooks。</p></blockquote><h3 id="State-Hook"><a href="#State-Hook" class="headerlink" title="State Hook"></a>State Hook</h3><p>这个案例渲染了一个计数器。当你点击按钮，他就会增加值：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义一个新状态变量，我们叫做count</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里, useState 是一个 Hooks（我们等会来讨论含义）。我们在函数组件中调用它，添加本地 state 进去。React 会在重复渲染的函数中保留它的状态。useState 返回一对：当前状态值和让你更新它的函数。你可以在事件处理器或者其他地方调用这个更新函数。它非常像 class 中的 this.setState，但是它不会合并旧值和新值。（我们展示了一个案例在<a href="https://reactjs.org/docs/hooks-state.html" target="_blank" rel="noopener">使用 State Hook</a>比较 useState 和 this.state）。</p><p>useState 只有一个参数是初始化值。在上面的案例中，它是 0 因为我们的计数器是从 0 开始。注意不像 this.state，这里的 state 不必是一个对象-虽然如果你想要可以是。初始的状态参数只有在第一次渲染期间使用。</p><p><strong>声明多个状态变量</strong><br>你可以在一个组件中多次使用 State Hook</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ExampleWithManyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义多个状态变量</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>fruit<span class="token punctuation">,</span> setFruit<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"Learn Hooks"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个数组解构语法让我可以在调用 useState 时给状态变量取不同的名字。这些名字不是 useState Api 的一部分。相反，React 假设如果你调用 useState 多次，你在每次渲染时候是调用的相同的顺序。我们后面会讲到为什么它能工作并且什么时候有用。</p><p>那么什么是 Hook?<br>Hooks 是一个函数让你可以钩子钩进函数组件的状态和声明周期中的特性。Hooks 不在 class 中工作-让你不用 class 使用 React。（我们不建议全部重写现有的代码，但是你可以在新组件中使用它）</p><p>React 提供了一些内置的 Hooks 比如 useState。你也可以创建你自己的 Hooks 在不同的组件之间复用一些状态逻辑行为。我们将首先开内置的 Hooks。</p><blockquote><p>详细说明<br>你可以在专用的页面<a href="https://reactjs.org/docs/hooks-state.html" target="_blank" rel="noopener">Using the State Hook.</a>来学习更多的 state Hook 知识。</p></blockquote><h3 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h3><p>你之前可能已经执行过数据获取，订阅，或者手动在 React 组件中改变 DOM。我们叫这些行为为”副作用“（或者说是作用），因为它们可以影响其他组件并且在一次渲染过程中就结束。</p><p>这个 Effect Hook，useEffect，给函数组件添加执行副作用的能力。它跟 React class 中的 componentDidMount,componentDidUpdate,componentWillUnmount 用途相同，但是被统一到单个 API 中。（我们显示的案例比较了 useEffect 和在<a href="https://reactjs.org/docs/hooks-effect.html" target="_blank" rel="noopener">Effect Hook 使用</a>中的方法）</p><p>这个例子，这个组件在 React 更新 DOM 之后设置 document 的标题：</p><pre><code>import React, { useState, useEffect } from &#39;react&#39;;function Example() {  const [count, setCount] = useState(0);  // Similar to componentDidMount and componentDidUpdate:  useEffect(() =&gt; {    // Update the document title using the browser API    document.title = `You clicked ${count} times`;  });  return (    &lt;div&gt;      &lt;p&gt;You clicked {count} times&lt;/p&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;        Click me      &lt;/button&gt;    &lt;/div&gt;  );}</code></pre><p>当你调用 useEffect，你告诉 React 在刷新变更到 DOM 之后运行你的”副作用“函数。Effects 在组件中被定义，所以它们可以访问组件的 props 和 state。默认情况下，React 在每次渲染之后运行 effects-包括第一次渲染（我们更多关于如何比较 class 的生命周期在<a href="https://reactjs.org/docs/hooks-effect.html" target="_blank" rel="noopener">使用 Effect Hook 文章里</a>）。</p><p>Effects 可以通过返回一个函数可选的指定如何清除它们。举例，这个组件使用 effect 来订阅用户在线状态，然后通过取消订阅来清除这个副作用。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Loading..."</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">"Online"</span> <span class="token punctuation">:</span> <span class="token string">"Offline"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这例子中，React 当在组件销毁时取消订阅我们的 ChatAPI，然后在后续渲时会跟之前一样重复运行这个副作用。（如果我们传递 props.friend.id 给 ChatAPI 没有任何变化，你也可以选择<a href="https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects" target="_blank" rel="noopener">告诉 React 跳过重新订阅</a>）</p><p>跟 useState 一样，你可以在单个组件中使用多个副作用：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FriendStatusWithCounter</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hooks 让你在一个组件中管理相关联的副作用。（比如添加和删除订阅），而不是强制基于生命周期函数分割逻辑。</p><blockquote><p>详细解释<br>你可以在下面专用的页面<a href="https://reactjs.org/docs/hooks-effect.html" target="_blank" rel="noopener">使用 Effect Hook</a>来学习更多的 UseEffect</p></blockquote><h3 id="构建自己的-Hooks"><a href="#构建自己的-Hooks" class="headerlink" title="构建自己的 Hooks"></a>构建自己的 Hooks</h3><p>有时候，我们想要在组件之间重用状态逻辑。之前，有两种方案：<a href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener">高阶组件</a>和<a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">渲染属性</a>。自定义 Hooks 可以做到，切不需要在组件树中添加更多的组件。</p><p>这页面刚开始，我们介绍了 FriendStatus 组件，它调用 useState 和 useEffect Hooks 去订阅好友的在线状态。我们想要在其他组件中也复用这个订阅逻辑。</p><p>首先，我们提取逻辑到自定义 Hook 叫 useFriendStatus:</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> isOnline<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它获取 friendID 作为参数，然后返回朋友是否在线状态。<br>现在我们可以在组件之间使用它：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Loading..."</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">"Online"</span> <span class="token punctuation">:</span> <span class="token string">"Offline"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FriendListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> isOnline <span class="token operator">?</span> <span class="token string">"green"</span> <span class="token punctuation">:</span> <span class="token string">"black"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些组件内的状态完全隔离。Hooks 是一种复用状态逻辑的方式，而不是复用状态本身。实际上，每次调用 Hook 有完全独立的状态-所以甚至你可以在一个组件中调用多次自定义 Hook。</p><p>自定义 Hook 更像是一中约定而非功能。如果函数的名字以 use 开头并且他调用了其他 Hooks，我们就可以认你为它是自定义 Hook。这种 useSomething 的命名方式约定让 linter 插件可以找到使用 Hooks 代码的 bug。</p><p>你可以创建自定义 Hooks 覆盖表单处理，动画，订阅生命，计时器以及其他我们没想到的应用场景。我们非常期待 React 社区将会出现什么样的自定义 Hooks。</p><blockquote><p>详细说明<br>你可以在指定文章<a href="https://reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">构建自己的 Hooks</a>看到更多内容</p></blockquote><h3 id="其他-HOOKS"><a href="#其他-HOOKS" class="headerlink" title="其他 HOOKS"></a>其他 HOOKS</h3><p>这里有一些很少使用的内置 Hooks，你可能会觉得有用。比如，<a href="https://reactjs.org/docs/hooks-reference.html#usecontext" target="_blank" rel="noopener">useContext</a>让你不需要嵌套就可以订阅 React 上下文。</p><pre><code>function Example() {  const locale = useContext(LocaleContext);  const theme = useContext(ThemeContext);  // ...}</code></pre><p><a href="https://reactjs.org/docs/hooks-reference.html#usereducer" target="_blank" rel="noopener">useReducer</a>让你用 reducer 合并复杂组件的本地状态。</p><pre><code>function Todos() {  const [todos, dispatch] = useReducer(todosReducer);  // ...</code></pre><blockquote><p>详细说明<br>你可以在特定页面<a href="https://reactjs.org/docs/hooks-reference.html" target="_blank" rel="noopener">Hooks API</a>学到其他内置的 Hooks。</p></blockquote><h2 id="使用-State-Hook"><a href="#使用-State-Hook" class="headerlink" title="使用 State Hook"></a>使用 State Hook</h2><p>Hooks 的介绍章节使用了下面这个案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Declare a new state variable, which we'll call "count"</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们将通过比较同等效果的 class 案例的代码来学习 Hooks。</p><h3 id="同等的-class-案例"><a href="#同等的-class-案例" class="headerlink" title="同等的 class 案例"></a>同等的 class 案例</h3><p>如果你之前在 React 中使用 class，下面的代码可能比较熟悉：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          Click me        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>状态初始是{count:0}，当用户每次点击按钮调用 this.setState()增长 state.count 的值。我们将在整个页面中使用这个 class 片段。</p><blockquote><p>注意<br>你可能会疑惑为什么我们使用计数器来代替其他更加实用的例子。在学习 Hooks 的第一步，它帮助我们帮助更加关注 API 本身。</p></blockquote><h3 id="Hooks-和函数组件"><a href="#Hooks-和函数组件" class="headerlink" title="Hooks 和函数组件"></a>Hooks 和函数组件</h3><p>复习一下，在 React 的函数组件像这样：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> Example <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// You can use Hooks here!</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者这样</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// You can use Hooks here!</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你可能之前就已经知道这些叫做无状态组件。我们现在介绍如何在这里实用 React 状态，所以我们更喜欢称之为函数组件。</p><p>Hooks 无法在 class 中工作。但是你可以用它们来代替 class 组件。</p><h3 id="什么是-Hook？"><a href="#什么是-Hook？" class="headerlink" title="什么是 Hook？"></a>什么是 Hook？</h3><p>我们的新案例在最开始的地方从 React 中导入 useState：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>什么是 Hook？</strong> Hook 是一个特殊的函数让你可以钩子钩进 React 的特性。比如，useState 让你添加 React 状态到函数组件的 Hook。我们后面可以学习到其他 Hook。<br><strong>什么时候应该使用 Hook？</strong> 之前你写一个函数组件意识到需要添加状态的时候，必须将它们转成 class。现在你可以在已存在的函数组件中使用 Hook。我们现在就可以使用它</p><blockquote><p>注意<br>这里有一些特殊的规则告诉我们在一个组件中什么时候可以使用 useHook。去<a href="https://reactjs.org/docs/hooks-rules.html" target="_blank" rel="noopener">Hooks 的规则</a>学习它们。</p></blockquote><h3 id="声明状态变量"><a href="#声明状态变量" class="headerlink" title="声明状态变量"></a>声明状态变量</h3><p>在类中，我们通过在构造函数中设置 this.state 的值为{count:0}来初始化 count。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在函数组件中，我们没有 this，所以我们无法赋值和读取 thi.state。但是我们可以直接在我们的组件中直接调用 useState Hook。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Declare a new state variable, which we'll call "count"</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用 useState 做了什么?</strong> 它声明了状态变量。我们变量叫做 count，但是我们可以叫其他任何值，比如 banana。这是一种在函数调用间保留变量的方式-useState 与 class 提供的 this.state 功能一样。通常，函数退出时变量消失，但是状态变量会被 React 保留。<br><strong>传递给 useState 需要哪些参数？</strong> useState() Hook 的为一个参数是初始化的状态。不像 class，状态不必是一个对象。根据我们的需要可以是 number/string。在我们的案例里，我们使用 number 来记录用户点击了多少次，所以变量的初始状态是 0。（如果我们想在状态中存不同的变量，可以调用两次）<br><strong>useState 返回什么？</strong> 它返回了一对值：当前状态和函数更新方法。这是为什么代码是<code>const [count, setCount] = useState()</code>。类似于 class 中的 this.state.count 和 this.setState。如果你不熟悉使用的语法，可以看这个<a href="https://reactjs.org/docs/hooks-state.html#tip-what-do-square-brackets-mean" target="_blank" rel="noopener">页面的底部</a></p><p>现在我们知道 useState Hook 做了什么，我们的案例应该更加容易理解了。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Declare a new state variable, which we'll call "count"</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们声明了 count 的状态变量，并设置了 0。React 将记住重复渲染时的当前值，并且给最新的值给我们的函数。如果我们想要更新当前 count 值，可以调用 setCount。</p><blockquote><p>注意<br>你可能疑惑：为什么 useState 不命名 createState？<br>Create 不够精确，因为只有组件在第一次渲染时才需要创建。在下次渲染时，useState 给我们当前状态。否则它就不是 State 了。这也是为什么 Hook 的名字带 use 的原因。我们将在<a href="https://reactjs.org/docs/hooks-rules.html" target="_blank" rel="noopener">Hooks</a>学到为啥。</p></blockquote><h3 id="读状态"><a href="#读状态" class="headerlink" title="读状态"></a>读状态</h3><p>当我们在 class 中显示当前 count 值是，我们读 this.state.count</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在函数中，我们可以直接使用 count</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更新状态"><a href="#更新状态" class="headerlink" title="更新状态"></a>更新状态</h3><p>在 class 中，我们需要调用 this.setState()来更新 count 值：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在函数中，我们已经有了 setCount 和 count 变量，所以我们不需要 this。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h3><p>让我们现在来概括一下我们一行行的学习东西以及检查下我们的理解</p><pre class="line-numbers language-jsx"><code class="language-jsx"> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token number">7</span><span class="token punctuation">:</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> <span class="token number">8</span><span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token number">9</span><span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token number">10</span><span class="token punctuation">:</span>         Click me<span class="token number">11</span><span class="token punctuation">:</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token number">12</span><span class="token punctuation">:</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token number">13</span><span class="token punctuation">:</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">14</span><span class="token punctuation">:</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第 1 行：我们从 React 中导入 useState。它让我们在函数组件中存储本地状态</li><li>第 4 行：在案例组件中，我们通过 useState Hook 来声明新的状态变量。它返回一对值，是我们给定的名称。我们叫变量为 count，因为它记录了按钮点击的次数。我们通过传 0 给 useState 作为初始状态。第二个返回的函数用来设置变量的。它使得我们可以更新 count，古名字为 setCount。</li><li>第 9 行：当我们点击，我们调用 setCount 来设置一个新值。React 将重新渲染 Example 组件，并使用最新的 count 变量。</li></ul><p>刚开始看着可能有点多。不要着急！如果你不理解，你可以尝试从头到尾再读一遍。我们保证一旦里忘记 state 在 class 是如何工作的，你用新的眼光来看这些代码，将很容易理解了。</p><p><strong>提示: 中括号的含义？</strong><br>你可能注意到我们声明状态变量的时候用了中括号：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>左边的名字不是 React API 的一部分。你可以命名自己的状态变量：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>fruit<span class="token punctuation">,</span> setFruit<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 js 语法叫做数组解构。它意味着我们创建了两个新的变量 fruit 和 setFruit，fruit 是 useState 返回的第一个值，setFruit 是第二个。等价代码如下。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">var</span> fruitStateVariable <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Returns a pair</span><span class="token keyword">var</span> fruit <span class="token operator">=</span> fruitStateVariable<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// First item in a pair</span><span class="token keyword">var</span> setFruit <span class="token operator">=</span> fruitStateVariable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Second item in a pair</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当我们使用 useState 来声明状态变量，它返回一对-包含两个值的数组。第一个是当前值，第二个是更新它的函数。使用[0]和[1]来访问会造成一些困惑，因为它们有指定的含义。这也是为什么我们用数组解构来代替的原因。</p><p><strong>提示: 使用多个状态变量</strong><br>用[something,setSomething]来声明状态变量也是一个语法糖，因为如果我们想要更多，可以给状态变量指定不同的名字。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">ExampleWithManyStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Declare multiple state variables!</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span> setAge<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>fruit<span class="token punctuation">,</span> setFruit<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> setTodos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">'Learn Hooks'</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的组件中，我们有 age，fruit 和 todos 作为本地变量，并且我们可以独立的更新它们：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">handleOrangeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Similar to this.setState({ fruit: 'orange' })</span>  <span class="token function">setFruit</span><span class="token punctuation">(</span><span class="token string">"orange"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>你不必使用很多状态变量。状态表变量也可以是一个对象或者数组，所以你可以将数据分组。然而不像 class 的 this.setState，更新状态会直接替换而不是合并。</p><p>我们提供了分割独立的状态变量更多的建议在<a href="https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables" target="_blank" rel="noopener">FAQ 中</a></p><h2 id="使用-Effect-Hook"><a href="#使用-Effect-Hook" class="headerlink" title="使用 Effect Hook"></a>使用 Effect Hook</h2><blockquote><p>Effect Hook 让你在函数组件中执行副作用的操作</p></blockquote><pre><code>import React, { useState, useEffect } from &#39;react&#39;;function Example() {  const [count, setCount] = useState(0);  // Similar to componentDidMount and componentDidUpdate:  useEffect(() =&gt; {    // Update the document title using the browser API    document.title = `You clicked ${count} times`;  });  return (    &lt;div&gt;      &lt;p&gt;You clicked {count} times&lt;/p&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;        Click me      &lt;/button&gt;    &lt;/div&gt;  );}</code></pre><p>这个片段是基于上一页的计数器案例，但是我们向其中添加了新的特性。我们向网页设置包含点击次数的 title。<br>数据获取，设置订阅，或者手动在 React 组件中修改 DOM，这些都是边界影响的示例，或者说是效果。可能你在之前的组件中用过。（我的理解：纯函数组件，函数应该是无副作用的。但是网页组件是需要产生全局的影响，所以这类操作就称为副作用操作）。</p><blockquote><p>小技巧<br>如果你熟悉 React 类声明周期函数，你可以考虑将 UseEffect 作为 componentDidMount, componentDidUpdate，componentWillUnmount 作为声明周期的联合。</p></blockquote><h3 id="不会清理副作用"><a href="#不会清理副作用" class="headerlink" title="不会清理副作用"></a>不会清理副作用</h3><p>有时候，我们想要在更新 DOM 之后运行一些额外的代码。网络请求，手动 DOM 更新，打印这些都是不需要清除副作用的案例。我们认为这些运行完之后可以立刻忘掉它们的存在。让我们来比较类和 HOOKS 的副作用的表现<br><strong>使用类的案例</strong><br>在 React 的类组件中，render 函数自身不会创建副作用。它应该更早-我们典型的想要将副作用的操作放到更新完 DOM 之后。<br>这也是为什么在 React 的类组件中，我们会将副作用操作放到<code>componentDidMount</code>以及<code>componentDidUpdate</code>中。回到我们的示例，在 React 变更 DOM 之后，立刻更新文档的 title。</p><pre><code>class Example extends React.Component {  constructor(props) {    super(props);    this.state = {      count: 0    };  }  componentDidMount() {    document.title = `You clicked ${this.state.count} times`;  }  componentDidUpdate() {    document.title = `You clicked ${this.state.count} times`;  }  render() {    return (      &lt;div&gt;        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;          Click me        &lt;/button&gt;      &lt;/div&gt;    );  }}</code></pre><p>现在我们有两份重复的代码在两个生命周期函数中。<br>这也是为什么许多情况下，我们执行相同的副作用操作，不关心组件刚加载完或者刚更新 DOM 完。<br>从概念上将，我们向要在每次渲染之后执行-但是 React 类组件没有这样的方法。我们可以提取独立的方法，但是仍然会在两个地方调用。<br>现在让我们看下相同的事情在<code>UseEffect</code>HOOK 下的情况。<br><strong>使用 Hooks 的案例</strong><br>我们已经在上面看到过这个例子，但是让我们仔细看看</p><pre><code>import React, { useState, useEffect } from &#39;react&#39;;function Example() {  const [count, setCount] = useState(0);  useEffect(() =&gt; {    document.title = `You clicked ${count} times`;  });  return (    &lt;div&gt;      &lt;p&gt;You clicked {count} times&lt;/p&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;        Click me      &lt;/button&gt;    &lt;/div&gt;  );}</code></pre><p><strong>useEffect 做了什么？</strong>，使用这个 Hook，告诉 React 组件在每次渲染之后会执行。React 会记住你传的这个函数，然后在执行 DOM 更新之后调用。在这个副作用里，我们设置了页面的标题。但是我们也可以在其中去执行数据加载或者其他一些需要的 API<br><strong>为什么 useEffect 在组件中调用？</strong>将<code>useEffect</code>放到组件中让我们可以在 effect 函数中访问到 state 变量或者任何其他的属性。我们不需要一个特殊的 API 来读取上面的变量-它早已存在是函数域。Hooks 拥抱 JS 闭包，并且避免再创建 React 的 API，因为 JS 已经提供的解决方案。<br><strong>useEffect 在每次渲染之后执行？</strong>（我们稍后会讲述如果<a href="https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects" target="_blank" rel="noopener">自定义</a>它）。放弃去思考加载和更新概念，你将发现非常简单，副作用在每次渲染之后发生。React 保证 DOM 更新之后会运行它们的副作用函数。<br><strong>详细说明</strong><br>现在我们对副作用有了更多的了解，下面几行应该更有意义了。</p><pre><code>function Example() {  const [count, setCount] = useState(0);  useEffect(() =&gt; {    document.title = `You clicked ${count} times`;  });}</code></pre><p>我们定义了<code>count</code>状态变量，然后我们告诉 React 使用一个副作用。我们传递一个<code>useEffect</code>Hook。这个函数中，我们使用浏览器 API 设置了<code>document.title</code>。我们可以在副作用函数中调用最新的<code>count</code>，因为它一个闭包函数中。当 React 渲染我们的组件，它会记住副作用函数，然后在每次更新完 DOM 之后调用。每次渲染之后包括第一次，都会执行它。<br>有经验的 JS 开发者会注意到每次渲染传递给<code>useEffect</code>的回调函数都有区别。这是故意的。这就是我们从函数内部读取数值的原因，不用担心它过时。每次渲染，我们都会创建不同的 effect 替换之前的 effect。某种情况下，它的行为更像是渲染的结果的一部分 - 每个 effect 属于特定的 render 函数。我们将在<a href="https://reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update" target="_blank" rel="noopener">此页面</a>后面讲述为什么这样做</p><blockquote><p>技巧<br>不像<code>componentDidMount</code>和<code>componentDidUpdate</code>，<code>useEffect</code>不会阻塞浏览器更新屏幕。它会让你的应用感觉跟更加流畅。大部分 effect 不需要同步执行。但是某些情况需要这么做（比如测量布局），它被独立的抽成<a href="https://reactjs.org/docs/hooks-reference.html#uselayouteffect" target="_blank" rel="noopener">useLayoutEffect</a>Hook，与<code>useEffect</code>做区分。</p></blockquote><h3 id="清理副作用"><a href="#清理副作用" class="headerlink" title="清理副作用"></a>清理副作用</h3><p>早期，我们认为副作用不需要清理。但是有一些副作用需要。比如<strong>我们需要设置订阅</strong>一些额外的数据源。这种情况下，清理非常重要以免造成内存泄露！让我们比较类组件和 Hooks 是如何做的。<br><strong>使用类的案例</strong><br>在类组件中，你需要在<code>componentDidMount</code>设置订阅，然后在<code>componentWillUnmount</code>清理它。比如，假设有一个<code>ChatAPI</code>模块让我们订阅朋友线上状态。下面是我们用来订阅和显示状态的类：</p><pre><code>class FriendStatus extends React.Component {  constructor(props) {    super(props);    this.state = { isOnline: null };    this.handleStatusChange = this.handleStatusChange.bind(this);  }  componentDidMount() {    ChatAPI.subscribeToFriendStatus(      this.props.friend.id,      this.handleStatusChange    );  }  componentWillUnmount() {    ChatAPI.unsubscribeFromFriendStatus(      this.props.friend.id,      this.handleStatusChange    );  }  handleStatusChange(status) {    this.setState({      isOnline: status.isOnline    });  }  render() {    if (this.state.isOnline === null) {      return &#39;Loading...&#39;;    }    return this.state.isOnline ? &#39;Online&#39; : &#39;Offline&#39;;  }}</code></pre><p>通知的操作是一样的。生命周期强制分离了业务逻辑到不同函数功能下。</p><blockquote><p>注意<br>聪明的读者可能注意到这个例子需要<code>componentDidUpdate</code>函数才完全正确。我们将会在<a href="https://reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update" target="_blank" rel="noopener">下一节</a>讨论到<br><strong>使用 Hooks 的案例</strong><br>你可能会觉得我们需要一个独立的 effect 来执行清理。但是添加和删除订阅逻辑是强耦合的，useEffect 被设计来讲它们联系在一起。如果你返回一个函数，React 将会在合适的时机清理掉</p></blockquote><pre><code>import React, { useState, useEffect } from &#39;react&#39;;function FriendStatus(props) {  const [isOnline, setIsOnline] = useState(null);  useEffect(() =&gt; {    function handleStatusChange(status) {      setIsOnline(status.isOnline);    }    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);    // Specify how to clean up after this effect:    return function cleanup() {      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);    };  });  if (isOnline === null) {    return &#39;Loading...&#39;;  }  return isOnline ? &#39;Online&#39; : &#39;Offline&#39;;}</code></pre><p><strong>为什么我们需要在 effect 函数返回一个函数？</strong>这是可选的机制。每个 effect 可能返回一个请求它的函数。这使得我们能够将添加和删除订阅保持在一起。也同样也是 effect 的一部分<br><strong>什么时候 React 会清理 effect？</strong>React 会在组件卸载时清理。但是，前面的学习我们知道渲染不会只调用一次。这也是为什么 React 会在运行下一次 effect 之前清理上一次的 effect。我们后面将讨论<a href="https://reactjs.org/docs/hooks-effect.html#explanation-why-effects-run-on-each-update" target="_blank" rel="noopener">为什么会帮助我们避免 bug</a>和<a href="https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects" target="_blank" rel="noopener">在产生性能问题时如何退出此行为</a></p><blockquote><p>注意<br>我们不需要在 effect 返回有名函数。我们叫<code>cleanup</code>以描述意图，但是你也可以返回箭头函数或者叫其他函数名</p></blockquote><h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><p>我们学习到组件渲染之后不同的 effect 表现。有些 effect 需要被清理，所以它返回一个函数。<br>其他 effect 不需要清理，所以不返回任何东西。<br><strong>如果你觉得你对 effect hook 工作有不错的理解，或者如果你感到不知所措，你可以跳到下一页 Hooks 的规则</strong></p><h3 id="使用-Effects-的技巧"><a href="#使用-Effects-的技巧" class="headerlink" title="使用 Effects 的技巧"></a>使用 Effects 的技巧</h3><p>我们将继续讨论 React 资深用户关心的 useEffect 深度内容。你不必现在就去了解它们。你可以随时查看这个页面学习 Effect Hook 的更多的信息。</p><p><strong>提示：使用多个 Effect 来分离关注点</strong><br>在 Hooks 的动机这篇文章中我们提到了一个问题就是类生命周期经常包含不相关的逻辑，但是相关的逻辑被破坏到几个不同的方法。下面的代码是将之前的计数器和好友状态指示器合并在了一起。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">FriendStatusWithCounter</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> isOnline<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      isOnline<span class="token punctuation">:</span> status<span class="token punctuation">.</span>isOnline    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意如何设置 document.title 的逻辑被分割到不同的函数中 componentDidMount 和 componentDidUpdate。订阅的逻辑同样被分割到 componentDidMount 和 componentWillUnmount 中。并且 componentDidMount 包含它们两个的代码。</p><p>所以，Hooks 应该如何解决这个问题？就像你可以使用多次 State Hook 一样，你可以使用多个 effects。它让我们分割不相关的代码到不同的 effects 中。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FriendStatusWithCounter</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hooks 让我们基于所做的事情不同分割，而不是生命周期函数。React 将根据每个组件指定的 effect 顺序应用每个 effect。</p><p><strong>解释： 为什么 Effect 运行在每次更新之后</strong><br>如果你使用过 class，你可能会疑惑为什么 effect 清除阶段会在每次渲染之后，而不是当销毁组件的时候。让我们看下一个特殊的实例，为什么这个设计帮助我们创建组件，却很少出现 bug。</p><p>在这一章开始的时候，我们介绍了实例 FriendStatus 组件显示朋友是否在线。我们的类从 this.props 读 friend.id,在组件创建之后订阅朋友的状态，在组件销毁之后取消订阅。</p><pre class="line-numbers language-jsx"><code class="language-jsx">  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当组件已经在前台页面，当用户属性发生变化时发生了什么？我们的组件将继续显示不同的好友的在线状态。这是一个 bug。在组件销毁时取消订阅错误的好友 ID，会造成对的好友在内存中，进行造成内存泄露。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Unsubscribe from the previous friend.id</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>      prevProps<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Subscribe to the next friend.id</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handleStatusChange    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>忘记正确的处理 componentDidUpdate 是 React 应用中最常见的来源。</p><p>现在来思考使用 Hooks 的组件版本</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它不会遇到这个 bug。（虽然我们没有对它们做任何改动）</p><p>这里没有特殊的代码处理更新，因为 useEffect 默认处理掉了。它会在下一个 effect 应用之前清除上一个的 effects。为了说明这个，随着时间流逝组件会产生订阅和取消订阅的序列。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 挂载时的 { friend: { id: 100 } } 属性</span>ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第一次运行effect</span><span class="token comment" spellcheck="true">// 用{ friend: { id: 200 } }属性更新</span>ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清除之前的effect</span>ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运行下一个</span><span class="token comment" spellcheck="true">//用 { friend: { id: 300 } }属性更新</span>ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清除之前的effect</span>ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 运行下一个</span><span class="token comment" spellcheck="true">// 销毁</span>ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 清除最后一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个行为默认保证了一致性，阻止了类组件由于缺失更新逻辑导致的常见 bug。</p><p><strong>提示：通过跳过 Effects 来优化性能</strong><br>在某些情况下，每次渲染之后清除或者应用 effect 会造成性能问题。在 class 组件中，我们通过在 componentDidUpdate 写入一个额外的比较 prevProps 和 prevState 来解决这个问题：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span> prevState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prevState<span class="token punctuation">.</span>count <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个很常见的需求，内置到了 useEffect Hook API 中。如果你确认值在重复渲染时值没有发生变化，可以告诉 React 跳过应用 effect。为了做到它，可以传递一个数组作为 useEffect 的第二个可选参数：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`You clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Only re-run the effect if count changes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，我们传递[count]作为第二个参数。什么意思？如果 count 是 5,然后我们的组件内重复渲染时值仍然是 5，React 就会比较[5]和下一个渲染的[5]。因为数组的所有值都相等(5==5)，React 将会跳过 effect。这是实现了我们的优化。</p><p>当我们重新渲染时值更新为 6，React 将对比上一个渲染的数组[5]和下一个渲染的[6]。这个时候 5!==6，所以 react 将重新应用 effect。如果数组中有多项，只要其中一个不一样就会重新运行 effect。</p><p>对于有清除阶段的 effects 同样有效。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只有当值发生变化是才会重新订阅</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未来，第二个参数可能在构建时期自动加上。</p><blockquote><p>注意<br>如果你使用这个优化，保证数组包含组件内<strong>随着时间变化并且被 effect 使用的所有值</strong>。否则，你的代码将引用上一次渲染的泄露的值。参考<a href="https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies" target="_blank" rel="noopener">如何处理函数</a>和<a href="https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often" target="_blank" rel="noopener">数组频繁变化是该怎么做</a>学习更多相关内容。<br>如果你只想 effect 被运和清除一次（在挂载和销毁时），你可以传递一个空数组作为第二个参数。这样告诉 React 你的 Effect 不依赖属性或者 state，所以它不需要重新运行。这种并不属于特殊情况-它遵循依赖数组来工作<br>如果你传递一个空数组，在 effect 中的属性和状态将一直会有它们的初始值。当传递[]作为第二个参数非常接近 componentDidMount 和 componentWillUnmount 的心理模型。但是有<a href="https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often" target="_blank" rel="noopener">更好的方案</a>来避免 effect 被重复运行。另外，不要忘记 React 回延迟运行 useEffect 直到浏览器已经绘制，一次做额外的工作就不成问题了。<br>我们建议在 <a href="https://www.npmjs.com/package/eslint-plugin-react-hooks#installation" target="_blank" rel="noopener">eslint-plugin-react-hook</a> 包中使用 <a href="https://github.com/facebook/react/issues/14920" target="_blank" rel="noopener">exhaustive-dps</a>规则。当警告依赖不正确并且提出修复意见。</p></blockquote><h3 id="下一个步"><a href="#下一个步" class="headerlink" title="下一个步"></a>下一个步</h3><p>恭喜！这是一个很长的页面，但是希望在结尾你的关于 effects 的问题都被解答了。你已经学习了 State Hook 和 Effect Hook,将它们结合起来可以做很多事情。它们覆盖了 class 的大部分场景-如果没有，你可以<a href="https://reactjs.org/docs/hooks-reference.html" target="_blank" rel="noopener">其他 Hooks</a> 找到帮助</p><p>我们也看到了 Hooks 如何解决了<a href="https://reactjs.org/docs/hooks-intro.html#motivation" target="_blank" rel="noopener">动机</a>提出的问题。我们看到 effect 如何避免在 componentDidUpdate 和 componentWillUnmount 的重复，将相关联的代码放在一起，帮助我们避免了许多 bugs。我们也看到了根据他们的功能来分离 effects，这写都是我们无法在 class 中做到的。</p><p>此时你可能好奇 Hooks 是如何工作的。React 是如何在重复渲染时调用 useSate 找到对应的 state 变量？React 如何匹配每次更新时上一个和下一个 effect？<strong>下一节我们将学习 Hooks 的规则-这对用 Hooks 工作非常必要</strong></p><h2 id="Hooks-的规则"><a href="#Hooks-的规则" class="headerlink" title="Hooks 的规则"></a>Hooks 的规则</h2><p>Hooks 是 JS 函数，但是当使用它们时你需要遵循两个原则。我们提供了<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">linter plugin</a>来强制自动执行这些规则。</p><ul><li><p>在最顶层的调用 Hooks<br><strong>不要在循环，条件或者嵌套函数中调用 Hooks。</strong>应该在你 React 函数最顶层的去使用 Hooks。遵循这个规则，你就能够确保 Hooks 在每次组件渲染时都会调用相同的顺序。让 React 能够在 useState 和 useEffect 多次调用之间正确的保留 Hooks 的状态。（如果你好奇，我们将在<a href="https://reactjs.org/docs/hooks-rules.html#explanation" target="_blank" rel="noopener">下面</a>深入的了解它们）</p></li><li><p>只在 React 函数中调用 Hooks<br><strong>不要在常规的 js 函数中调用 Hooks</strong>。相反，你可以：</p><ul><li>✅ 在 React 函数组件中调用 Hooks</li><li>✅ 在自定义 Hooks 调用 Hooks（我们将在<a href="https://reactjs.org/docs/hooks-custom.html" target="_blank" rel="noopener">下一页</a>学习它们）</li></ul><p>遵循这条规则，确保在源码中组件的状态逻辑都是清晰可见的</p></li></ul><h3 id="ESLint-Plugin"><a href="#ESLint-Plugin" class="headerlink" title="ESLint Plugin"></a>ESLint Plugin</h3><p>我们发布了 ESLint 插件叫做<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">eslint-plugin-react-hooks</a>强制遵循这两个规则。如果你喜欢尝试你可以添加插件到你的项目中：<br>在<a href="https://reactjs.org/docs/create-a-new-react-app.html#create-react-app" target="_blank" rel="noopener">Crate React APP</a>中默认包含这个插件。</p><pre class="line-numbers language-jsx"><code class="language-jsx">npm install eslint<span class="token operator">-</span>plugin<span class="token operator">-</span>react<span class="token operator">-</span>hooks <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//你的ESLint的配置</span><span class="token punctuation">{</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token string">"react-hooks"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"rules"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>    <span class="token string">"react-hooks/rules-of-hooks"</span><span class="token punctuation">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Checks rules of Hooks</span>    <span class="token string">"react-hooks/exhaustive-deps"</span><span class="token punctuation">:</span> <span class="token string">"warn"</span> <span class="token comment" spellcheck="true">// Checks effect dependencies</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以跳过直接去下一章，怎么写自己的 Hooks。在这个页面，我们将继续解释这些规则背后的原因。</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>在学习初期，我们在一个组件中使用了多个 State 和 Effect。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Form</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. Use the name state variable</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2. Use an effect for persisting the form</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">persistForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"formData"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3. Use the surname state variable</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>surname<span class="token punctuation">,</span> setSurname<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Poppins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 4. Use an effect for updating the title</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">updateTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> surname<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以 React 是怎么知道哪个 state 对应哪个 useSate 调用？答案是<strong>React 依赖 Hooks 被调用的顺序</strong>。在我们的例子中，因为每次渲染 Hooks 的调用顺序都是相同的所以能够正常工作。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// ------------</span><span class="token comment" spellcheck="true">// First render</span><span class="token comment" spellcheck="true">// ------------</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. Initialize the name state variable with 'Mary'</span><span class="token function">useEffect</span><span class="token punctuation">(</span>persistForm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2. Add an effect for persisting the form</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Poppins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3. Initialize the surname state variable with 'Poppins'</span><span class="token function">useEffect</span><span class="token punctuation">(</span>updateTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4. Add an effect for updating the title</span><span class="token comment" spellcheck="true">// -------------</span><span class="token comment" spellcheck="true">// Second render</span><span class="token comment" spellcheck="true">// -------------</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. Read the name state variable (argument is ignored)</span><span class="token function">useEffect</span><span class="token punctuation">(</span>persistForm<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2. Replace the effect for persisting the form</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Poppins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3. Read the surname state variable (argument is ignored)</span><span class="token function">useEffect</span><span class="token punctuation">(</span>updateTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4. Replace the effect for updating the title</span><span class="token comment" spellcheck="true">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在多次渲染函数之间 Hooks 的调用顺序一样，React 就可以关联相同的本地 State 给每个 Hooks。但是如果我们将 Hook 调用放到判断条件中会发生什么？</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 🔴 在条件判断中使用Hook将违反了第一个规则</span><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">persistForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"formData"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一次渲染 name !== “”是 true，所以我们会运行这个 Hook。但是在下一次渲染的时候，用户可能清除了这个表单，使得这个条件 false。现在在渲染的时候跳过这个 Hook 了，Hook 的调用顺序发生了变化：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Mary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1. 读名为name状态变量 (参数被忽略)</span><span class="token comment" spellcheck="true">// useEffect(persistForm)  // 🔴 这个Hook被跳过</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">"Poppins"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 🔴 2 (but was 3). 读取名为surname的状态变量失败</span><span class="token function">useEffect</span><span class="token punctuation">(</span>updateTitle<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 🔴 3 (but was 4). 替换effect失败</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>React 不知道第二个 useState Hook 调用返回的结果是什么。React 预期在这个组件中第二个 Hook 调用应该是 persisForm effect，就像之前运行一样，但是现在不是。从这点开始，我们跳过的这个后面的每个 Hook 调用都会被提升一级，导致 bugs。</p><p><strong>这也是为什么 Hooks 一定要在组件的顶层调用。</strong>如果我们想要有条件的运行 effect，我们可以在 Hook 中设置条件。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">persistForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 👍 我们没有违反第一个规则</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"formData"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意，如果你装了插件就不需要担心这个问题</strong>。不过你现在知道了为什么 Hooks 这么工作，也知道了这个规则是为了避免什么问题。</p><h3 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h3><p>最后，我们准备开始学习些构建自己的 Hooks！自定义 Hooks 让你可以组合 React 提供的 Hooks 到那你自己的抽象，让它可以在组件之间复用状态逻辑。</p><h2 id="构建自己的-Hooks-1"><a href="#构建自己的-Hooks-1" class="headerlink" title="构建自己的 Hooks"></a>构建自己的 Hooks</h2><p>构建自己的 Hooks 让你可以提取组件的逻辑到可重用的函数。</p><p>当我们学习 Effect Hook 时，我们看到聊天应用的组件显示消息来指示朋友是在线还是离线：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Loading..."</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">"Online"</span> <span class="token punctuation">:</span> <span class="token string">"Offline"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在让我们来看，聊天应用还有一个聊天列表，我们想要渲染在线用户端名字为绿色。我们可以 cv 相同的逻辑到 FriendListItem 项中，但是这不够理想。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FriendListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> isOnline <span class="token operator">?</span> <span class="token string">"green"</span> <span class="token punctuation">:</span> <span class="token string">"black"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相反，我们希望在 FriendStatus 和 FriendListItem 之间共享这个逻辑。</p><p>在这之前，React 在组件之间有两种方式共享状态逻辑：<a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">渲染属性</a> 和<a href="https://reactjs.org/docs/higher-order-components.html" target="_blank" rel="noopener">高阶组件</a>。我们将看到 Hooks 如何不在组件树中添加更多的组件解决这些问题。</p><h3 id="提取自定义-Hook"><a href="#提取自定义-Hook" class="headerlink" title="提取自定义 Hook"></a>提取自定义 Hook</h3><p>当我们想要在两个 js 函数中共享逻辑时，我们提取它到第三方函数中。组件和 Hooks 都是函数，所以这同样可以生效！</p><p><strong>自定义 Hook 是一个使用 use 开头的 js 函数并且可以调用其他 Hooks。</strong>列如，下面 useFriendStatus 是我们第一个自定义 Hook。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">handleStatusChange</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setIsOnline</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ChatAPI<span class="token punctuation">.</span><span class="token function">subscribeToFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      ChatAPI<span class="token punctuation">.</span><span class="token function">unsubscribeFromFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">,</span> handleStatusChange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> isOnline<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面没有新的的东西–逻辑都是从上面的组件中 copy 过去的。就像在组件中，保证只在自定义 Hook 顶层调用其他 Hook。</p><p>不像 React 组件，自定义 Hook 不需要有具体签名。我们可以自己决定用什么参数，参数是什么，以及该返回什么。其他方面就像一个普通的函数。函数命名一直以 use 开头，一眼就可以看出符合 Hooks 的规则。</p><p>useFriendStatus Hook 的目的是为了订阅朋友的状态。这也会为什么第一给参数是 friendID，返回这个朋友是否在线。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">return</span> isOnline<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在让我们来看下如何使用我们自己的自定义 Hook</p><h3 id="使用自定义-Hook"><a href="#使用自定义-Hook" class="headerlink" title="使用自定义 Hook"></a>使用自定义 Hook</h3><p>我们开始的目标是从 FriendStatus 和 FriendListItem 组件中删除重复逻辑。它们两个都想知道朋友是否在线。<br>现在我们可以提取逻辑到 useFriendStatus Hook，然后就可以使用它。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isOnline <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Loading..."</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> isOnline <span class="token operator">?</span> <span class="token string">"Online"</span> <span class="token punctuation">:</span> <span class="token string">"Offline"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FriendListItem</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> isOnline <span class="token operator">?</span> <span class="token string">"green"</span> <span class="token punctuation">:</span> <span class="token string">"black"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>这代码是否等价于原来的案例？</strong> 是的，它们相等。如果你仔细观察，你将注意到我们不会更改任何行为。我们只是从两个函数中提取公共的代码到独立的函数中。<strong>自定义 Hooks 是自然遵循 Hooks 设计的约定，而不是 React 特性。</strong></p><p><strong>自定义 Hook 命名开始都必须带 use 吗？</strong> 必须。这个约定很重要。没有它，我们无法自动检查 Hooks 的规则违规，因为我们无法知道那个函数包含了 Hooks 调用。</p><p><strong>在两个组件使用相同的 Hook 会共享装填吗？</strong> 不会。自定义 Hooks 是重用状态逻辑的机制（像设置订阅和记住当前值），但是你每次使用自定义 Hook，所有其中的状态和 effects 都是完全独立的。</p><p><strong>自定义 Hook 如何获得独立的状态？</strong> 每次调用 Hook 获得独立的状态。因为直接调用 useFriendStatus，从 React 的视角我们的组件只是调用了 useState 和 useEffect。跟我们之前了解的一样，我们可以在一个组件中调用 useState 和 useEffect 多次，它们是完全独立的。</p><p><strong>提示：在 Hooks 之间传递信息</strong><br>因为 Hooks 是一个函数，我们可以在它们之间传递信息。</p><p>为了说明这一点，在我们假想的聊天案例中使用其他组件。它是一个聊天消息接收者选择器，显示那些当前选中好友是否在线：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> friendList <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Phoebe"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Rachel"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">"Ross"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ChatRecipientPicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>recipientID<span class="token punctuation">,</span> setRecipientID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> isRecipientOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>recipientID<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Circle</span> <span class="token attr-name">color</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>isRecipientOnline <span class="token operator">?</span> <span class="token string">"green"</span> <span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>recipientID<span class="token punctuation">}</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setRecipientID</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>      <span class="token punctuation">></span></span>        <span class="token punctuation">{</span>friendList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>friend<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>friend<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span>friend<span class="token punctuation">.</span>name<span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们存当前选中的好友 ID 到 recipientID 的状态变量上，我们可以传递它到我们自定义的 useFriendStatus Hook 的参数上。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>recipientID<span class="token punctuation">,</span> setRecipientID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> isRecipientOnline <span class="token operator">=</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>recipientID<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它让我们知道当前选中的朋友是否在线。如果我们选中另外一个好友，然后会更新这个 recipientID 状态变量，我们 useFriendStatus Hook 将之前的选中的好友取消订阅，并订阅当前新选中的一个。</p><h3 id="useYourImagination"><a href="#useYourImagination" class="headerlink" title="useYourImagination()"></a>useYourImagination()</h3><p>自定义 Hooks 提供了之前无法在 React 上实现的灵活共享状态逻辑。你可以自定义 Hooks 来覆盖更大范围的用户场景，比如表单处理，动画，声明订阅，定时器和可能更多我们无法考虑到的场景。更重要的是，你创建 Hooks 就像使用 React 内置特性一样简单。</p><p>尽量避免过早的添加抽象。现在函数组件可以做的更多，那么你代码仓库中函数组件的代码将会边长。这属于正常现象–不要觉得你要立刻将它拆分到 Hook 中。但我们仍鼓励你发现自定义 Hook 可以将复杂的逻辑隐藏在简单的接口后面，或者帮助解开组件杂乱的情况。</p><p>举例，可能你有个复杂的组件，包含大量用特殊方式管理的本地状态。useState 不会使得集中化的更新逻辑简单，所以你应该更愿意使用 Redux 的 reducer 来编写：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">todosReducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"add"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token operator">...</span>state<span class="token punctuation">,</span>        <span class="token punctuation">{</span>          text<span class="token punctuation">:</span> action<span class="token punctuation">.</span>text<span class="token punctuation">,</span>          completed<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ... other actions ...</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Reducers 非常方便的独立测试，并且易于扩展用于表达复杂的更新逻辑。如果需要你可以更进一步的拆分成更小的 reducers。但是，你可能还享受这 React 本地状态带来的好处，或者不想安装其他的库。</p><p>所以为什么不可以写一个 useReducer Hook，让它来帮助我们用 reducer 来管理我们组件的本地状态？一个它的简单版本可以像这样：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> nextState <span class="token operator">=</span> <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setState</span><span class="token punctuation">(</span>nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们可以使用它在我们的组件中，让 reducer 驱动它的状态管理。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Todos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>todos<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>todosReducer<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleAddClick</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"add"</span><span class="token punctuation">,</span> text <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在复杂的组件中使用 reducer 来管理本地状态是常见的需求，我们已经在 React 中内置了 useReducer Hook。你可以在<a href="https://reactjs.org/docs/hooks-reference.html" target="_blank" rel="noopener">HOOKS API 文档</a>中找到这些 Hook</p><h2 id="Hooks-API-的文档"><a href="#Hooks-API-的文档" class="headerlink" title="Hooks API 的文档"></a>Hooks API 的文档</h2><p>如果你是 Hooks 的新手，你应该首先查看<a href="https://reactjs.org/docs/hooks-overview.html" target="_blank" rel="noopener">概览</a>。你也可以在 Hooks 中找到有用的信息。</p><h3 id="基础的-Hooks"><a href="#基础的-Hooks" class="headerlink" title="基础的 Hooks"></a>基础的 Hooks</h3><h4 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h4><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回一个有状态值，已经一个更新它的函数。</p><p>在初始化渲染期间，这个返回的 state 就是初始传参 initialState。</p><p>这个 setState 函数是用来更新 state 的。它接收新状态值并触发组件重新渲染。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在重新渲染期间，useState 返回的第一个值是更新 state 之后的最新值。</p><blockquote><p>注意<br>React 保证它的 setState 函数可以稳定的识别，并且不会再重新渲染时发生改变。这是为什么可以安全的从 useEffect 或者 useCallback 的依赖列表中省略 setState 了。</p></blockquote><p><strong>函数式更新</strong><br>如果新的状态是由上个状态更新出来的，你可以传递一个函数给 setState。函数接受之前的值，然后返回更新值。这里有一个计数器组件的案例展示了两用使用 setState 的方法。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> initialCount <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialCount<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      Count<span class="token punctuation">:</span> <span class="token punctuation">{</span>count<span class="token punctuation">}</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>initialCount<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Reset<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevCount<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prevCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">-</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevCount<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> prevCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token operator">+</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>+和-按钮使用了函数形式，因为更新值是基于前面值。但是重置按钮使用了常用形式，因为它经常设置 count 返回初始值。</p><p>如果你的更新函数对比当前状态返回了相同的值，随后重新渲染将会完全跳过。</p><blockquote><p>注意<br>不像在类组件中的 setState 方法，useSate 不会自动合并对象。你可以通过用对象展开语法的更新函数来复制这个行为。</p></blockquote><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Object.assign would also work</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>prevState<span class="token punctuation">,</span> <span class="token operator">...</span>updatedValues <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外选项是 useReducer，它更适合管理包含多个子值的状态对象。</p><p><strong>延迟的初始状态</strong><br>initialState 参数是在初次渲染期间作为 state。在后续渲染时会被忽略。如果初始状态结果是非常昂贵的技术，你可能需要提供函数来替换，它只有在第一次渲染时才会被执行。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token function">someExpensiveComputation</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> initialState<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>跳过状态更新</strong></p><p>如果你更新 State Hook 给一个当前状态相同的值，React 将跳过渲染子组件或者触发 effects。（React 使用）<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description" target="_blank" rel="noopener">Object.is 来比较计算</a></p><p>注意 React 仍然可能在跳过更新之前渲染该组件。大可不必担心，因为 React 不会对组件树进行深度对比。如果你在渲染期间做了很昂贵的计算，你应该使用 useMemo 进行优化。</p><h4 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h4><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span>didUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>清理 effect</strong><br><strong>effects 的执行时机</strong><br><strong>有条件的触发 effect</strong></p><h4 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h4><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>将它和 Context.Provider 放在一起</strong></p><h3 id="Additional-Hooks"><a href="#Additional-Hooks" class="headerlink" title="Additional Hooks"></a>Additional Hooks</h3><h4 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h4><h4 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h4><h4 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h4><h4 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h4><h4 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h4><h4 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h4><h4 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a>useDebugValue</h4><h2 id="Hooks-常见问题"><a href="#Hooks-常见问题" class="headerlink" title="Hooks 常见问题"></a>Hooks 常见问题</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> react </tag>
            
            <tag> docs </tag>
            
            <tag> 进行中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react advance</title>
      <link href="/blog/react-advance/"/>
      <url>/blog/react-advance/</url>
      
        <content type="html"><![CDATA[<p><a href="https://reactjs.org/docs/accessibility.html" target="_blank" rel="noopener">原文</a></p><h2 id="高级指南"><a href="#高级指南" class="headerlink" title="高级指南"></a>高级指南</h2><h3 id="Accessibility"><a href="#Accessibility" class="headerlink" title="Accessibility"></a>Accessibility</h3><h3 id="代码分割"><a href="#代码分割" class="headerlink" title="代码分割"></a>代码分割</h3><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>大多数 React 应用使用 <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a>,<a href="https://rollupjs.org/" target="_blank" rel="noopener">Rollup</a>或者<a href="http://browserify.org/" target="_blank" rel="noopener">Browserify</a>工具来打包它们的文件。打包是跟踪导入文件并将它们合并到单个文件的过程：最后得到一个 bundle 文件。这个 bundle 文件可以放到页面上一次性加载整个应用。</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><h5 id="App"><a href="#App" class="headerlink" title="App:"></a>App:</h5><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./math.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// math.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<br>你的打包文件最后可能跟上面有点不一样。</p></blockquote><p>如果你使用<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">Create React App</a>, <a href="https://github.com/zeit/next.js/" target="_blank" rel="noopener">Next.js</a>, <a href="https://www.gatsbyjs.org/" target="_blank" rel="noopener">Gatsby</a>,或者类似的工具，你将有一个 Webpack 配置开箱即用的打包你的应用。</p><p>如果你不是使用这些工具，你需要自己设置打包配置。举例，在 webpack 文档上看<a href="https://webpack.js.org/guides/installation/" target="_blank" rel="noopener">安装</a>和<a href="https://webpack.js.org/guides/getting-started/" target="_blank" rel="noopener">入门指南</a>。</p><h4 id="代码分割-1"><a href="#代码分割-1" class="headerlink" title="代码分割"></a>代码分割</h4><p>打包是一个非常棒的技术，但随着你应用的增长，你打包的文件会增长的越大。尤其是你包含了非常大的第三方库时。你需要密切关注你打包的代码，以免意外使其过大导致你的应用需要花费很长时间区加载。</p><p>为了避免结成大包，前期应该思考问题并开始”分解“你的打包文件。代码分割是由像 Webpack，Rollup 以及 Browserify（factor-bundle）这样打包器支持的技术，能够创建多个包以便在运行时动态加载。</p><p>代码分割你应用可以帮助你懒加载用户当前需要的内容，它可以显著的提高你应用的性能。虽然并没有减少你应用的总代码行数，你可以避免加载到用户不需要的代码，减少在初始化加载时需要的代码。</p><h4 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h4><p>将代码分割引入到你应用的最好的方法是通过动态 import() 语法。<br><strong>Before</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> add <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./math"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>After</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./math"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当 Webpack 遇到这个语法，它自动开始代码分割你的应用。如果你使用 Create React App，它已经为你配置好，你可以立刻<a href="https://facebook.github.io/create-react-app/docs/code-splitting" target="_blank" rel="noopener">使用它</a>。Next.js 同样也开箱即用的支持。</p><p>如果你自己设置 Webpack，你可能需要阅读 Webpack 的<a href="https://webpack.js.org/guides/code-splitting/" target="_blank" rel="noopener">代码分割指南</a>。你的 webpack 配置应该<a href="https://gist.github.com/gaearon/ca6e803f5c604d37468b0091d9959269" target="_blank" rel="noopener">像这样</a>。</p><p>当你使用<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>，你将需要保证 Babel 能够解析动态导入语法而不能够转化它。你需要<a href="https://yarnpkg.com/en/package/babel-plugin-syntax-dynamic-import" target="_blank" rel="noopener">babel-plugin-syntax-dynamic-import</a>来做到。</p><h4 id="React-lazy"><a href="#React-lazy" class="headerlink" title="React.lazy"></a>React.lazy</h4><blockquote><p>注意：<br>React.lazy 和 Suspense 尚不能用于服务端渲染。如果你想要在服务端渲染应用中进行代码分割。我们建议使用 Loadable 组件。它提供了用于打包和服务端渲染拆分的非常好的指南。</p></blockquote><p>React.lazy 函数可以让你将动态导入作为一个常规的组件。<br><strong>Before</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> OtherComponent <span class="token keyword">from</span> <span class="token string">"./OtherComponent"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>After</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./OtherComponent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当这个组件被第一次渲染时它将自动加载包含 OtherComponent 组件的包。</p><p>React.lazy 接受一个必定调用动态 import()方法的函数。它一定会返回一个 Promise，这个 Promise 解析带有默认导出 React 组件的模块。</p><p>这个懒加载组件应该渲染在 Suspense 组件中，它允许我们去显示后备内容（比如加载中指示器）当我们等待懒加载组件去加载时。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./OtherComponent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback={&lt;div</span><span class="token punctuation">></span></span>Loading<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OtherComponent</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 fallback 属性接受任何你想在加载时显示的组件。你可以将 Suspense 组件放到懒加载组件之上的任何位置。你甚至可以用一个 Suspense 组件包装多个懒加载组件。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./OtherComponent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> AnotherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./AnotherComponent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback={&lt;div</span><span class="token punctuation">></span></span>Loading<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OtherComponent</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AnotherComponent</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="异常捕获边界"><a href="#异常捕获边界" class="headerlink" title="异常捕获边界"></a>异常捕获边界</h4><p>如果这个 other 模块加载失败（举例，由于网络失败），它将处罚一个异常。你可以处理这些错误去显示一个比较友好的用户体验并且使用<a href="https://reactjs.org/docs/error-boundaries.html" target="_blank" rel="noopener">异常捕获边界</a>来恢复。一旦你创建了你的错误异常边界，你可以在你懒加载组件之上任何地方显示错误状态，当发生网络异常时。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> MyErrorBoundary <span class="token keyword">from</span> <span class="token string">"./MyErrorBoundary"</span><span class="token punctuation">;</span><span class="token keyword">const</span> OtherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./OtherComponent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> AnotherComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./AnotherComponent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyErrorBoundary</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback={&lt;div</span><span class="token punctuation">></span></span>Loading<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OtherComponent</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AnotherComponent</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyErrorBoundary</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="基于路由的代码分割"><a href="#基于路由的代码分割" class="headerlink" title="基于路由的代码分割"></a>基于路由的代码分割</h4><p>决定应用中哪里引入代码分割可能比较棘手。你想要确保你选择的位置以均匀的分割包，但是不会破坏用户体验。</p><p>一个分割推荐的位置是根据路由。网络上大多数人习惯于页面过度需要花一些时间加载，你还倾向于重新渲染整个应用，因此你的用户可能无法同时跟页面上的其他元素交互了。</p><p>这里有一个实例使用<a href="https://reacttraining.com/react-router/" target="_blank" rel="noopener">React Router</a>和 React.lazy 来设置基于路由的代码分割到你的应用。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Suspense<span class="token punctuation">,</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./routes/Home"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./routes/About"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Router</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span> <span class="token attr-name">fallback={&lt;div</span><span class="token punctuation">></span></span>Loading<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Switch</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">exact</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Route</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>About<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Switch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Router</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名导出"><a href="#命名导出" class="headerlink" title="命名导出"></a>命名导出</h4><p>React.lazy 当前支持默认导出。如果这个模块你想要使用命名导出，你可以创建一个中间模块重新将它作为默认导出。它能保证 tree shaking 正常工作，并且不会引入未使用的代码。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// ManyComponents.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> MyUnusedComponent <span class="token operator">=</span> <span class="token comment" spellcheck="true">/* ... */</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// MyComponent.js</span><span class="token keyword">export</span> <span class="token punctuation">{</span> MyComponent <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./ManyComponents.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// MyApp.js</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> lazy <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./MyComponent.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><blockquote><p>Context 提供了通过组件树传递数据的方式，不需要手动在各个 level 手动向下传递 props。</p></blockquote><p>在典型的 React 应用中，数据是通过 props 从上自下传递的（父亲传递给孩子），但是对于应用中的许多组件的 props(比如，本地偏好，UI 主题)需要确定类型，可能会很麻烦。Context 提供了在组件之间共享值的方式，不需要显式的在树结构的每个 level 上传递 props。</p><h4 id="什么时机使用-Context"><a href="#什么时机使用-Context" class="headerlink" title="什么时机使用 Context"></a>什么时机使用 Context</h4><p>Context 被设计共享那些 React 组件树种被认为是”global“的数据，例如当前经过身份认证的用户，主题，或者语言偏好。例如，下面的代码我们手动通过主题穿线为 Button 组件设置样式。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toolbar</span> <span class="token attr-name">theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dark<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Toolbar组件一定要获取theme prop，并且传递它到ThemeButton。它很有用</span>  <span class="token comment" spellcheck="true">// 如果应用中的每个Button都需要知道theme。因为它需要给所有组件都要传递theme</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemedButton</span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>theme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThemedButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>theme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 context，我们可以避免通过中间元素传递 props。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 上下文让我们将值传递到组件树深处</span><span class="token comment" spellcheck="true">// 不需要显式的串联每个组件</span><span class="token comment" spellcheck="true">// 为当前主题创建上下文 (默认使用light).</span><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 下面使用Provider传递当前的主题到组件树中</span>    <span class="token comment" spellcheck="true">// 任何组件都可以读到，不要关心组件树有多深</span>    <span class="token comment" spellcheck="true">// 在这个例子中，我们将传递dark作为当前值</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dark<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toolbar</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 中间的组件不在需要显式的向下传递theme</span><span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemedButton</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ThemedButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 分配一个contextType去读当前主题的context.</span>  <span class="token comment" spellcheck="true">// React将找到最近的主题provider，然后使用这个值</span>  <span class="token comment" spellcheck="true">// 在这个例子中，当前主题是dark</span>  <span class="token keyword">static</span> contextType <span class="token operator">=</span> ThemeContext<span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在使用-Context-之前"><a href="#在使用-Context-之前" class="headerlink" title="在使用 Context 之前"></a>在使用 Context 之前</h4><p>Context 主要用于需要嵌套在不同层级的组件都可以访问的一些数据。要谨慎的使用它，因为它会使得组件复用更加困难。</p><p><strong>如果你只想避免给许多层级传递相同的 props，<a href="https://reactjs.org/docs/composition-vs-inheritance.html" target="_blank" rel="noopener">组件组合</a>相较于 Context 是一个常用的简单解决方案</strong></p><p>举例，思考 Page 组件向下穿透几个层级传递 user 和 avatarSize 属性，让深层次的 Link 和 Avatar 组件可以读到它：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">avatarSize</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>avatarSize<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// ... which renders ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PageLayout</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">avatarSize</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>avatarSize<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// ... which renders ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationBar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">avatarSize</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>avatarSize<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// ... which renders ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>permalink<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>avatarSize<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只有最后的 Avatar 组件读，可能会觉得通过许多中间层次的向下传递 user 和 avatarSize 有些多余。当 Avatar 组件需要从顶部中获得更多的属性时就非常烦人了，你必须在所有中间层中添加它们。</p><p>一种不带 context 的解决这个问题的方法是<a href="https://reactjs.org/docs/composition-vs-inheritance.html#containment" target="_blank" rel="noopener">向下传递 Avatar 组件自己</a>，所以中间层级组件不需要知道 user 或者 avatarSize 属性。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> props<span class="token punctuation">.</span>user<span class="token punctuation">;</span>  <span class="token keyword">const</span> userLink <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>permalink<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>avatarSize<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PageLayout</span> <span class="token attr-name">userLink</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>userLink<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Now, we have:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">avatarSize</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>avatarSize<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// ... which renders ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PageLayout</span> <span class="token attr-name">userLink</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// ... which renders ...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationBar</span> <span class="token attr-name">userLink</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">// ... which renders ...</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>userLink<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随着这次改变，只有顶层的 Page 组件需要知道 Link 和 Avatar 组件使用 user 和 avatarSize 属性。</p><p>在许多情况下，通过减少应用需要传递的 props 以及让顶层组件有更多的控制力，这种倒置的控制可以让你的代码清晰。然而它不是每种情况下正确的选择：将树中复杂度提高会使得更高级别组件变得更加复杂，并且会强制低级别组件变得比你想象的还要灵活。</p><p>你不仅可以给组件传递单个 child。你可能要传递多个 children，或者给子组件提供多个单独的”插槽“，<a href="https://reactjs.org/docs/composition-vs-inheritance.html#containment" target="_blank" rel="noopener">如下所示</a></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> user <span class="token operator">=</span> props<span class="token punctuation">.</span>user<span class="token punctuation">;</span>  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Feed</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> topBar <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NavigationBar</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">.</span>permalink<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Avatar</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">size</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>avatarSize<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>NavigationBar</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PageLayout</span> <span class="token attr-name">topBar</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>topBar<span class="token punctuation">}</span></span> <span class="token attr-name">content</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在多数情况下，当你需要从它的中间父亲中解耦出 child，这种模式足够了。如果 child 需要在渲染之前和父组件交流，可以使用<a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">render props</a>进一步完善它。</p><p>但是，有时候一些数据需要被树中许多组件访问，且嵌套在不同的层级中。Context 让你可以”广播“这种数据及其更改到下面的所有组件。使用 context 常见的案例包括管理当前的 local,theme，或者一些缓存数据，这比替代方案要简单的多。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><h5 id="React-createContext"><a href="#React-createContext" class="headerlink" title="React.createContext"></a>React.createContext</h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个 Context 对象。当 React 渲染一个订阅该 Context 对象的组件时将从树中它的上面最近匹配的 Provider 读取值。</p><p>这个 defaultValue 参数只有当组件没有在树中它的上级匹配到 provider 时使用。不用 Provider 包装，有助于隔离测试。注意：给 Provider 的 value 传递 undefined 时， 消费组件不会使用 defaultValue。</p><h5 id="Context-Provider"><a href="#Context-Provider" class="headerlink" title="Context.Provider"></a>Context.Provider</h5><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token operator">&lt;</span>MyContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* some value */</span><span class="token punctuation">}</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>每个 Context 对象都带有一个 ProviderReact 组件，它允许消费组件去订阅 context 变化。</p><p>接受 value 属性传递给当前 Provider 的后代消费组件。一个 Provider 可以连接多个消费组件。Providers 可以嵌套，深层的会覆盖上层的。</p><p>Provider 的 value 属性变化，它的的所有后代消费组件都重新渲染。Provider 传递给它的后代消费者的传播不是订阅自 shouldComponentUpdate 方法，所以即使当消费组件的祖先组件跳过一个更新时，它仍然会根据这个传播来更新。</p><p>更改的依据对比新值和旧值的方式使用了同样的算法,<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Description" target="_blank" rel="noopener">Object.is</a></p><blockquote><p>注意：<br>当传递 value 是对象时，它的变更会带来一些问题：看<a href="https://reactjs.org/docs/context.html#caveats" target="_blank" rel="noopener">注意事项</a></p></blockquote><h5 id="Class-contextType"><a href="#Class-contextType" class="headerlink" title="Class.contextType"></a>Class.contextType</h5><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 使用MyContext的值在挂载组件之后做一些副作用操作 */</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* ... */</span>  <span class="token punctuation">}</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* ... */</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 根据 MyContext的值进行渲染 */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>MyClass<span class="token punctuation">.</span>contextType <span class="token operator">=</span> MyContext<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Class 上的 ContextType 属性可以分配由<a href="https://reactjs.org/docs/context.html#reactcreatecontext" target="_blank" rel="noopener">React.createContext()</a>创建的 Context 对象。它让你使用 this.context 来消费这个 Context Type 最近的值。在在任何生命周期函数中引用它，包括渲染方法。</p><blockquote><p>注意：<br>你只能使用这个 API 订阅单个 context。如果你需要了解更多读<a href="https://reactjs.org/docs/context.html#consuming-multiple-contexts" target="_blank" rel="noopener">消费多个 Context</a>。</p></blockquote><blockquote><p>如果你使用实验性的<a href="https://babeljs.io/docs/plugins/transform-class-properties/" target="_blank" rel="noopener">public class fields syntax</a>,你可以使用 static 类字段来初始化你的 contextType。</p></blockquote><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> contextType <span class="token operator">=</span> MyContext<span class="token punctuation">;</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 根据这个值来渲染 */</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Context-Consumer"><a href="#Context-Consumer" class="headerlink" title="Context.Consumer"></a>Context.Consumer</h5><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyContext.Consumer</span><span class="token punctuation">></span></span>  <span class="token punctuation">{</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token comment" spellcheck="true">/* 根据这个值来渲染东西 */</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyContext.Consumer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>订阅 context 变化的 React 组件。让让你用函数组件订阅一个 context。</p><p>要求一个<a href="https://reactjs.org/docs/render-props.html#using-props-other-than-render" target="_blank" rel="noopener">函数作为 child</a>。这个函数接受当前 context 并返回 React node。这个传递给函数的 value 参数等于树结构中上面最近的 Provider 提供的 Context。如果没有找到匹配的 Provider，这个 value 参数就等于默认传递给 createContext()的 defaultValue。</p><blockquote><p>注意：<br>关于‘函数作为 child’模式的更多信息，看<a href="https://reactjs.org/docs/render-props.html" target="_blank" rel="noopener">render props</a></p></blockquote><h5 id="Context-displayName"><a href="#Context-displayName" class="headerlink" title="Context.displayName"></a>Context.displayName</h5><p>Context 对象接受 displayName 字符串属性。React DevTools 使用这个字符串决定 context 显示的什么。</p><p>举例，下面的组件将在 DevTools 中显示 MyDisplayName：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> MyContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* some value */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyContext<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token string">'MyDisplayName'</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyContext.Provider</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">// "MyDisplayName.Provider" in DevTools</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyContext.Consumer</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">// "MyDisplayName.Consumer" in DevTools</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="动态-Context"><a href="#动态-Context" class="headerlink" title="动态 Context"></a>动态 Context</h5><p>带主题动态值的复杂实例<br><strong>theme-context.js</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">const</span> themes <span class="token operator">=</span> <span class="token punctuation">{</span>  light<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">"#eeeeee"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  dark<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">"#222222"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>  themes<span class="token punctuation">.</span>dark <span class="token comment" spellcheck="true">// default value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>themed-button.js</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./theme-context"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ThemedButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> props <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">let</span> theme <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>button <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> backgroundColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>background <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>ThemedButton<span class="token punctuation">.</span>contextType <span class="token operator">=</span> ThemeContext<span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> ThemedButton<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>app.js</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext<span class="token punctuation">,</span> themes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./theme-context"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ThemedButton <span class="token keyword">from</span> <span class="token string">"./themed-button"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// An intermediate component that uses the ThemedButton</span><span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemedButton</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>changeTheme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Change Theme<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemedButton</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      theme<span class="token punctuation">:</span> themes<span class="token punctuation">.</span>light<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>toggleTheme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        theme<span class="token punctuation">:</span> state<span class="token punctuation">.</span>theme <span class="token operator">===</span> themes<span class="token punctuation">.</span>dark <span class="token operator">?</span> themes<span class="token punctuation">.</span>light <span class="token punctuation">:</span> themes<span class="token punctuation">.</span>dark<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// The ThemedButton button inside the ThemeProvider</span>    <span class="token comment" spellcheck="true">// uses the theme from state while the one outside uses</span>    <span class="token comment" spellcheck="true">// the default dark theme</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Page</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toolbar</span> <span class="token attr-name">changeTheme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>toggleTheme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Section</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemedButton</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Section</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Page</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="从嵌套组件中更新-Context"><a href="#从嵌套组件中更新-Context" class="headerlink" title="从嵌套组件中更新 Context"></a>从嵌套组件中更新 Context</h5><p>经常需要在组件树嵌套很深的组件中更新 context。这种情况你可以传递个函数给 context，允许消费组件去更新 context。<br><strong>theme-context.js</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Make sure the shape of the default value passed to</span><span class="token comment" spellcheck="true">// createContext matches the shape that the consumers expect!</span><span class="token keyword">export</span> <span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  theme<span class="token punctuation">:</span> themes<span class="token punctuation">.</span>dark<span class="token punctuation">,</span>  toggleTheme<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>theme-toggler-button.js</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./theme-context"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ThemeTogglerButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// The Theme Toggler Button receives not only the theme</span>  <span class="token comment" spellcheck="true">// but also a toggleTheme function from the context</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> theme<span class="token punctuation">,</span> toggleTheme <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>toggleTheme<span class="token punctuation">}</span></span>          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> backgroundColor<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>background <span class="token punctuation">}</span><span class="token punctuation">}</span></span>        <span class="token punctuation">></span></span>          Toggle Theme        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ThemeTogglerButton<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>app.js</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext<span class="token punctuation">,</span> themes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./theme-context"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ThemeTogglerButton <span class="token keyword">from</span> <span class="token string">"./theme-toggler-button"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>toggleTheme <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        theme<span class="token punctuation">:</span> state<span class="token punctuation">.</span>theme <span class="token operator">===</span> themes<span class="token punctuation">.</span>dark <span class="token operator">?</span> themes<span class="token punctuation">.</span>light <span class="token punctuation">:</span> themes<span class="token punctuation">.</span>dark<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// State also contains the updater function so it will</span>    <span class="token comment" spellcheck="true">// be passed down into the context provider</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      theme<span class="token punctuation">:</span> themes<span class="token punctuation">.</span>light<span class="token punctuation">,</span>      toggleTheme<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>toggleTheme<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// The entire state is passed to the provider</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeTogglerButton</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="消费多个-Contexts"><a href="#消费多个-Contexts" class="headerlink" title="消费多个 Contexts"></a>消费多个 Contexts</h5><p>为了让 context 重新渲染更快，React 需要让每个 context 消费者树中是一个单独的节点。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// Theme context, default to light theme</span><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">"light"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Signed-in user context</span><span class="token keyword">const</span> UserContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Guest"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> signedInUser<span class="token punctuation">,</span> theme <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// App component that provides initial context values</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>signedInUser<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Layout</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserContext.Provider</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Provider</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Sidebar</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Content</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// A component may consume multiple contexts</span><span class="token keyword">function</span> <span class="token function">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span><span class="token punctuation">(</span>theme<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>UserContext.Consumer</span><span class="token punctuation">></span></span>          <span class="token punctuation">{</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ProfilePage</span> <span class="token attr-name">user</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>user<span class="token punctuation">}</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>UserContext.Consumer</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ThemeContext.Consumer</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你需要一起使用多个 context 值，你可能想要考虑创建自己的 render prop 组件提供它们。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>因为 context 使用引用来确认什么时候重新渲染，当 Provider 的父亲重新渲染时会触发一些意外的消费者渲染。举例，下面代码在每次 Provider 重新渲染都会触发所有消费者重新渲染，因为 value 一直创建的是一个新对象。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyContext.Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> something<span class="token punctuation">:</span> <span class="token string">"something"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toolbar</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyContext.Provider</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了解决这个问题，提升值为父组件的状态：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token punctuation">{</span> something<span class="token punctuation">:</span> <span class="token string">"something"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Provider</span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>value<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Toolbar</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Provider</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="旧版-API"><a href="#旧版-API" class="headerlink" title="旧版 API"></a>旧版 API</h4><blockquote><p>注意：<br>React 之前准备了一个实验性 context API。这个旧 API 将支持所有 16.x 版本，但是应用使用它应该迁移到新版本。这个旧版本 API 将在未来主要 React 版本中删除。React 的<a href="https://reactjs.org/docs/legacy-context.html" target="_blank" rel="noopener">旧 context 文档在这</a></p></blockquote><h3 id="Error-Boundaries"><a href="#Error-Boundaries" class="headerlink" title="Error Boundaries"></a>Error Boundaries</h3><blockquote><p>在过去, 在组件内部的 JavaScript 通常会破坏 React 内部状态并在下一个渲染造成隐秘的错误。这些错误通常由早期的应用代码造成的，但是 React 没有提供在组件中逐渐的处理它们，并且无法从这种状态下恢复。</p></blockquote><h4 id="介绍错误边界"><a href="#介绍错误边界" class="headerlink" title="介绍错误边界"></a>介绍错误边界</h4><p>UI 的部分 JavaScript 错误不应该破坏整个应用。为 React 用户解决这个问题，React16 介绍了一个新的概念“错误边界”。</p><p>错误边界是 React 组件，可以<strong>捕获任何在它子组件树下发生的 JavaScript 错误，打印它们的日志，并显示一个备份 UI</strong>替换崩溃的组件树。错误边界捕获在渲染期间，生命周期方法，以及整个树结构中的构造函数等的错误。</p><blockquote><p>注意<br>错误边界不捕获这些错误</p></blockquote><ul><li>事件处理器(<a href="https://reactjs.org/docs/error-boundaries.html#how-about-event-handlers" target="_blank" rel="noopener">学习更多</a>)</li><li>异步代码(比如 setTimeout 或者 requestAnimationFrame 回调)</li><li>服务端渲染</li><li>错误边界自己抛出的错误（而不是它的子组件）</li></ul><p>如果在 class 组件中定义了<a href="https://reactjs.org/docs/react-component.html#static-getderivedstatefromerror" target="_blank" rel="noopener">static getDerivedStateFromError()</a>或者<a href="https://reactjs.org/docs/react-component.html#componentdidcatch" target="_blank" rel="noopener">componentDidCatch()</a>生命周期函数，这个组件就会变成错误边界。使用 static getDerivedStateFromError()在一次抛出之后渲染备份 UI。使用 componentDidCatch()来打印错误信息。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">ErrorBoundary</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> hasError<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 更新状态所以下一个渲染将会渲染备份UI</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> hasError<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidCatch</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 你可以将打印错误上报到服务器</span>    <span class="token function">logErrorToMyService</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> errorInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>hasError<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 你可以渲染备份UI</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Something went wrong<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后你可以将它作为一个常规的组件使用：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ErrorBoundary</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyWidget</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ErrorBoundary</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>错误边界像 JavaScript 的 catch{}块，但是用于组件。只有 class 组件可以作为错误边界。实践中，大多数情况你只想声明一次错误边界来捕获整个应用。</p><p>注意<strong>错误边界只捕获这个组件树节点之下抛出的异常</strong>。错误边界无法捕获自身的错误。如果错误边界在渲染错误消息的时候失败，这个错误会向上传播到最近的错误边界。这根在 JavaScript 的 catch 块工作一样。</p><h4 id="Live-Demo"><a href="#Live-Demo" class="headerlink" title="Live Demo"></a>Live Demo</h4><p>检查<a href="https://reactjs.org/blog/2017/09/26/react-v16.0.html" target="_blank" rel="noopener">React 16</a>下<a href="https://codepen.io/gaearon/pen/wqvxGa?editors=0010" target="_blank" rel="noopener">声明和使用错误边界的案例</a></p><h4 id="哪里放置错误边界"><a href="#哪里放置错误边界" class="headerlink" title="哪里放置错误边界"></a>哪里放置错误边界</h4><p>错误边界的粒度取决与你。你可以路由组件的顶层包装去给用户显示“遇到一些错误”，就像服务端框架经常遇到的崩溃。你可以将单个组件包装到错误边界内，不让它们崩溃应用程序的其余部分。</p><h4 id="未捕获错误的新行为"><a href="#未捕获错误的新行为" class="headerlink" title="未捕获错误的新行为"></a>未捕获错误的新行为</h4><p>这个改动有一个重要的影响。<strong>从 React16 开始，未被错误边界捕获的错误将造成整个 React 应用树卸载</strong></p><p>我们对这个决定做了辩论，但是根据我们的经验，将损坏的 UI 留着比完整删除它更糟糕。举例，在 Messenger 这样的产品保留损坏的 UI 显示会导致某人发送消息给错误的人。同样，对于付费应用来说显示错误的金额要比什么都不显示更糟糕。</p><p>这个改动意味着你迁移到 React16 之后，你将发现你应用中未覆盖之前已经存在的错误。添加错误边界让你当错误发生时为用户提供更加友好的体验。</p><p>例如，FaceBook Messenger 将侧边内容，信息面板，对华人之和消息输入包装到单独的错误边界中。如果这些 UI 组件之中发生崩溃，剩余的部分仍然保持交互。</p><p>我们还鼓励你使用 JS 错误上报服务，让你可以了解更多在生产中未处理的异常，然后修掉它们。</p><h4 id="组件堆栈跟踪"><a href="#组件堆栈跟踪" class="headerlink" title="组件堆栈跟踪"></a>组件堆栈跟踪</h4><p>React 16 在开发环境下像控制台打印在渲染期间遇到的所有错误，即使应用意外的吞噬了它们。除了错误消息和 JavaScript 堆栈，它也提供组件堆栈的跟踪。现在你可以发现发生错误在组件树中确切的位置。<br><img src="https://reactjs.org/static/f1276837b03821b43358d44c14072945/c3a47/error-boundaries-stack-trace.png" alt=""><br>你也可以看到在组件堆栈中文件名和确切的行号。默认情况下，在<a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">Create React App</a>项目中有效。<br><img src="https://reactjs.org/static/45611d4fdbd152829b28ae2348d6dcba/6dd26/error-boundaries-stack-trace-line-numbers.png" alt=""><br>如果你没有使用 Create React App，你可以手动在你的 Babel 配置中添加<a href="https://www.npmjs.com/package/babel-plugin-transform-react-jsx-source" target="_blank" rel="noopener">这个插件</a>。注意它仅用于开发，必须在生产中禁止。</p><blockquote><p>注意<br>堆栈中的组件命名显示依赖于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name" target="_blank" rel="noopener">Function.name</a>属性。如果你支持还没有提供此特性的旧浏览器和设备(比如，IE11), 考虑在应用包中包含 Function.name 的 polyfill，像<a href="https://github.com/JamesMGreene/Function.name" target="_blank" rel="noopener">function.name-polyfill</a>。或者，你可以显示的在你所有组件上设置<a href="https://reactjs.org/docs/react-component.html#displayname" target="_blank" rel="noopener">displayName</a>。</p></blockquote><h4 id="使用-try-catch-如何？"><a href="#使用-try-catch-如何？" class="headerlink" title="使用 try/catch 如何？"></a>使用 try/catch 如何？</h4><p>try/catch 很好，但是只针对命令式代码生效：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token function">showButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，React 组件是声明式的，指定应该显示什么：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误边界保留了 React 的声明特性，表现如您所愿。举例，即使由树深处某个地方 setState 引起了 componentDidUpdate 方法发生错误，它仍将正确的传播到最近的错误边界。</p><h4 id="在事件处理器中如何表现？"><a href="#在事件处理器中如何表现？" class="headerlink" title="在事件处理器中如何表现？"></a>在事件处理器中如何表现？</h4><p>错误边界不会去捕获在事件处理器中的异常。</p><p>React 不需要错误边界去覆盖在事件处理器中的异常。不像渲染方法和生命周期，这个事件处理器不会发生在渲染期间。所以如果它们抛出，React 仍然知道屏幕上渲染什么。</p><p>如果你需要在事件处理器中捕获错误，使用常规的 JavaScript try/catch 语句：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span> error<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Do something that could throw</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> error <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Caught an error<span class="token punctuation">.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意上面的案例演示了常规 JavaScript 的行为，没有使用错误边界。</p><h4 id="从-React-15-开始命名更改"><a href="#从-React-15-开始命名更改" class="headerlink" title="从 React 15 开始命名更改"></a>从 React 15 开始命名更改</h4><p>React 15 用一个不同的名字 unstable_handleError 下对错误边界很有限。这个方法从 16 beta 版本开始就不在工作，你需要把它放到 componentDidCatch 中。</p><p>对于这个更改，我们提供了<a href="https://github.com/reactjs/react-codemod#error-boundaries" target="_blank" rel="noopener">codemod</a>来自动迁移你的代码。</p><h3 id="Forwarding-Refs"><a href="#Forwarding-Refs" class="headerlink" title="Forwarding Refs"></a>Forwarding Refs</h3><p>Ref 转发是自动通过组件传递 ref 给它的子组件的一个技巧。它在应用中大多数组件是不需要使用的。但是，对于某些组件是需要的，尤其是重复使用的组件库。常见的场景描述如下。</p><h4 id="转发-ref-给-DOM-组件"><a href="#转发-ref-给-DOM-组件" class="headerlink" title="转发 ref 给 DOM 组件"></a>转发 ref 给 DOM 组件</h4><p>来看<code>FancyButton</code>组件，它渲染原生<code>button</code>DOM 元素：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FancyButton</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FancyButton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>React 组件隐藏它们的实现，包括它们自己的渲染结果。其他组件使用<code>FancyButton</code>通常不需要获取 ref 来引用内部的<code>button</code>DOM 元素。这很好，因为它会阻止组件过度依赖它们的 DOM 结构。<br>尽管<code>FeedStory</code>或<code>Comment</code>这种封装对于应用级组件比较理想，但像<code>FancyButton</code>或<code>MyTextInput</code>这类高度复用的<code>叶子</code>组件不方便。这些组件倾向于在应用中像<code>button</code>和<code>input</code>这类常规 DOM 一样使用，访问这些 DOM 节点可能无法避免去管理焦点，选中或者动画。<br><strong>Ref 转发是一个可选特性，让组件可以获取 ref，并向下传递给子组件</strong><br>在下面的例子中，<code>FancyButton</code>使用<code>React.forwardRef</code>去获取<code>ref</code>传递它，然后将它传递给渲染的 DOM <code>button</code>。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> FancyButton <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FancyButton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 你现在可以直接从DOM button上获取ref</span><span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyButton</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyButton</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，组件使用<code>FancyButton</code>可以获取底层<code>button</code>DOM 节点，如果需要可以访问它-就像你直接使用 DOM 节点一样。<br>这里一步一步解释了上面的例子发生了什么：</p><ul><li>我们通过调用<code>React.createRef</code>创建了<a href="https://reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">React ref</a>，并给它赋值了变量</li><li>我们通过在 JSX 属性中指定它，向下传递 ref 到了<code>&lt;FancyButton ref={ref}&gt;</code></li><li>React 传递<code>ref</code>给<code>forwardRef</code>内的<code>(props,ref)=&gt;...</code>函数，将它作为第二个参数</li><li>我们通过指定 JSX 属性将这个<code>ref</code>参数传递给<code>&lt;button ref={ref}&gt;</code></li><li>当 ref 被附加, <code>ref.current</code>将指向<code>&lt;button&gt;</code>DOM 节点。<blockquote><p>注意<br>第二个参数<code>ref</code>只有在当你用<code>React.frowardRef</code>定义组件时才存在。常规的函数和类组件不会接受<code>ref</code>参数，并且 ref 也不会存在到 Props 中。<br>Ref 转发不仅限于 DOM 组件。你也可以转发给 Class 实例。</p></blockquote></li></ul><hr><h4 id="组件库维护者注意"><a href="#组件库维护者注意" class="headerlink" title="组件库维护者注意"></a>组件库维护者注意</h4><p><strong>当你在组件库中使用 ref 转发时，建议将它作为一个大版本修改</strong>。这是因为你的库可能会观察到不同的行为（取决于你 ref 赋值给谁，它是什么类型），它会导致应用崩溃因为其他库都依赖旧的行为。<br>尽管<code>React.forwardRef</code>存在是允许有条件的使用，但也不推荐：它会改变你库的行为并且会造成他们升级 React 时，用户的应用被破坏。</p><hr><h4 id="在高级组件中转发-ref"><a href="#在高级组件中转发-ref" class="headerlink" title="在高级组件中转发 ref"></a>在高级组件中转发 ref</h4><p>这个技巧对高级组件尤其有用（也叫做 HOC）。开始了解 logs 高阶组件，用于打印日志</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">logProps</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">LogProps</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"old props:"</span><span class="token punctuation">,</span> prevProps<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"new props:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> LogProps<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“logProps”高级组件将所有<code>props</code>传递给包裹的组件，所以渲染结果将会一致。比如，我们使用这个高阶组件去记录所有传递给<code>fancy button</code>组件的属性</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">FancyButton</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 我们导出的是LogProps，而不是FancyButton</span><span class="token comment" spellcheck="true">// 虽然它渲染的是FancyButton</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">logProps</span><span class="token punctuation">(</span>FancyButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子有一个注意点：refs 将不会被传递。因为<code>ref</code>不是属性。就像<code>key</code>，它被 React 特殊处理。<br>如果你添加 ref 到高阶组件，这个 ref 指向的是最外面的容器组件，而不是里面的包装组件。<br>这意味着本来想指向<code>FancyButton</code>组件却实际上挂到了<code>LogProps</code>组件上</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> FancyButton <span class="token keyword">from</span> <span class="token string">"./FancyButton"</span><span class="token punctuation">;</span><span class="token keyword">const</span> ref <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 我们导入的FancyButton其实是LogProps高阶组件</span><span class="token comment" spellcheck="true">// 它渲染的结果是一样的</span><span class="token comment" spellcheck="true">// 我们的ref指向LogProps而不是内部的FancyButton</span><span class="token comment" spellcheck="true">// 这意味着我们无法调用这类方法ref.current.focus()</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyButton</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Click</span> <span class="token attr-name">Me"</span> <span class="token attr-name">handleClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>幸运的是，我们可以通过<code>React.forwardRef</code>API 显示转发 ref 到内部的<code>FancyButton</code>组件上。<code>React.forwardRef</code>接受一个接收<code>props</code>和<code>ref</code>参数的渲染函数，并且返回 React 节点。例如：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">logProps</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">LogProps</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"old props:"</span><span class="token punctuation">,</span> prevProps<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"new props:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> forwardedRef<span class="token punctuation">,</span> <span class="token operator">...</span>rest <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Assign the custom prop "forwardedRef" as a ref</span>      <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Component</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>forwardedRef<span class="token punctuation">}</span></span> <span class="token attr-name">{...rest}</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 注意第二个参数ref由React.forwardRef提供</span>  <span class="token comment" spellcheck="true">// 我们将ref作为正常属性传递给LogProps, e.g. "forwardedRef"</span>  <span class="token comment" spellcheck="true">// 然后它可以被附加到组件上</span>  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>LogProps <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> forwardedRef<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在开发者工具中显示自定义名字"><a href="#在开发者工具中显示自定义名字" class="headerlink" title="在开发者工具中显示自定义名字"></a>在开发者工具中显示自定义名字</h4><p><code>React.forwardRef</code>接收一个渲染函数。 React 开发者工具用这个函数决定为转发组件显示的内容。<br>比如，下面的组件在开发者恐惧中将会显示”ForwardRef”</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> WrappedComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>LogProps <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> forwardedRef<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你命名了这个渲染函数，开发者工具将显示将包括这个名字（比如：”ForwardRef(myFunction)“）</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> WrappedComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>LogProps <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> forwardedRef<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你可以设置函数的<code>displayName</code>属性包含这个组件的显示</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">logProps</span><span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">class</span> <span class="token class-name">LogProps</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>LogProps <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> forwardedRef<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 在开发者工具显示这个组件的名字非常有帮助</span>  <span class="token comment" spellcheck="true">// e.g. "ForwardRef(logProps(MyComponent))"</span>  <span class="token keyword">const</span> name <span class="token operator">=</span> Component<span class="token punctuation">.</span>displayName <span class="token operator">||</span> Component<span class="token punctuation">.</span>name<span class="token punctuation">;</span>  forwardRef<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token template-string"><span class="token string">`logProps(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span>forwardRef<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Fragments"><a href="#Fragments" class="headerlink" title="Fragments"></a>Fragments</h3><p>React 常见模式是一个组件返回多个元素。Fragments 让你给子元素分组，需要向 DOM 上添加额外节点。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.Fragment</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildA</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildB</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildC</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.Fragment</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有声明它的简短语法。</p><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>组件返回多个子元素是很常见的模式。看下面的 React 片段：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Table</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Columns</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><Columns />应该需要返回多个<td>元素为了保证 HTML 渲染有效。如果父 div 被放到<Columns />的 render()函数中，HTML 的渲染结果将是无效的。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Columns</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><Table />的输出结果将是：<pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Fragments 可以解决这个问题。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Columns</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.Fragment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.Fragment</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的结果是一个正确的<Table />输出。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="简短语法"><a href="#简短语法" class="headerlink" title="简短语法"></a>简短语法</h5><p>这里有一个声明 fragments 的简单语法。它看起来像空的标签：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Columns</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span><span class="token operator">></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以使用&lt;&gt;&lt;/&gt;跟其他元素一样，除了不支持 keys 和属性</p><h5 id="带-key-的-Fragments"><a href="#带-key-的-Fragments" class="headerlink" title="带 key 的 Fragments"></a>带 key 的 Fragments</h5><p>显示的使用&lt;React.Fragment&gt;语法声明 Fragments 可以带 key。这个的一个使用场景是将数组映射成 fragments 数组–列如，创建一个描述列表：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Glossary</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>props<span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">// 没有Key,React会触发key的警告</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.Fragment</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>term<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>description<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.Fragment</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>key 是为唯一可以传递给 Fragment 的属性。未来，我们可以添加额外的属性，比如事件监听函数。</p><h3 id="Higher-Order-Components"><a href="#Higher-Order-Components" class="headerlink" title="Higher-Order Components"></a>Higher-Order Components</h3><h3 id="集成其他库"><a href="#集成其他库" class="headerlink" title="集成其他库"></a>集成其他库</h3><h3 id="JSX-in-Depth"><a href="#JSX-in-Depth" class="headerlink" title="JSX in Depth"></a>JSX in Depth</h3><p>从根本上上来说，JSX 只是提供了 React.createElement(component, props, …children)函数的语法糖。JSX 代码这样：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyButton</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span> <span class="token attr-name">shadowSize</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>  Click Me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>MyButton</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编译结果:</p><pre class="line-numbers language-jsx"><code class="language-jsx">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>MyButton<span class="token punctuation">,</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> shadowSize<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Click Me"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果它没有子元素可以使用自我闭合的标签形式，所以：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sidebar<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译结果：</p><pre class="line-numbers language-jsx"><code class="language-jsx">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> className<span class="token punctuation">:</span> <span class="token string">"sidebar"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果你想要测试某些具体的 jsx 语法编译成的 js 代码，你可以尝试使用<a href="https://babeljs.io/repl/#?presets=react&code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA" target="_blank" rel="noopener">在线的 Babel 编译器</a></p><h4 id="指定-React-元素类型"><a href="#指定-React-元素类型" class="headerlink" title="指定 React 元素类型"></a>指定 React 元素类型</h4><p>JSX 标签第一部分决定了 React 元素的类型。</p><p>大写字母开头的类型表示这个 JSX 标签是一个 React 组件。这些标签会被编译成对这个命名的变量的直接饮用，所以如果你使用 <Foo /> 表达式，Foo 一定能够要在作用域内。</p><h4 id="React-必须在作用域内"><a href="#React-必须在作用域内" class="headerlink" title="React 必须在作用域内"></a>React 必须在作用域内</h4><p>因为 JSX 编译成 React.createElement 的调用，React 库必须要包含在 JSX 代码的作用域内。</p><p>例如，虽然 React 和 CustomButton 没有被 js 直接引用，但是它们还是需要被导入：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> CustomButton <span class="token keyword">from</span> <span class="token string">"./CustomButton"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">WarningButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// return React.createElement(CustomButton, {color: 'red'}, null);</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomButton</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你不使用 JS 打包器而是用 <code>&lt;script&gt;</code> 标签挂载 React，它也会被在作用域挂载成 React 全局变量。</p><h4 id="JSX-类型使用-符号语法"><a href="#JSX-类型使用-符号语法" class="headerlink" title="JSX 类型使用.符号语法"></a>JSX 类型使用.符号语法</h4><p>你也可以在 JSX 中使用.符号形式来引用一个 React 组件。</p><h4 id="用户定义的组件必须是大写开头"><a href="#用户定义的组件必须是大写开头" class="headerlink" title="用户定义的组件必须是大写开头"></a>用户定义的组件必须是大写开头</h4><p>…</p><h4 id="在运行时选择类型"><a href="#在运行时选择类型" class="headerlink" title="在运行时选择类型"></a>在运行时选择类型</h4><p>…</p><hr><h4 id="JSX-中的属性"><a href="#JSX-中的属性" class="headerlink" title="JSX 中的属性"></a>JSX 中的属性</h4><h4 id="JS-表达式作为属性"><a href="#JS-表达式作为属性" class="headerlink" title="JS 表达式作为属性"></a>JS 表达式作为属性</h4><h4 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a>字符串字面量</h4><h4 id="属性默认是-True"><a href="#属性默认是-True" class="headerlink" title="属性默认是 True"></a>属性默认是 True</h4><h4 id="展开属性"><a href="#展开属性" class="headerlink" title="展开属性"></a>展开属性</h4><hr><h4 id="JSX-的子元素"><a href="#JSX-的子元素" class="headerlink" title="JSX 的子元素"></a>JSX 的子元素</h4><h4 id="字符串字面量-1"><a href="#字符串字面量-1" class="headerlink" title="字符串字面量"></a>字符串字面量</h4><h4 id="JSX-子元素"><a href="#JSX-子元素" class="headerlink" title="JSX 子元素"></a>JSX 子元素</h4><h4 id="JS-表达式作为子元素"><a href="#JS-表达式作为子元素" class="headerlink" title="JS 表达式作为子元素"></a>JS 表达式作为子元素</h4><h4 id="函数作为子元素"><a href="#函数作为子元素" class="headerlink" title="函数作为子元素"></a>函数作为子元素</h4><h4 id="Booleans-Null-and-Undefined-会被忽略"><a href="#Booleans-Null-and-Undefined-会被忽略" class="headerlink" title="Booleans, Null, and Undefined 会被忽略"></a>Booleans, Null, and Undefined 会被忽略</h4><h3 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h3><h3 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h3><h3 id="Profiler"><a href="#Profiler" class="headerlink" title="Profiler"></a>Profiler</h3><h3 id="没有-ES6-的-React"><a href="#没有-ES6-的-React" class="headerlink" title="没有 ES6 的 React"></a>没有 ES6 的 React</h3><h3 id="没有-JSX-的-React"><a href="#没有-JSX-的-React" class="headerlink" title="没有 JSX 的 React"></a>没有 JSX 的 React</h3><h3 id="Reconciliation"><a href="#Reconciliation" class="headerlink" title="Reconciliation"></a>Reconciliation</h3><h3 id="Refs-和-DOM"><a href="#Refs-和-DOM" class="headerlink" title="Refs 和 DOM"></a>Refs 和 DOM</h3><p><strong>Refs 提供了在渲染函数中访问 DOM 节点和 React 创建的元素的方法</strong><br>在典型 React 数据流中，<code>props</code>是父组件和子组件交互的唯一方法。为了修改子组件，你需要用新的属性重新渲染它。然而，某些情况下，在典型数据流之外修改子组件是势在必行的。这个被修改的子组件应该是 React 元素的实例，也可能是 DOM 元素。针对这两种情况，React 提供了应急方案。</p><h4 id="什么时候使用-Refs"><a href="#什么时候使用-Refs" class="headerlink" title="什么时候使用 Refs"></a>什么时候使用 Refs</h4><p>下面有一些 Refs 的好的使用案例：</p><ul><li>管理焦点，文本选中，或者媒体播放</li><li>强制触发动画</li><li>集成第三方的 DOM 库<br>避免对那些可以用声明完成的东西上使用 refs<br>比如，在 Dialog 组件上传递 isOpen 属性来代替调用 open()和 close()</li></ul><h4 id="不要过度使用-Refs"><a href="#不要过度使用-Refs" class="headerlink" title="不要过度使用 Refs"></a>不要过度使用 Refs</h4><p>你可能第一个想法使用 ref 来在 app 中实现。如果是这种情况，请花费一点时间思考它的状态应该属于组件树的哪一个层级。通常，将状态放到更高的层级上比较恰当。参考这个案例的<a href="https://reactjs.org/docs/lifting-state-up.html" target="_blank" rel="noopener">状态提升</a>的指南。</p><blockquote><p>注意：<br>下面案例更新使用了 React 16.3 介绍的<code>React.createRef()</code>API。如果你使用了早期的 React,我们建议使用<a href="https://reactjs.org/docs/refs-and-the-dom.html#callback-refs" target="_blank" rel="noopener">callback refs</a></p></blockquote><h4 id="创建-Refs"><a href="#创建-Refs" class="headerlink" title="创建 Refs"></a>创建 Refs</h4><p>使用<code>React.crateRef()</code>来创建 Refs，然后通过<code>ref</code>属性附加到 React 元素上。Refs 通常当组件被构建的时候将实例赋值给它，然后它们就在这种组件中被引用到。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>myRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="访问-Refs"><a href="#访问-Refs" class="headerlink" title="访问 Refs"></a>访问 Refs</h4><p>当 render 中 ref 被传递给这个元素，这个节点的引用可以通过 ref 的 current 属性访问到。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>myRef<span class="token punctuation">.</span>current<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ref 根据 node 的类型不同值也不同：</p><ul><li>当 ref 属性被用到 HTML 元素上，用<code>React.createRef</code>构建的 ref 接收底层 DOM 元素作为 current 属性。</li><li>当 ref 属性被使用到自定义类组件上，这个 ref 对象接收已挂载的组件实例作为 current 属性</li><li><strong>你可能无法使用 ref 属性对函数组件</strong>因为它们没有实例</li></ul><p>下面的例子展示了差异</p><p><strong>添加 Ref 给 DOM 元素</strong><br>这个代码使用 ref 存储了一个 DOM 节点的引用</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建ref来存储textInput DOM元素</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 明确使用input元素DOM API来获取文本输入焦点</span>    <span class="token comment" spellcheck="true">// Note: 我们访问current获取DOM节点</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 告诉React我们想要关联input的ref</span>    <span class="token comment" spellcheck="true">// 我们在构造函数中创建`textInput`</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Focus</span> <span class="token attr-name">the</span> <span class="token attr-name">text</span> <span class="token attr-name">input"</span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React 等到组件挂载后将 DOM 元素赋值到 ref 的 current 属性上，并且当组件卸载时会回退赋值 null。更新 ref 的时机发生在 componentDidMount 和 componentDidUpdate 生命周期之前。</p><p><strong>添加 ref 到类组件</strong><br>如果我们想要包装上面的 CustomTextInput，来模拟挂载之后立刻点击。我们可以使用 ref 获取自定义的 input 引用，然后手动调用它 focusTextInput 方法</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">AutoFocusTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomTextInput</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意只有 CustomTextInput 被声明为 class 才生效</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Refs 和函数组件</strong><br>默认情况下，你可能无法在函数组件上使用 ref，因为它没有实例</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyFunctionComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//无法正常工作</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyFunctionComponent</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想要别人从你的函数组件上获取 ref，你可以使用<a href="https://reactjs.org/docs/forwarding-refs.html" target="_blank" rel="noopener">forwardRef</a>(可以和<a href="https://reactjs.org/docs/hooks-reference.html#useimperativehandle" target="_blank" rel="noopener">useImperativeHandle</a>联合使用)，获取你可以将它转成类</p><p>你可以做到，然而在函数组件内部使用 ref 属性一样是指向 DOM 元素和 class 组件</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">CustomTextInput</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// textInput 一定要在这里定义，所以ref可以指向它</span>  <span class="token keyword">const</span> textInput <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Focus</span> <span class="token attr-name">the</span> <span class="token attr-name">text</span> <span class="token attr-name">input"</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="暴露-DOM-Refs-给父组件"><a href="#暴露-DOM-Refs-给父组件" class="headerlink" title="暴露 DOM Refs 给父组件"></a>暴露 DOM Refs 给父组件</h4><p>在极少数情况下，你可能想要访问从父组件中访问子 DOM 节点。通常不建议这么做，因为会破坏组件的封装，但是偶尔在子节点的触发获取焦点、测量大小或者位置非常有用。</p><p>你可以将 ref 添加到子组件上，它不是一个理想的方案。你可能只拿到 React 组件实例而不是 DOM 节点。另外，它在函数组价上不能正常工作。</p><p>如果你在 React16.3 及更高的版本，我们推荐使用<a href="https://reactjs.org/docs/forwarding-refs.html" target="_blank" rel="noopener">ref 转发</a><br>.<strong>ref 转发让组件可选暴露子组件的 ref 作为自己的 ref</strong>。你可以从<a href="https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components" target="_blank" rel="noopener">在 ref 转发文档中</a>找到如何让子组件暴露给父组件的详细案例</p><p>如果你使用 React 16.2 及更低，或者你需要比提供 ref 转发更加灵活的能力，你可以使用<a href="https://gist.github.com/gaearon/1a018a023347fe1c2476073330cc5509" target="_blank" rel="noopener">这个替代方案</a>，传递 ref 作为特殊名字属性来向下传递 ref。</p><p>可能的话，我们不建议暴露 DOM 节点，但是在应急的时候非常有用。注意这个方案需要你添加一些代码到子组件中。如果你对子组件的实现没有绝对的控制力，最后的选择是使用<a href="https://reactjs.org/docs/react-dom.html#finddomnode" target="_blank" rel="noopener">findDOMNode</a>，但是在严格模式下废弃且不推荐使用。</p><h4 id="回调-Refs"><a href="#回调-Refs" class="headerlink" title="回调 Refs"></a>回调 Refs</h4><p>React 也支持”回调 refs”的方式来设置 refs，它让 refs 的设置和取消控制的粒度更细。</p><p>跟 createRef()创建的 ref 赋值给 ref 属性不一样，你需要传递给 ref 属性一个函数。这个函数接收 React 组件或者是 HTML 节点元素作为它的参数，可以将它存储下来在其他地方访问。</p><p>下面是通用案例：使用 ref 回调函数存储 DOM 节点引用到实例的属性上</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">CustomTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>setTextInputRef <span class="token operator">=</span> <span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> element<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 使用原生DOM API聚焦文本输入</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在挂载的时候自动聚焦</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 ref 回调保存文本输入节点的引用</span>    <span class="token comment" spellcheck="true">// 元素字段的实例(比如是 this.textInput).</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>setTextInputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Focus</span> <span class="token attr-name">the</span> <span class="token attr-name">text</span> <span class="token attr-name">input"</span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>focusTextInput<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>React 在组件挂载后将 DOM 元素传递给 ref 回调，然后当组件卸载时传递 null 给回调。在 componentDidMount 后者 componentDidUpdate 触发之前，Refs 会保证是最新的。</p><p>你可以在组件之间传递回调的 refs，跟用 React.createRef()方式创建的 Refs 对象一样</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">CustomTextInput</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CustomTextInput</span> <span class="token attr-name">inputRef</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>inputElement <span class="token operator">=</span> el<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，Parent 将 ref 的回调函数 作为 CustomTextInput 的 inputRef 属性，然后这个 CustomTextInput 将这个函数传给<input>的属性。结果是，Parent 的 this.inputElement 将会被设置成与 CustomTextInput 的<input>元素相对应的 DOM 节点。</p><h4 id="过时的-API：String-Refs"><a href="#过时的-API：String-Refs" class="headerlink" title="过时的 API：String Refs"></a>过时的 API：String Refs</h4><p>如果你之前使用过 React，你可能熟悉之前的 API，ref 的属性是 string。比如“textInput”，通过 this.refs.textInput 访问 DOM 节点。我们不建议使用 string 的 refs，它由<a href="https://github.com/facebook/react/pull/8333#issuecomment-271648615" target="_blank" rel="noopener">许多问题</a>，它已经过时，将在未来某个版本移除掉。</p><blockquote><p>注意<br>如果你当时使用了 this.refs.txtInput 来访问 refs,我们建议使用另外的<a href="https://reactjs.org/docs/refs-and-the-dom.html#callback-refs" target="_blank" rel="noopener">回调方法</a>或者 <a href="https://reactjs.org/docs/refs-and-the-dom.html#creating-refs" target="_blank" rel="noopener">createRef API</a> 替换。</p></blockquote><h4 id="注意-refs-的回调"><a href="#注意-refs-的回调" class="headerlink" title="注意 refs 的回调"></a>注意 refs 的回调</h4><p>如果 ref 的回调函数被定义成内联函数，它将会在更新期间被调用 2 次，首先是 null 然后是 DOM 元素。因为每次渲染会创建一个函数实例，所以 React 需要清除旧的 ref 并且设置一个新的。你可以将 ref 回调函数定义成绑定到 class 的函数来避免这个问题，但是注意大多数情况下不需要关心。</p><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><h3 id="静态类型检查"><a href="#静态类型检查" class="headerlink" title="静态类型检查"></a>静态类型检查</h3><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>严格模式是为了突出应用中潜在的问题。像 Fragment 一样，严格模式不会渲染任何 UI。它会对后代元素进行额外的检查和警告。</p><blockquote><p>注意：<br>严格模式检查只运行在开发模式下；它不会影响到生产环境构建<br>你可以在你的应用任何地方开启严格模式。比如</p></blockquote><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ExampleApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.StrictMode</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentOne</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ComponentTwo</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.StrictMode</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Footer</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，严格模式检查不会影响到<code>Header</code>和<code>Footer</code>组件。但是，<code>ComponentOne</code>和<code>ComponentTwo</code>，作为它的后代将会被检查。<br>严格模式有下面这些用处：<br><a href="https://reactjs.org/docs/strict-mode.html#identifying-unsafe-lifecycles" target="_blank" rel="noopener">识别不安全生命周期的组件</a><br><a href="https://reactjs.org/docs/strict-mode.html#warning-about-legacy-string-ref-api-usage" target="_blank" rel="noopener">警告过使用时的字符串 refAPI</a><br><a href="https://reactjs.org/docs/strict-mode.html#warning-about-deprecated-finddomnode-usage" target="_blank" rel="noopener">警告使用废弃的 findDOMNode</a><br><a href="https://reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects" target="_blank" rel="noopener">检测不安全的 side effects</a><br><a href="https://reactjs.org/docs/strict-mode.html#detecting-legacy-context-api" target="_blank" rel="noopener">检查过时的 Context API</a><br>React 未来会添加更多的功能来支持</p><h4 id="识别不安全生命周期"><a href="#识别不安全生命周期" class="headerlink" title="识别不安全生命周期"></a>识别不安全生命周期</h4><h4 id="警告过使用时的字符串-refAPI"><a href="#警告过使用时的字符串-refAPI" class="headerlink" title="警告过使用时的字符串 refAPI"></a>警告过使用时的字符串 refAPI</h4><h4 id="警告使用废弃的-findDOMNode"><a href="#警告使用废弃的-findDOMNode" class="headerlink" title="警告使用废弃的 findDOMNode"></a>警告使用废弃的 findDOMNode</h4><p>React 支持使用 findDOMNode 给定类的实例去 DOM 树种找。正常情况下你不需要，因为你可以<a href="https://reactjs.org/docs/refs-and-the-dom.html#creating-refs" target="_blank" rel="noopener">直接向 DOM 节点附加 ref</a><br><code>findDOMNode</code>仍然可以在类组件中使用，但是它会破坏抽象，因为允许父组件能单独访问指定的已经渲染的子组件。它会造成重构困难，你不能改变组件的实现因为父组件可以访问到 DOM 节点。<code>findDOMNode</code>当 Fragment 包含多个子元素时，会只返回第一个非空节点。<code>findDOMNode</code>是一次阅读 API。当你访问时，它才会给你结果。如果子组件渲染了不同的节点，它无法识别这个变更。因此<code>findDOMNode</code>仅对单个不可变的组件上有效。<br>另外你可以显式的将 ref 传递给你自定义的组件，并使用<a href="https://reactjs.org/docs/forwarding-refs.html#forwarding-refs-to-dom-components" target="_blank" rel="noopener">ref 转发</a>传递给 DOM 节点上<br>你还可以给你的组件中包一个 DOM 节点，并直接附加上 ref</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">MyComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>wrapper <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>wrapper<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意<br>在 CSS 中，如果你不想要某个节点不作为布局的一部分，可以使用<code>display:Contents</code>属性。（这个应该也是提出了跳过 findDOMNode 的一个方案吧）</p></blockquote><h4 id="检测不安全的-side-effects"><a href="#检测不安全的-side-effects" class="headerlink" title="检测不安全的 side effects"></a>检测不安全的 side effects</h4><h4 id="检查过时的-Context-API"><a href="#检查过时的-Context-API" class="headerlink" title="检查过时的 Context API"></a>检查过时的 Context API</h4><h3 id="用-PropTypes-来类型检查"><a href="#用-PropTypes-来类型检查" class="headerlink" title="用 PropTypes 来类型检查"></a>用 PropTypes 来类型检查</h3><h3 id="不受控的组件"><a href="#不受控的组件" class="headerlink" title="不受控的组件"></a>不受控的组件</h3><h3 id="Web-组件"><a href="#Web-组件" class="headerlink" title="Web 组件"></a>Web 组件</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> react </tag>
            
            <tag> docs </tag>
            
            <tag> 进行中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>next.js docs</title>
      <link href="/blog/nextjs-docs/"/>
      <url>/blog/nextjs-docs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nextjs.org/docs/getting-started" target="_blank" rel="noopener">nextjs-docs</a></p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>如果你是新人，建议你学习该<a href="https://nextjs.org/learn/basics/getting-started" target="_blank" rel="noopener">课程</a><br>带有测试的交互课程会指导你完成使用 Next.js 所需要的知识<br>如果你有任何有关 Next.js 的问题，你可以去<a href="https://github.com/zeit/next.js/discussions" target="_blank" rel="noopener">社区</a>中提问<br><strong>系统要求</strong></p><ul><li>Node.js 10 以上</li><li>MacOS，windows(包括 WSL),以及 Linux</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>我们建议使用 create-next-app 来创建 Next.js 应用，它将自动为你设置一切。运行以下命令创建项目：</p><pre><code>npm init next-app# oryarn create next-app</code></pre><p>安装完成之后，跟着说明启动开发服务。尝试修改 pages/index.js 并在你浏览器上查看结果。</p><h3 id="手动设置"><a href="#手动设置" class="headerlink" title="手动设置"></a>手动设置</h3><p>在你的项目中安装 next,react 和 react-dom：</p><pre><code>npm install next react react-dom</code></pre><p>打开 package.json 并添加下面的 scripts</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"next"</span><span class="token punctuation">,</span>  <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"next build"</span><span class="token punctuation">,</span>  <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"next start"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面脚本指向开发应用的不同阶段：</p><ul><li>dev - 运行 next 在开发模式下启动 Next.js</li><li>build - 运行 next build 为生产模式构建应用</li><li>start - 运行 next start 启动 Next.js 生产服务</li></ul><p>Next.js 是围绕页面概念构建的。 页面是从在 pages 目录下的.js,.jsx,.ts 或者.tsx 文件中导出的 react 组件</p><p>页面是基于它们的文件名来关联路由的。例如 pages/about.js 被映射成 /about. 你甚至可以在文件名上添加动态路由参数。</p><p>在你的项目中创建 pages 目录</p><p>使用下面的内容填充到 ./pages/index.js</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">HomePage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Welcome to Next<span class="token punctuation">.</span>js<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> HomePage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行 npm run dev 来开始开发应用。它启动一个开发服务在 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p><p>通过 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 来查看你的应用</p><p>到此为止，我们获得：</p><ul><li>自动编译和打包 （通过 webpack 和 babel）</li><li>热加载</li><li>静态生成和服务端渲染 ./pages/</li><li>静态文件服务 ./public/ 映射成 /</li></ul><h2 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h2><h3 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h3><blockquote><p>这个文档基于 Next.js 9.3 及以上，如果你使用的是旧版，参考 <a href="https://nextjs.org/docs/tag/v9.2.2/basic-features/pages" target="_blank" rel="noopener">之前的文档</a></p></blockquote><p>在 Next.js 中，一个页面就是一个组件，它们从 pages 目录文件下的 .js, jsx, .ts 或者 .tsx 文件中导出。每个页面基于它们的文件名与路由关联。</p><p>例如：如果你创建 pages/about.js，并导出下面的 React 组件，它将可以通过 /about 访问。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> About<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Pages-使用动态路由"><a href="#Pages-使用动态路由" class="headerlink" title="Pages 使用动态路由"></a>Pages 使用动态路由</h4><p>Next.js 支持页面使用动态路由。比如，如果你创建文件名叫做 pages/posts/[id].js, 然后它就可以通过 posts/1, posts/2,等等。</p><blockquote><p>学学习更多动态路由知识，查看<a href="https://nextjs.org/docs/routing/dynamic-routes" target="_blank" rel="noopener">动态路由文档</a></p></blockquote><h4 id="预渲染"><a href="#预渲染" class="headerlink" title="预渲染"></a>预渲染</h4><p>默认，Next.js 对每个页面预渲染。这意味着 Next.js 会提前为每个页面生成 HTML，而不是由客户端 JavaScript 来生成。预渲染会带来更好的性能和 SEO。</p><p>每个生成的 HTML 只关联那个页面需要的最少 js 代码。当页面被浏览器加载完毕，它的 js 代码运行会使得页面完全可交互。（这个过程被叫做水合/hydration）</p><h5 id="两种预渲染的方式"><a href="#两种预渲染的方式" class="headerlink" title="两种预渲染的方式"></a>两种预渲染的方式</h5><p>Next.js 有两种预渲染方式：静态生成和服务端渲染。这区别在于为页面生成 HTML 的时机。</p><ul><li><strong>静态生成（建议）</strong>：HTML 在构建时被生成，并可以被每个请求复用。</li><li><strong>服务端渲染</strong>：HTML 在每次请求时都会生成</li></ul><p>重要的是，Next.js 让你可以选择你每个页面的预渲染方式。你可以针对大部分页面使用静态生成方式以及针对特殊请求使用服务端渲染来，创建一个“混合” Next.js 应用。</p><p>我们建议使用静态生成来代替服务端渲染来提高性能。静态生成的页面可以被 CDN 缓存来提高启动性能。然而，在某些情况下，服务端渲染可能是唯一的选择。</p><p>最后，你可以始终将客户端渲染和静态生成或者服务端渲染一起使用。这意味着页面的某些部分可以完全的由客户端代码渲染。为了进一步学习，可以查看<a href="https://nextjs.org/docs/basic-features/data-fetching#fetching-data-on-the-client-side" target="_blank" rel="noopener">数据获取</a>文档</p><h4 id="静态生成（建议）"><a href="#静态生成（建议）" class="headerlink" title="静态生成（建议）"></a>静态生成（建议）</h4><p>如果页面使用静态生成，页面的 HTML 将在构建时被生成。这意味着，在生产环境下，页面 HTML 在你运行 next build 时生成。这个 HTML 将会被每个请求复用，它也可以被 CDN 缓存。</p><p>在 Next.js 中，你可以带着数据或者不带数据生成页面，让我们来看看这两个情况。</p><h5 id="不带数据静态生成"><a href="#不带数据静态生成" class="headerlink" title="不带数据静态生成"></a>不带数据静态生成</h5><p>默认情况下，Next.js 不带数据静态生成预渲染页面。下面是案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> About<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这个页面不需要获取任何额外数据去预渲染。这个场景比如：Next.js 在构建时对每个 page 生成单个 HTML。</p><h5 id="带数据静态生成"><a href="#带数据静态生成" class="headerlink" title="带数据静态生成"></a>带数据静态生成</h5><p>有些页面在预渲染时获取额外数据。这里有两个情况，一种或者两种都适用。每种情况，那你可以适用 Next.js 提供的特殊功能:</p><ol><li>页面内容依赖外部数据：适用 getStaticProps</li><li>页面路径依赖外部数据：适用 getStaticPaths (通常也用到 getStaticProps)</li></ol><h6 id="场景-1：页面内容依赖额外数据"><a href="#场景-1：页面内容依赖额外数据" class="headerlink" title="场景 1：页面内容依赖额外数据"></a>场景 1：页面内容依赖额外数据</h6><p>例如：你博客页面可能需要从 CMS（内容管理系统）中获取博客列表。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// TODO: 需要在页面预渲染之前通过调用 api 获取 posts</span><span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span><span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Blog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了在预渲染时获取这个数据，Next.js 允许在这个文件下导出 getStaticProps 的异步函数。这个函数在构建时调用，然后在预渲染时将获取的数据传递给页面的 props。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// 你可以使用任何数据获取库</span><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span><span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 渲染 posts...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这个函数在构建时被调用</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用外部api获得posts</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://.../posts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回 { props: posts }, 这个 Blog component</span>  <span class="token comment" spellcheck="true">// 在构建时将接收 `posts` 作为属性</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      posts<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Blog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了学习 getStaticProps 如何工作，查看<a href="https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation" target="_blank" rel="noopener">数据获取文档</a></p><h6 id="场景-2：页面路径依赖额外数据"><a href="#场景-2：页面路径依赖额外数据" class="headerlink" title="场景 2：页面路径依赖额外数据"></a>场景 2：页面路径依赖额外数据</h6><p>Next.js 允许你通过动态路由来创建页面。比如，你可以创建 pages/posts/[id].js 来基于 id 来显示单个博客。当你访问 posts/1 是博客将获得 id:1 的参数来显示博客内容。</p><blockquote><p>为了进一步学习动态路由，查看<a href="https://nextjs.org/docs/routing/dynamic-routes" target="_blank" rel="noopener">动态路由文档</a></p></blockquote><p>然而，你可能需要额外的数据提供 id 来预渲染。<br>例如：假设你只在数据库中添加了 id:1 的文章。这种情况下，你值需要在构建时渲染 posts/1。</p><p>随后，你可能添加了 id:2 的文章，然后你想要同样的预渲染 posts/2。</p><p>所以你预渲染的页面路径需要依赖外部数据。为了处理它，Next.js 让你在动态页面( pages/posts/[id].js )中导出异步函数 getStaticPaths。这个函数在构建时调用，并让你可以指定那些路径你想要预渲染。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在构建时被调用</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用外部api获取文章列表</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://.../posts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取我们想要渲染的文章路径</span>  <span class="token keyword">const</span> paths <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>post<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 我们只在构建时预渲染这些路径</span>  <span class="token comment" spellcheck="true">// { fallback: false } 因为着其他路径将是404</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> paths<span class="token punctuation">,</span> fallback<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样在 pages/posts/[id].js 中，你需要导出 getStaticProps 来根据 id 获取数据预渲染页面。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">{</span> post <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Render post...</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This also gets called at build time</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// params contains the post `id`.</span>  <span class="token comment" spellcheck="true">// If the route is like /posts/1, then params.id is 1</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://.../posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Pass post data to the page via props</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Post<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="什么时候使用静态生成？"><a href="#什么时候使用静态生成？" class="headerlink" title="什么时候使用静态生成？"></a>什么时候使用静态生成？</h5><p>我们建议尽可能的使用静态生成，因为那你的页面只被构建一次且可以被 CDN 缓存，可以使得比每次请求都服务端渲染快很多。</p><p>许多页面类型都可以使用静态生成，包括：</p><ul><li>营销页面</li><li>博客文章</li><li>电子商务产品列表</li><li>帮助和文档</li></ul><p>你应该问你自己：“我们可以在用户请求之前预渲染页面吗？” 如果答案是 yes，然后你应该选择静态生成。</p><p>另一方面，如果在用户请求之前无法预渲染，静态生成则不是一个好建议。可能你的页面频繁根据数据刷新，页面内容在每次请求时改变。</p><p>这种情况，你可以渲染以下任何操作。</p><ul><li>使用带客户端渲染的静态生成：你可以跳过页面的某些部分预渲染，然后使用客户端渲染来填充它们。</li><li>使用服务端渲染：Next.js 在每次请求预渲染。它会很慢，因为页面无法被 CDN 缓存，但是预渲染页面是实时刷新的。</li></ul><h4 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h4><blockquote><p>也叫做 SSR 或者动态渲染</p></blockquote><p>如果页面使用服务端渲染，页面 HTML 每次请求时生成。</p><p>为了让页面使用服务端渲染，你需要导出 getServerSideProps 异步函数。这个函数将在每次请求时在服务端被调用。</p><p>例如，假设你的页面需要用最新的数据预渲染（通过外部的 api 获取数据）。你应该写下 getServerSideProps 来获取数据传递给 Page。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Render data...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This gets called on every request</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Fetch data from external API</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://.../data`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Pass data to the page via props</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Page<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如你所见，getServerSideProps 和 getStaticProps 很像，但是区别的是，getServerSideProps 是每个请求都会调用而不是在构建时。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我们讨论了 Next.js 中的两种预渲染方式。</p><ul><li><p>静态生成（推荐）：页面在构建时生成并每次请求都可以复用。为了让页面使用静态生成，导出纯页面组件，或者导出 getStaticProps（如果需要导出 getStaticPaths）。会在用户请求之前就预渲染好。你也可以使用客户端渲染额外的数据。</p></li><li><p>服务端渲染：每次请求都会生成 HTML。为了让页面使用服务端渲染，导出 getServerSideProps。因为服务端渲染的结果性能比静态生成差，只有当绝对必须的时候才用它。</p></li></ul><h3 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h3><p>在 Pages 文档中，我们解释了 Next.js 有两种预渲染方式：静态生成和服务端渲染。在这个页面，我们将深度讨论每种情况的数据获取策略。我们建议你首先读一下 Pages 文档。</p><p>我们将讨论 3 种你可以在预渲染时使用的 Next.js 函数：</p><ul><li>getStaticProps(静态生成)：在构建时获取数据</li><li>getStaticPaths(静态生成)：指定预渲染时的根据数据的动态路由</li><li>getServerSideProps(服务端渲染)：在每次请求时获取数据。</li></ul><p>另外，我们将简要讨论如何在客户端获取数据。</p><h4 id="getStaticProps-静态生成"><a href="#getStaticProps-静态生成" class="headerlink" title="getStaticProps(静态生成)"></a>getStaticProps(静态生成)</h4><p>如果你在页面中导出 getStaticProps 异步函数，Next.js 将在构建时使用 getStaticProps 返回的数据作为 Props 渲染页面。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// will be passed to the page component as props</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 Context 参数是一个包含下面属性的对象：</p><ul><li>params 包含了当页面使用动态路由的路由参数。例如，如果页面名是 [id].js ，然后 params 将是 {id:…}。会和 getStaticPaths 一起使用</li><li>preview 是 true 表示页面是在预览模式下。<a href="https://nextjs.org/docs/advanced-features/preview-mode" target="_blank" rel="noopener">预览模式文档</a></li><li>previewData 包含通过 setPreviewData 设置的预览数据。<a href="https://nextjs.org/docs/advanced-features/preview-mode" target="_blank" rel="noopener">预览模式文档</a></li></ul><h5 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h5><p>下面的案例使用 getStaticProps 从 CMS 中获取博客章节列表。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// You can use any data fetching library</span><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// posts will be populated at build time by getStaticProps()</span><span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span><span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This function gets called at build time on server-side.</span><span class="token comment" spellcheck="true">// It won't be called on client-side, so you can even do</span><span class="token comment" spellcheck="true">// direct database queries. See the "Technical details" section.</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Call an external API endpoint to get posts.</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://.../posts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// By returning { props: posts }, the Blog component</span>  <span class="token comment" spellcheck="true">// will receive `posts` as a prop at build time</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      posts<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Blog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="什么时机应该使用-getStaticProps"><a href="#什么时机应该使用-getStaticProps" class="headerlink" title="什么时机应该使用 getStaticProps?"></a>什么时机应该使用 getStaticProps?</h5><p>当遇到以下条件时应该使用 getStaticProps:</p><ul><li>在用户请求之前的构建阶段渲染有数据的页面是有效的</li><li>数据来自无头的 CMS</li><li>数据可以被公开缓存（不带用户信息）</li><li>页面需要预渲染（为 SEO）并且非常快 - getStaticProps 生成 HTML 和 JSON 文件，它们可以被 CDN 缓存来提高性能</li></ul><h5 id="TypeScript-使用-GetStaticProps"><a href="#TypeScript-使用-GetStaticProps" class="headerlink" title="TypeScript: 使用 GetStaticProps"></a>TypeScript: 使用 GetStaticProps</h5><p>对于 TypeScript,你可以从 next 中使用 GetStaticProps 类型：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> GetStaticProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getStaticProps<span class="token punctuation">:</span> GetStaticProps <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="读文件：使用-process-cwd"><a href="#读文件：使用-process-cwd" class="headerlink" title="读文件：使用 process.cwd()"></a>读文件：使用 process.cwd()</h5><p>在 getStaticProps 中可以从文件系统中被直接读取文件。</p><p>为了做到，你需要获取文件的全路径。</p><p>因为 Next.js 编译你的代码到独立的目录，你无法使用 <code>__dirname</code> 作为路径，因为它返回的不是 pages 目录。</p><p>你可以使用 process.cwd()，它会给你 Next.js 被执行的目录。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> fs <span class="token keyword">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 文章列表将在构建时被getStaticProps()填充</span><span class="token keyword">function</span> <span class="token function">Blog</span><span class="token punctuation">(</span><span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>filename<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这个函数将在服务端构建时被调用</span><span class="token comment" spellcheck="true">// 它不会被在客户端调用，所以你甚至可以直接访问数据库</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> postsDirectory <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"posts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> filenames <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>postsDirectory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> posts <span class="token operator">=</span> filenames<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>postsDirectory<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> fileContents <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通常你应该解析和转换内容</span>    <span class="token comment" spellcheck="true">// 比如你可以在这里转换markdown成HTML</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      filename<span class="token punctuation">,</span>      content<span class="token punctuation">:</span> fileContents<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回 { props: posts }, the Blog component 将在构建时接收posts作为属性</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>      posts<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Blog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h5><p><strong>只在构建时运行</strong><br>因为 getStaticProps 在构建时生成静态 HTML，所以它不会接收那些仅在请求时有效的数据，比如查询参数或者 HTTP 请求头。</p><p><strong>直接写服务端代码</strong><br>注意 getStaticProps 只运行在服务端。它永远不会运行到客户端。它不会包含为浏览器生成的 JS 打包文件。这因为着你可以写直接访问数据库查询的代码，不会发送到浏览器上。你可以不在 getStaticProps 调用 API，你可以直接在 getStaticProps 中写下服务端代码。</p><p><strong>静态生成 HTML 和 JSON</strong><br>当页面在构建时使用 getStaticProps 进行预渲染，除了页面内的 HTML 文件，Next.js 生成 JSON 文件来存储 getStaticProps 的运行结果。</p><p>这个 JSON 文件将使用在客户端通过<code>next/link</code>((文档)[<a href="https://nextjs.org/docs/api-reference/next/link])或者`next/router`((文档)[https://nextjs.org/docs/api-reference/next/router])导航时请求。当你导航到这个页面，它使用" target="_blank" rel="noopener">https://nextjs.org/docs/api-reference/next/link])或者`next/router`((文档)[https://nextjs.org/docs/api-reference/next/router])导航时请求。当你导航到这个页面，它使用</a> getStaticProps，Next.js 获取这个 JSON 文件（构建时提前计算的），然后使用它作为页面组件的属性参数。这意味着客户端跳转时不会调用 getStaticProps，只使用导出的 JSON 文件。</p><p><strong>仅在页面中允许</strong><br>只能在 page 中导出 getStaticProps。不能再非 Page 文件下到导出。</p><p>其中一个限制原因是 React 需要在渲染页面之前加载所有的数据</p><p>同样，你必须使用<code>export async function getStaticProps() {}</code> - 如果你添加 getStaticProps 作为页面组件的属性，则无法工作。</p><p><strong>在开发模式下每个请求运行</strong><br>在开发模式下(<code>next dev</code>), getStaticProps 将在每次请求时调用。</p><p><strong>预览模式</strong><br>在某些情况下，你可能想要临时绕过静态生成，并在使用请求时渲染页面而不是使用构建时的结果。比如，你可能使用无头的 CMS 并想要在发布之前预览草稿。</p><p>这种场景 Next.j 使用预览模式的功能提供支持。进步了解<a href="https://nextjs.org/docs/advanced-features/preview-mode" target="_blank" rel="noopener">预览模式文档</a></p><h4 id="getStaticPaths-静态生成"><a href="#getStaticPaths-静态生成" class="headerlink" title="getStaticPaths (静态生成)"></a>getStaticPaths (静态生成)</h4><p>如果页面有动态路由（(文档)[<a href="https://nextjs.org/docs/routing/dynamic-routes]）并使用了" target="_blank" rel="noopener">https://nextjs.org/docs/routing/dynamic-routes]）并使用了</a> getStaticProps，需要定义 paths 列表，才会在构建时生成 HTML。</p><p>如果你在动态路由的 Page 中导出 getStaticPaths 异步函数，Next.js 将静态预渲染所有被 getStaticPaths 指定的路径。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    paths<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// See the "paths" section below</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    fallback<span class="token punctuation">:</span> <span class="token boolean">true</span> or <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// See the "fallback" section below</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>paths 键必须</strong><br>这个 paths 键决定哪些路径会被预渲染。例如，假设你有一个命名为 pages/posts/[id].js 的动态路由页面。如果你在这个页面中导出 getStaticProps 并返回以下的路径：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">return</span> <span class="token punctuation">{</span>  paths<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'1'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">'2'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  fallback<span class="token punctuation">:</span> <span class="token operator">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后 Next.js 将在构建时使用<code>pages/posts/[id].js</code>的页面组件静态生成<code>posts/1</code>和<code>posts/2</code></p><p>注意每个 params 的值都必须与页面名称中使用的参数匹配：</p><ul><li>如果页面名称是<code>pages/posts/[postId]/[commentId]</code>,params 应该包含 postId 和 commentId。</li><li>如果页面名使用捕获所有的路由，比如<code>pages/[...slug]</code>，然后 params 应该包含 slug 是个数组。比如，如果数组是<code>[&#39;foo&#39;,&#39;bar&#39;]</code>，然后 Next.js 将静态生成页面在<code>/foo/bar</code></li></ul><p><strong>fallback 键必须</strong><br>getStaticPaths 返回的对象一定要包含 bool 类型的 fallback 键。</p><p><code>fallback:false</code></p><p>如果 fallback 是 false，任何不在 getStaticPaths 的路径的结果将是 404 页面。如果你预渲染的路径数量很小的话可以之前在构建时全部生成。当新页面不经常添加时非常有用。如果你要向数据中添加很多数据项并需要渲染它们，你需要再次构建。</p><p>这里有个实例，每个预渲染的博客文章的页面都是<code>pages/posts/[id].js</code>。博客文章的列表在 getStaticPaths 中通过 CMS 获得。然后，每个页面都适用 getStaticProps 从 CMS 中获取文章数据。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// pages/posts/[id].js</span><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">{</span> post <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Render post...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This function gets called at build time</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Call an external API endpoint to get posts</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://.../posts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Get the paths we want to pre-render based on posts</span>  <span class="token keyword">const</span> paths <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> post<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// We'll pre-render only these paths at build time.</span>  <span class="token comment" spellcheck="true">// { fallback: false } means other routes should 404.</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> paths<span class="token punctuation">,</span> fallback<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// This also gets called at build time</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// params contains the post `id`.</span>  <span class="token comment" spellcheck="true">// If the route is like /posts/1, then params.id is 1</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://.../posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Pass post data to the page via props</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Post<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fallback:true</code><br>如果 fallback 是 true，getStaticProps 的行为将会发生变化：</p><ul><li>getStaticPaths 返回的路径将在构建时被渲染成 HTML</li><li>没有在构建时生成的路径将不会返回 404 页面。相反，Next.js 将在页面被第一次请求时提供后备版本。在下面看<a href="https://nextjs.org/docs/basic-features/data-fetching#fallback-pages" target="_blank" rel="noopener">后备页面</a>。</li><li>在后台，Next.js 将静态生成请求路径的 HTML 和 JSON。它们会运行 getStaticProps。</li><li>当这些完成，浏览器会接收到已生成的路径的 JSON 文件。然后将使用它作为参数自动渲染页面。从用户的视角看，页面从备份页面切换到了完整页面。</li><li>同时，Next.js 会将这个路径添加到预渲染页面列表。后续请求到相同路径将返回已生成的页面，就像其他在构建时预渲染页面一样。</li></ul><p><strong>备份页面</strong><br>页面的备份版本：</p><ul><li>页面的属性将是空的</li><li>使用 router,你可以检测如果 fallback 已经被渲染，router.isFallback 将是 true</li></ul><p>下面是使用 isFallback 的案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// pages/posts/[id].js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span><span class="token punctuation">{</span> post <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果页面还没有被生成，它将显示</span>  <span class="token comment" spellcheck="true">// 初始化 until getStaticProps() 结束运行</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>router<span class="token punctuation">.</span>isFallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Loading<span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Render post...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这个函数将在构建时运行</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticPaths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 只有 `/posts/1` and `/posts/2` 在构建时被运行</span>    paths<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">"1"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">"2"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 启用静态生成其他页面</span>    <span class="token comment" spellcheck="true">// 例如: `/posts/3`</span>    fallback<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在构建时被执行</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 参数包含文章 `id`.</span>  <span class="token comment" spellcheck="true">// 如果路由是 /posts/1, 这个 params.id 将是 1</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://.../posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 传递文章数据作为页面属性</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span> post <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Post<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>什么时候<code>fallback:true</code>有用？</strong><br><code>fallback:true</code>当你的应用有非常大数量的静态页面时有用（思考：大型电商网站）。你想要预渲染所有产品页面，但是你的构建将花费很长。</p><p>相反，你应该静态生成少量集合的页面，剩下的页面使用<code>fallback:true</code>。当有人请求没有生成过的页面时，用户将会看到加载进度条。很快，getStaticProps 完成页面将使用请求的数据渲染。那么从现在开始，所有请求相同路径的人将获得静态预渲染页面。</p><p>它保证在保障构建速度和静态生成的优势同时，用户也一直有很快的体验。</p><p><strong>什么时候应该使用 getStaticPaths?</strong><br>如果你使用动态路由来静态预渲染页面，那你应该使用 getStaticPaths</p><p><strong>TypeScript: 使用 GetStaticPaths</strong><br>在 TypeScript 中，你可以从 next 中使用 GetStaticPaths:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> GetStaticPaths <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getStaticPaths<span class="token punctuation">:</span> GetStaticPaths <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="技术细节-1"><a href="#技术细节-1" class="headerlink" title="技术细节"></a>技术细节</h5><p><strong>和 getStaticProps 一起使用</strong><br>当你在动态路由参数的页面上使用 getStaticProps 时，你肯定要使用 getStaticProps</p><p>你无法让 getStaticPaths 和 getServerSideProps 一起使用。</p><p><strong>只在服务端构建时运行</strong><br>getStaticPaths 只在服务端构建时运行</p><p><strong>只运行在 Page 中</strong><br>getStaticPaths 只能被 page 导出。你不能在非 Page 的文件中导出它</p><p>同样，你必须使用<code>export async function getStaticPaths() {}</code> -如果你添加 getStaticPaths 到页面组件上不生效</p><p><strong>在开发模式下每次请求运行</strong><br>在开发模式下（<code>next dev</code>）, getStaticPaths 将在每次请求时调用。</p><h4 id="getServerSideProps-服务端渲染"><a href="#getServerSideProps-服务端渲染" class="headerlink" title="getServerSideProps(服务端渲染)"></a>getServerSideProps(服务端渲染)</h4><p>如果你在页面导出 getServerSideProps 异步函数，Next.js 将在每次请求时通过调用 getServerSideProps 来预渲染页面。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将作为页面组件的属性</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>context 参数是包含下列 key 的对象：</p><ul><li>params: 如果页面使用动态路由，params 包含路由的参数。如果页面名字是<code>[id].js</code>，那么 params 将是这样的<code>{id:...}</code></li><li>req: Http IncomingMessage 对象.</li><li>res: Http 响应对象</li><li>query: 查询参数</li><li>preview: true 如果页面是预览模式。否则就是 false</li><li>previewData: 通过 setPreviewData 来设置预览数据</li></ul><h5 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h5><p>这里是使用 getSeverSideProps 在每次请求时获取数据预渲染的案例。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> data <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Render data...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 每次请求获取</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过api获取数据</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://.../data`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 传递data作为页面属性</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> props<span class="token punctuation">:</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Page<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="什么时候应该使用-getServerSideProps"><a href="#什么时候应该使用-getServerSideProps" class="headerlink" title="什么时候应该使用 getServerSideProps?"></a>什么时候应该使用 getServerSideProps?</h5><p>只有当你预渲染的页面需要实时获取数据的时候才应该使用 getServerSideProps。相较于 getStaticProps 第一个字节到达(TTFB)的时间比较慢，因为服务端一定每次请求都要计算结果，并且这个结果没有额外的配置无法被 CDN 缓存。</p><p>如果你不需要预渲染数据，你可以考虑在客户端获取数据</p><h5 id="TypeScript-使用-GetServerSideProps"><a href="#TypeScript-使用-GetServerSideProps" class="headerlink" title="TypeScript:使用 GetServerSideProps"></a>TypeScript:使用 GetServerSideProps</h5><p>对于 TypeScript， 你从 next 中使用 GetServerSideProps 类型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> GetServerSideProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getServerSideProps<span class="token punctuation">:</span> GetServerSideProps <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="技术细节-2"><a href="#技术细节-2" class="headerlink" title="技术细节"></a>技术细节</h5><p><strong>只在服务端运行</strong><br>getServerSideProps 只能运行服务端并且不会运行在浏览器上。如果页面使用 getServerSideProps，需要注意：</p><ul><li>当你直接请求这个页面，getServerSideProps 会在每次请求时运行，并且页面每次预渲染返回 props。</li><li>当你在客户端通过<code>next/link</code>或者<code>next/router</code>来跳转时，Next.js 执行 getServerSideProps 发送 Api 请求给服务器。它将会返回 getServerSideProps 运行的结果，并且这个 JSON 将会被用来渲染页面。所有这些工作将被 Next.js 自动处理，所以除了 getServerSideProps 你不需要其他额外的定义。</li></ul><p><strong>在能在 page 中导出</strong><br>getServerSideProps 只能被 page 导出。你无法在非 page 文件中导出。</p><p>同样，你必须使用<code>export async function getServerSideProps() {}</code> - 如果你将它作为页面组件的属性这无法工作</p><h4 id="在客户端请求数据"><a href="#在客户端请求数据" class="headerlink" title="在客户端请求数据"></a>在客户端请求数据</h4><p>如果你页面需要频繁请求数据，你不需要预渲染数据，你可以只在客户端请求数据。在客户端请求数据的案例，如何工作：</p><ul><li>首先，不带数据立刻显示页面。页面部分内容可以使用静态生成预渲染。你可以在缺失数据的请求下显示加载状态。</li><li>然后，在客户端请求数据，并在准备好时显示。</li></ul><p>这种方式对于用户管理页面非常好，比如。因为管理面板是私有的，用户特有页面，不需要 SEO 则页面不需要预渲染。数据是频繁更新的，要求每次数据都实时请求。</p><h4 id="SWR"><a href="#SWR" class="headerlink" title="SWR"></a>SWR</h4><p>Next.js 背后的团队创建<a href="https://swr.now.sh/" target="_blank" rel="noopener">SWR</a>来获取数据的 React Hook。我们强烈建议如果在客户端请求使用它。它会处理缓存，重新验证，焦点跟踪，间隔重新获取等等。你可以这么使用：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> useSWR <span class="token keyword">from</span> <span class="token string">"swr"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> error <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSWR</span><span class="token punctuation">(</span><span class="token string">"/api/user"</span><span class="token punctuation">,</span> fetch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>failed to load<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>hello <span class="token punctuation">{</span>data<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://swr.now.sh/" target="_blank" rel="noopener">进一步查看 SWR 文档</a></p><h3 id="内置-CSS-支持"><a href="#内置-CSS-支持" class="headerlink" title="内置 CSS 支持"></a>内置 CSS 支持</h3><p>Next.js 允许你在 JavaScript 文件中导入 CSS 文件。这是可能的，因为 Next.js 扩展 import 概念到 JS 之外。</p><h4 id="添加全局的样式表"><a href="#添加全局的样式表" class="headerlink" title="添加全局的样式表"></a>添加全局的样式表</h4><p>为了给你的应用添加样式表，导入 CSS 文件到<code>pages/_app.js</code></p><p>例如，考虑将下面的样式命名为 styles.css</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"SF Pro Text"</span>, <span class="token string">"SF Pro Icons"</span>, <span class="token string">"Helvetica Neue"</span>, <span class="token string">"Helvetica"</span>,    <span class="token string">"Arial"</span>, sans-serif<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px <span class="token number">20</span>px <span class="token number">60</span>px<span class="token punctuation">;</span>  <span class="token property">max-width</span><span class="token punctuation">:</span> <span class="token number">680</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个<code>pages/_app.js</code>文件，然后导入 styles.css 文件</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token string">"../styles.css"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  在这个 `pages/_app.js` 文件中，这个默认的导出是必须的.</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些样式将会应用到你应用的所有页面和组件上。由于这个全局特性，需要避免冲突，你应该只将它们导入到<code>pages/_app.js</code>中</p><p>在开发中，用这种方式表示样式表允许你边修改变应用样式-意味着你可以保持应用状态。</p><p>在生产环境中，所有 CSS 文件都会被自动级联到一个压缩后的.css 文件中。</p><h4 id="添加组件级-CSS"><a href="#添加组件级-CSS" class="headerlink" title="添加组件级 CSS"></a>添加组件级 CSS</h4><p>Next.js 支持<a href="https://github.com/css-modules/css-modules" target="_blank" rel="noopener">CSS 模块</a>，使用<code>[name].module.css</code>文件命名约定。</p><p>CSS 模块通过自动创建独一无二的 class 名字来实现本地域的 CSS。它允许你在不同的文件中使用相同的 CSS 类，而不用担心碰撞。</p><p>这个行为使得 CSS 模块拥有了包含组件级 CSS 的理想方法。CSS 模块文件可以被应用中任何地方导入。</p><p>比如，思考在<code>components/</code>文件下创建一个可重用的 Button 组件。</p><p>首先，创建<code>components/Button.module.css</code>文件填充以下内容：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*你不需要担心 .error {} 碰撞其他类 `.css` 或者`.module.css` 文件中的error*/</span><span class="token selector"><span class="token class">.error</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，创建<code>components/Button.js</code>，导入和使用以上 CSS 文件：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">"./Button.module.css"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>button      type<span class="token operator">=</span><span class="token string">"button"</span>      <span class="token comment" spellcheck="true">// 注意error类可以被导入的styles对象访问</span>      className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>error<span class="token punctuation">}</span>    <span class="token operator">></span>      Destroy    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS 模块是一个可选的特性，并且只在文件扩展名为 .module.css 有效。常规的<code>&lt;Link&gt;</code>样式表和全局的 CSS 文件仍然被支持。</p><p>在生产环境下，所有 CSS 模块文件都将被自动级联到许多压缩、代码分割的 .css 文件中。这些 .css 文件表示应用热执行路径，保证加载应用绘制所需的 CSS 最少。</p><h4 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS-in-JS"></a>CSS-in-JS</h4><p><strong>例子</strong></p><ul><li><a href="https://github.com/zeit/next.js/tree/canary/examples/basic-css" target="_blank" rel="noopener">Styled JSx</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/examples/with-styled-components" target="_blank" rel="noopener">Styled Components</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/examples/with-styletron" target="_blank" rel="noopener">Styletron</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/examples/with-glamor" target="_blank" rel="noopener">Glamor</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/examples/with-cxs" target="_blank" rel="noopener">Cxs</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/examples/with-aphrodite" target="_blank" rel="noopener">Aphrodite</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/examples/with-fela" target="_blank" rel="noopener">Fela</a></li></ul><p>可以使用现有的任何一种 JS 中使用 CSS 的方案。最简单的使用内联。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">HiThere</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>p style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token string">"red"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>hi there<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> HiThere<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们打包<a href="https://github.com/zeit/styled-jsx" target="_blank" rel="noopener">styled-jsx</a>来支持独立作用域的 CSS。目的是用来支持类似于 Web Components 的影子 CSS，不幸的是它<a href="https://github.com/w3c/webcomponents/issues/71" target="_blank" rel="noopener">不支持服务端渲染并且仅支持 JS</a></p><p>看上面的案例中其他流行的 CSS-in-JS 方法（比如 Styled Components）。</p><p>使用 styled-jsx 的组件案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      Hello world      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>scoped<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">jsx</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token punctuation">{</span><span class="token selector">`        p </span><span class="token punctuation">{</span>          <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>          <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      `<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">global</span> <span class="token attr-name">jsx</span><span class="token punctuation">></span></span><span class="token style language-css"><span class="token punctuation">{</span><span class="token selector">`        body </span><span class="token punctuation">{</span>          <span class="token property">background</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      `<span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> HelloWorld<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请参考 <a href="https://github.com/zeit/styled-jsx" target="_blank" rel="noopener">styled-jsx 文档</a>看更多的案例</p><h4 id="Sass-支持"><a href="#Sass-支持" class="headerlink" title="Sass 支持"></a>Sass 支持</h4><p>Next.js 允许使用 .scss 和 sass 扩展来导入 Sass。你可以通过 CSS 模块 .module.scss 或者 .module.sass 扩展导入组件级的 Sass。</p><p>在你使用 Next.js 内置的 Sass 支持之前，保证安装了 sass</p><pre><code>npm install sass</code></pre><p>Sass 的支持和上述内置的 CSS 支持有相同的优势和限制</p><h4 id="Less-和-Stylus-支持"><a href="#Less-和-Stylus-支持" class="headerlink" title="Less 和 Stylus 支持"></a>Less 和 Stylus 支持</h4><p>为了支持导入 .less 或者 .styl 文件，你需要使用下面的插件</p><ul><li><a href="https://github.com/zeit/next-plugins/tree/master/packages/next-less" target="_blank" rel="noopener">@zeit/next-less</a></li><li><a href="https://github.com/zeit/next-plugins/tree/master/packages/next-stylus" target="_blank" rel="noopener">@zeit/next-stylus</a></li></ul><h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><ul><li><a href="https://nextjs.org/docs/advanced-features/customizing-postcss-config" target="_blank" rel="noopener">自定义 PostCSS 配置</a><br>通过自定义 Next.js 来扩展 PostCSS 配置和插件</li></ul><h3 id="静态文件服务"><a href="#静态文件服务" class="headerlink" title="静态文件服务"></a>静态文件服务</h3><p>Next.js 可以服务静态文件，比如图片，在根目录下的 public 文件夹下。在 public 下的文件可以被你代码直接通过 ‘/‘引用。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/my-image.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my</span> <span class="token attr-name">image"</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyImage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个文件夹同样对于 robots.txt，Google 网站验证，以及其他静态文件（包括.html）都有用。</p><blockquote><p>不要重命名 public 文件夹，这个文件名不能被修改并且只能被用来放静态资源</p></blockquote><blockquote><p>确保没有静态文件与 pages/ 文件夹下同名的文件，它会导致错误<br>读 <a href="http://err.sh/next.js/conflicting-public-file-page" target="_blank" rel="noopener">http://err.sh/next.js/conflicting-public-file-page</a></p></blockquote><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>Next.js 提供了一个集成的 TypeScript 开箱即用的体验，类似于 IDE</p><p>开始，在你的项目根目录下创建一个空的 tsconfig.json 文件</p><pre><code>touch tsconfig.json</code></pre><p>Next.js 将使用默认值自动配置这个文件，同样支持使用自定义<a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">编译参数</a>配置你的 tsconfig.json</p><blockquote><p>Next.js 使用 Babel 来处理 TypeScript，有一些<a href="https://babeljs.io/docs/en/babel-plugin-transform-typescript#caveats" target="_blank" rel="noopener">注意事项</a>, 以及一些<a href="https://babeljs.io/docs/en/babel-plugin-transform-typescript#typescript-compiler-options" target="_blank" rel="noopener">编译参数有区别</a></p></blockquote><p>然后，运行 next（通常 npm run dev ），然后 Next.js 将指导你安装必须包完成配置。</p><pre><code>npm run dev# 你讲看到下面指令:## 请安装 typescript, @types/react, and @types/node 通过运行:##         yarn add --dev typescript @types/react @types/node## ...</code></pre><p>你先可以准备开始把.js 文件转化成.tsx，并利用 TypeScript 的优势</p><blockquote><p>命名为 next-env.d.ts 文件将被项目的根目录创建。这个文件保证 Next.js 类型被 TypeScript 编译器选中。你不能删除它，然而你可以修改它（但你不需要这么做）</p></blockquote><blockquote><p>Next.js 严格模式默认关闭。当你感觉熟悉 TypeScript，建议你在 tsconfig.json 中打开它</p></blockquote><p>默认，Next.js 会上报你开发期间积极处理页面的 TypeScript 错误。不积极页面的 TypeScript 错误不会阻止开发进程。</p><p>如果你想要静默这些错误上报，参考<a href="https://nextjs.org/docs/api-reference/next.config.js/ignoring-typescript-errors" target="_blank" rel="noopener">忽略 TypeScript 错误</a>的文档</p><h4 id="静态生成和服务端渲染"><a href="#静态生成和服务端渲染" class="headerlink" title="静态生成和服务端渲染"></a>静态生成和服务端渲染</h4><p>对于 getStaticProps, getStaticPaths, and getServerSideProps。你可以分别使用 GetStaticProps, GetStaticPaths, and GetServerSideProps 类型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> GetStaticProps<span class="token punctuation">,</span> GetStaticPaths<span class="token punctuation">,</span> GetServerSideProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getStaticProps<span class="token punctuation">:</span> GetStaticProps <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getStaticPaths<span class="token punctuation">:</span> GetStaticPaths <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> getServerSideProps<span class="token punctuation">:</span> GetServerSideProps <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你使用 getInitialProps，你可以<a href="https://nextjs.org/docs/api-reference/data-fetching/getInitialProps#typescript" target="_blank" rel="noopener">参考这个页面</a></p></blockquote><h4 id="API-路由"><a href="#API-路由" class="headerlink" title="API 路由"></a>API 路由</h4><p>下面是如何为 API 路由使用内置的类型的案例</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> NextApiRequest<span class="token punctuation">,</span> NextApiResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> NextApiRequest<span class="token punctuation">,</span> res<span class="token punctuation">:</span> NextApiResponse<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"John Doe"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以指定响应数据</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> NextApiRequest<span class="token punctuation">,</span> NextApiResponse <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span>type Data <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> string<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token punctuation">:</span> NextApiRequest<span class="token punctuation">,</span> res<span class="token punctuation">:</span> NextApiResponse<span class="token operator">&lt;</span>Data<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"John Doe"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义-App"><a href="#自定义-App" class="headerlink" title="自定义 App"></a>自定义 App</h4><p>如果你有自定义的 App，你可以使用内置的 AppProps 类型，并将文件名改为 ./pages/_app.tsx：</p><pre><code>import { AppProps } from &#39;next/app&#39;function MyApp({ Component, pageProps }: AppProps) {  return &lt;Component {...pageProps} /&gt;}export default MyApp</code></pre><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>Next.js 具有页面概念的文件系统路由。</p><p>当文件被添加到 pages 目录下，它自动成为了有效的路由</p><p>pages 目录下的文件被用来定义成常见的模式</p><p><strong>索引路由</strong><br>router 将会自动的路由到目录下的 index 文件</p><ul><li><code>pages/index.js</code> → /</li><li><code>pages/blog/index.js</code> → /blog</li></ul><p><strong>嵌套路由</strong><br>路由支持嵌套文件。如果你创建一个嵌套目录结构的文件夹，将自动以相同的方式路由</p><ul><li><code>pages/blog/first-post.js</code> → <code>/blog/first-post</code></li><li><code>pages/dashboard/settings/username.js</code> → /<code>dashboard/settings/username</code></li></ul><p><strong>动态路由段</strong><br>为了匹配动态分段你可以使用括号语法。它允许你匹配命名参数</p><ul><li><code>pages/blog/[slug].js</code> → <code>/blog/:slug</code> (<code>/blog/hello-world</code>)</li><li><code>pages/[username]/settings.js</code> → <code>/:username/settings</code> (<code>/foo/settings</code>)</li><li><code>pages/post/[...all].js</code> → <code>/post/\*</code> (<code>/post/2020/id/title</code>)</li></ul><h4 id="不同页面之间的链接"><a href="#不同页面之间的链接" class="headerlink" title="不同页面之间的链接"></a>不同页面之间的链接</h4><p>Next.js 的 router 允许你在页面间进行客户端路由转换，类似于单页应用。</p><p>Link React 组件提供了客户端路由转换</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">"next/link"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>About Us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当链接到动态路由分段，你必须要提供 href 和 as 属性保证 router 知道那个 js 文件可以加载</p><ul><li>href - pages 目录下页面的名字。例如 <code>/blog/[slug]</code></li><li>as - 浏览器显示的 URL。例如 <code>/blog/hello-world</code></li></ul><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Link <span class="token keyword">from</span> <span class="token string">"next/link"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/blog/[slug]<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/blog/hello-world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span>To Hello World Blog post<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 as 属性也可以是动态生成的。例如，显示章节列表，需要传递给页面作为属性</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">{</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/blog/[slug]<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`/blog/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>post<span class="token punctuation">.</span>slug<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>post<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Link</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注入-router"><a href="#注入-router" class="headerlink" title="注入 router"></a>注入 router</h4><p>为了在 React 组件中访问 router 对象，你可以使用 useRouter 或者 withRouter</p><p>通常我们建议使用 useRouter</p><h4 id="继续学习"><a href="#继续学习" class="headerlink" title="继续学习"></a>继续学习</h4><p>router 被分为两个部分</p><ul><li><a href="https://nextjs.org/docs/api-reference/next/link" target="_blank" rel="noopener">next/link</a><br>处理客户端导航</li><li><a href="https://nextjs.org/docs/api-reference/next/router" target="_blank" rel="noopener">next/router</a><br>在页面中利用 router 的 API</li></ul><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>通过预定义路径来定义路由对于复杂应用不够。在 Next.js 中，你可以添加中括号给页面([param])来创建动态路由（a.k.a url slug,纯 urls，或者其他）</p><p>考虑下面的页面<code>pages/post/[pid].js</code>：</p><pre><code>import { useRouter } from &#39;next/router&#39;const Post = () =&gt; {  const router = useRouter()  const { pid } = router.query  return &lt;p&gt;Post: {pid}&lt;/p&gt;}export default Post</code></pre><p>任何类似于<code>/post/1</code>, <code>/post/abc</code>,等。都将被<code>pages/post/[pid].js</code>匹配。匹配路径的参数将作为 query 的参数发送给页面，并且会和其他查询参数一起合并。</p><p>例如，路由<code>/post/abc</code>将有下面的 query 对象</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token string">"abc"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样，路由<code>/post/abc?foo=bar</code>将有下面的 query 对象：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"foo"</span><span class="token operator">:</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token string">"abc"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然而，路由参数将会重写同名的查询参数。例如，路由<code>/post/abc?pid=123</code>将有下面的 query 对象：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token string">"abc"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>多个动态路由分段工作类似。页面<code>pages/post/[pid]/[comment].js</code>将匹配<code>/post/abc/a-comment</code>路由，将有下面的 query 对象：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"pid"</span><span class="token operator">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token property">"comment"</span><span class="token operator">:</span> <span class="token string">"a-comment"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端导航到一个动态路由，可以通过<code>next/link</code>处理</p><h4 id="捕获所有路由"><a href="#捕获所有路由" class="headerlink" title="捕获所有路由"></a>捕获所有路由</h4><p>动态路由可以通过添加三个点(…)在[]中来扩展捕获所有路径。例如</p><ul><li>pages/post/[…slug].js 匹配 /post/a, 也包括 /post/a/b, /post/a/b/c 等等。</li></ul><blockquote><p>注意：你可以使用非 slug 名字，比如[…param]</p></blockquote><p>匹配的参数将作为查询参数发送给页面(案例中是 slug)，并且它一直是一个数组，所以，路径<code>/post/a</code>将有下面的 query 对象：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>/post/a/b</code>和其他匹配的路径，参数是这样的数组：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span> <span class="token property">"slug"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>一个捕获所有路由的好案例是 Next.js docs，页面<code>pages/docs/[...slug].js</code>捕获所有你看到的 docs</p></blockquote><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>预定义路由优先于动态路由，动态路由优选于捕获所有路由。案例：<ul><li><code>pages/post/create.js</code> - 将匹配 <code>/post/create</code></li><li><code>pages/post/[pid].js</code> - 将匹配 <code>/post/1</code>, <code>/post/abc</code>, etc. 不包括 <code>/post/create</code></li><li><code>pages/post/[...slug].js</code> - 将匹配 <code>/post/1/2</code>, <code>/post/a/b/c</code>, etc. 不包括 <code>/post/create</code>, <code>/post/abc</code></li></ul></li><li>通过自动静态优化的页面将水合，且不带路由参数。query 将是一个空对象</li></ul><p>水合之后，Next.js 将触发应用更新，并在 query 对象中提供路由参数。</p><h3 id="势在必行"><a href="#势在必行" class="headerlink" title="势在必行"></a>势在必行</h3><p><code>next/link</code>应该尽可能的覆盖你路由的需求，但是你可能不需要在客户端跳转时使用它，查看<a href="https://nextjs.org/docs/api-reference/next/router#router-api" target="_blank" rel="noopener">Router API 文档</a></p><p>下面的案例显示了 Router API 的基础用法：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ReadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      Click <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/about"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> to read more    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ReadMore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浅层路由"><a href="#浅层路由" class="headerlink" title="浅层路由"></a>浅层路由</h3><p>浅层路由允许你改变 URL 而不用再次运行数据获取方法，这些方法包括 getServerSideProps, getStaticProps, and getInitialProps.</p><p>你将通过 router 对象来接收到更新后的 pathname 和 query 对象（<a href="https://nextjs.org/docs/api-reference/next/router#userouter" target="_blank" rel="noopener">userRouter</a>或者<a href="https://nextjs.org/docs/api-reference/next/router#withrouter" target="_blank" rel="noopener">withRouter</a>）,不丢失状态</p><p>为了启用浅层路由，设置 shallow 参数 true。下面案例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Current URL is '/'</span><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 总是在第一次渲染之后执行跳转</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/?counter=10"</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token punctuation">{</span> shallow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 计数器发生变化</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>router<span class="token punctuation">.</span>query<span class="token punctuation">.</span>counter<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Page<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你不需要添加 router 对象到页面，那你也可以直接使用<a href="https://nextjs.org/docs/api-reference/next/router#router-api" target="_blank" rel="noopener">Router API</a>, 例如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Inside your page</span>Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/?counter=10"</span><span class="token punctuation">,</span> undefined<span class="token punctuation">,</span> <span class="token punctuation">{</span> shallow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>URL 将更新为<code>/?counter=10</code>。并且页面不会替换，只是 route 的状态发生变化</p><p>你也可以通过 componentDidUpdate 来观察 URL 变化：</p><pre><code>componentDidUpdate(prevProps) {  const { pathname, query } = this.props.router  // 验证属性，避免无限循环  if (query.counter !== prevProps.router.query.counter) {    // 基于新的查询对象获取数据  }}</code></pre><h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4><p>浅层路由只在相同页面 URL 变更时有效。例如，让我们假设另外一个页面叫做<code>pages/about.js</code>，你可以运行</p><pre class="line-numbers language-js"><code class="language-js">Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/?counter=10"</span><span class="token punctuation">,</span> <span class="token string">"/about?counter=10"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> shallow<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即使我们要求是浅层路由，因为它是个新页面，会卸载当前页，等数据加载完创建新的</p><h2 id="API-路由-1"><a href="#API-路由-1" class="headerlink" title="API 路由"></a>API 路由</h2><p>Next.js 的 API routes 中提供了直接解决方案来构建你自己的 API<br>任何放到<code>pages/api</code>文件夹的文件会被映射成<code>/api/*</code>，会被认为是 API 还不是页面<br>比如，下面 API 路由<code>pages/api/user.js</code>处理一个简单的 json 响应：</p><pre><code>export default (req, res) =&gt; {  res.statusCode = 200  res.setHeader(&#39;Content-Type&#39;, &#39;application/json&#39;)  res.end(JSON.stringify({ name: &#39;John Doe&#39; }))}</code></pre><p>为了 API 路由正常工作，你需要导出一个 default 函数(请求处理函数),它会接收下面的参数</p><ul><li><code>req</code>: 它是<a href="https://nodejs.org/api/http.html#http_class_http_incomingmessage" target="_blank" rel="noopener">http.IncomingMessage</a>实例，加一些预先构建的中间件，你可以看<a href="https://nextjs.org/docs/api-routes/api-middlewares" target="_blank" rel="noopener">这里</a></li><li><code>res</code>: 它是<a href="https://nodejs.org/api/http.html#http_class_http_serverresponse" target="_blank" rel="noopener">http.ServerResponse</a>实例，添加一些帮助函数可以看<a href="https://nextjs.org/docs/api-routes/response-helpers" target="_blank" rel="noopener">这里</a><br>为了在一个 API 路由中处理不同的 http 方法，你可以使用<code>req.method</code>,比如</li></ul><pre><code>export default (req, res) =&gt; {  if (req.method === &#39;POST&#39;) {    // Process a POST request  } else {    // Handle any other HTTP method  }}</code></pre><p>获取 API 节点，看下下面章节的案例</p><blockquote><p>API 路由不要求指定跨域头，意味着默认只支持同源请求。你可以用<a href="https://nextjs.org/docs/api-routes/api-middlewares#connectexpress-middleware-support" target="_blank" rel="noopener">跨域中间件</a>包装请求处理函数来自定义这个行为<br>API 路由不会增加你客户端的文件大小，只会增加服务端的大小</p></blockquote><h3 id="动态-API-路由"><a href="#动态-API-路由" class="headerlink" title="动态 API 路由"></a>动态 API 路由</h3><p>API 路由支持动态路由，命名规则还是使用<code>pages</code>。例子，<code>pages/api/post/[pid].js</code>下面代码：</p><pre><code>export default (req, res) =&gt; {  const {    query: { pid },  } = req  res.end(`Post: ${pid}`)}</code></pre><p>现在，请求<code>/api/post/abc</code>将会返回<code>Post: abc</code></p><h4 id="捕获所有的路由"><a href="#捕获所有的路由" class="headerlink" title="捕获所有的路由"></a>捕获所有的路由</h4><p>API 路由通过在括号中添加…捕获它下面所有路径，比如：</p><ul><li><code>pages/api/post/[...slug].js</code>匹配<code>/api/post/a</code>,同样<code>/api/post/a/b</code>以及<code>/api/post/a/b/c</code>也会匹配</li></ul><blockquote><p>注意：你可以不用<code>slug</code>用其他的比如<code>[..param]</code><br>匹配参数将会作为查询参数发送给页面（这个例子是<code>slug</code>）,它经常是一个数组，路径<code>/api/post/a</code>的<code>query</code>对象为：</p></blockquote><pre><code>{ &quot;slug&quot;: [&quot;a&quot;] }</code></pre><p><code>/api/post/a/b</code>路径的参数这样</p><pre><code>{ &quot;slug&quot;: [&quot;a&quot;, &quot;b&quot;] }</code></pre><p><code>pages/api/post/[...slug].js</code>的 API 处理可以这样：</p><pre><code>export default (req, res) =&gt; {  const {    query: { slug },  } = req  res.end(`Post: ${slug.join(&#39;, &#39;)}`)}</code></pre><p>现在，请求<code>/api/post/a/b/c</code>将返回<code>Post: a, b, c</code></p><h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>预先定义的 API 路由优先级高于动态路由，动态路由会捕获剩下的所有 API。看下下面的例子：</li><li><code>pages/api/post/create.js</code> - 将匹配 <code>/api/post/create</code></li><li><code>pages/api/post/[pid].js</code> - 将匹配 <code>/api/post/1</code>, <code>/api/post/abc</code>, 等等. <code>/api/post/create</code>将不会被匹配</li><li><code>pages/api/post/[...slug].js</code> - 将匹配 <code>/api/post/1/2</code>, <code>/api/post/a/b/c</code>, 等等. <code>/api/post/create</code>, <code>/api/post/abc</code>将不会被匹配</li></ul><h3 id="API-中间件"><a href="#API-中间件" class="headerlink" title="API 中间件"></a>API 中间件</h3><p>API 路由提供内置中间件解析进来的请求<code>req</code>。有这些中间件</p><ul><li><code>req.cookies</code> - 对象包含请求发送过来的 cookie，默认是<code>{}</code></li><li><code>req.query</code> - 对象包含<a href="https://en.wikipedia.org/wiki/Query_string" target="_blank" rel="noopener">query string</a>，默认是<code>{}</code></li><li><code>req.body</code> - 对象包含根据<code>content-type</code>解析过的 body，如果没有<code>body</code>，它是 null</li></ul><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>每个 API 路由都可以到处一个<code>config</code>对象来修改默认配置，例如</p><pre><code>export const config = {  api: {    bodyParser: {      sizeLimit: &#39;1mb&#39;,    },  },}</code></pre><p>这个<code>api</code>对象包含所有 API 路由的配置<br><code>bodyParser</code>启用 body 解析，你如果想要自己消费<code>Stream</code>可以禁用掉<br><code>bodyParser.sizeLimit</code>是最大允许解析的 Size，支持<a href="https://github.com/visionmedia/bytes.js" target="_blank" rel="noopener">bytes</a>，比如：</p><pre><code>export const config = {  api: {    bodyParser: {      sizeLimit: &#39;500kb&#39;,    },  },}</code></pre><h4 id="支持-Connect-Express-中间件"><a href="#支持-Connect-Express-中间件" class="headerlink" title="支持 Connect/Express 中间件"></a>支持 Connect/Express 中间件</h4><p>你也可以使用<a href="https://github.com/senchalabs/connect" target="_blank" rel="noopener">Connect</a>兼容中间件。<br>比如，利用[cors 包]为 API<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS" target="_blank" rel="noopener">配置 CORS</a>。<br>首先，安装<code>cors</code>:</p><pre><code>npm i cors# oryarn add cors</code></pre><p>现在，让我们添加<code>cors</code>到 API 路由</p><pre><code>import Cors from &#39;cors&#39;// Initializing the cors middlewareconst cors = Cors({  methods: [&#39;GET&#39;, &#39;HEAD&#39;],})// Helper method to wait for a middleware to execute before continuing// And to throw an error when an error happens in a middlewarefunction runMiddleware(req, res, fn) {  return new Promise((resolve, reject) =&gt; {    fn(req, res, result =&gt; {      if (result instanceof Error) {        return reject(result)      }      return resolve(result)    })  })}async function handler(req, res) {  // Run the middleware  await runMiddleware(req, res, cors)  // Rest of the API logic  res.json({ message: &#39;Hello Everyone!&#39; })}export default handler</code></pre><h4 id="响应帮助"><a href="#响应帮助" class="headerlink" title="响应帮助"></a>响应帮助</h4><p>响应<code>res</code>包含一些类似于 express.js 的函数，提高开发者的体验并加快创建一个 API 路由的效率。看下下面的案例。</p><pre><code>export default (req, res) =&gt; {  res.status(200).json({ name: &#39;Next.js&#39; })}</code></pre><p>包含下面的帮助：</p><ul><li><code>res.status(code)</code> - 设置状态码，<code>code</code>一定是一个有效的 HTTP 状态码</li><li><code>res.json(json)</code> - 发送 json 响应。<code>json</code>一定是一个有效的 JSON 对象</li><li><code>res.send(body)</code> - 发送 HTTP 响应。<code>body</code>可以是<code>string</code>、<code>object</code>或者是<code>Buffer</code></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Vercel-推荐"><a href="#Vercel-推荐" class="headerlink" title="Vercel (推荐)"></a>Vercel (推荐)</h3><p>部署 Next.js 到生产环境最简单的方式是使用 Next.js 创建提供的<a href="https://vercel.com/" target="_blank" rel="noopener">Vercel 平台</a>。Vercel 是一个多合一平台，支持全局静态 CDN，JAMstack 部署和无服务功能。</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>如果你尚未这么做，你可以将 Next.js 应用推到你自己的 GitHub,GitLab,或者 BitBucket 这些 git provider 上。你的仓库可以是私有的或者公共的。</p><p>然后，跟随着下面的这些步骤</p><ul><li>注册 Vercel (无需信用卡)</li><li>注册之后，你讲到达<a href="https://vercel.com/import" target="_blank" rel="noopener">导入项目</a>页面，在”From Git Repository”下，选择你使用的 Git provider 去配置和集成。(使用说明:<a href="https://vercel.com/docs/v2/git-integrations/zeit-now-for-github" target="_blank" rel="noopener">GitHub</a> / <a href="https://vercel.com/docs/v2/git-integrations/zeit-now-for-gitlab" target="_blank" rel="noopener">GitLab</a> / <a href="https://vercel.com/docs/v2/git-integrations/zeit-now-for-bitbucket" target="_blank" rel="noopener">BitBucket</a>).</li><li>一旦配置好，点击“Import Project From …”并导入你的 Next.js 应用。它会为你检测你的应用使用 Next.js 并设置构建配置。不需要改变任何东西 - 任何事情都会正常工作</li><li>导入完成之后，它将部署你的 Next.js 应用并提供给你部署 URL。点击”Visit”去在生产环境下看你的应用</li></ul><p>恭喜！你已经成功部署 Next.js 应用！如果你有任何疑问，看一下<a href="https://vercel.com/docs" target="_blank" rel="noopener">Vercel documentation</a></p><blockquote><p>如果你使用自定义服务，我们强烈建议你从其迁移走（例如，使用<a href="https://nextjs.org/docs/routing/dynamic-routes" target="_blank" rel="noopener">动态路由</a>）。如果无法迁移，请考虑其他<a href="https://nextjs.org/docs/deployment#other-hosting-options" target="_blank" rel="noopener">托管选项</a>。</p></blockquote><h3 id="DPS-Develop-Preview-Ship"><a href="#DPS-Develop-Preview-Ship" class="headerlink" title="DPS: Develop, Preview, Ship"></a>DPS: Develop, Preview, Ship</h3><p>让我们谈谈我们建议使用的工作流程。Vercel 支持 DPS 工作流：开发，预览，发货：</p><ul><li>开发：在 Next.js 中写下代码。保证开发服务器运行并利用热代码重新加载功能。</li><li>预览：每次你将代码变更推到 GitHub / GitLab / BitBucket 的分支，Vercel 自动创建新的部署以及唯一的 URL。当你在 Github 打开一个 pull request 时，可以看到它。或者在 Vercel 你项目目录下的“预览部署”下面。<a href="https://vercel.com/features/deployment-previews" target="_blank" rel="noopener">进一步学习</a></li><li>发货：当你准备发货，合并请求到你默认分支（master）。Vercel 将自动创建一个生产部署。</li></ul><p>通过 DPS 工作流，除了代码审查之外，你可以进行部署预览。每次部署都会创建一个唯一 URL，可以被共享和用于集成测试。</p><h3 id="Next-js-优化"><a href="#Next-js-优化" class="headerlink" title="Next.js 优化"></a>Next.js 优化</h3><p>Vercel 由 Next.js 创建者创建，对 Next.js 一流支持。<br>例如，<a href="https://nextjs.org/docs/basic-features/pages" target="_blank" rel="noopener">混合页面</a>开箱即用的都支持</p><ul><li>每个页面都可以使用静态生成和服务端渲染</li><li>使用静态生成和资源（JS，CSS，图片，字体等等）的页面将自动从<a href="https://vercel.com/smart-cdn" target="_blank" rel="noopener">Vercel Smart CDN</a>提供服务，速度非常快。</li><li>使用服务端渲染和 API 路由的页面都会自动成为无服务功能。允许页面渲染和 API 请求无限扩展。</li></ul><h3 id="自定义域名，环境变量，自动-HTTPS，等等"><a href="#自定义域名，环境变量，自动-HTTPS，等等" class="headerlink" title="自定义域名，环境变量，自动 HTTPS，等等"></a>自定义域名，环境变量，自动 HTTPS，等等</h3><ul><li><strong>自定义域名：</strong> 在 Vercel 部署过，你可以给你的 Next.js 应用分配一个自定义域名。看下<a href="https://vercel.com/docs/v2/custom-domains" target="_blank" rel="noopener">我们的文档</a></li><li><strong>环境变量：</strong> 你可以在 Vercel 设置环境变量。看下[我们的文档]。然后你可以在 Next.js 应用中<a href="https://nextjs.org/docs/api-reference/next.config.js/environment-variables" target="_blank" rel="noopener">使用这些环境变量</a></li><li><strong>自动 HTTPS：</strong> HTTPS 默认启动（包括自定义域名）并且不要求其他配置。我们自动刷新 SSL 证书</li><li><strong>更多：</strong> <a href="https://vercel.com/docs" target="_blank" rel="noopener">读我们文档</a>学习更多 Vercel 平台</li></ul><h3 id="其他托管选项"><a href="#其他托管选项" class="headerlink" title="其他托管选项"></a>其他托管选项</h3><h4 id="Node-js-服务"><a href="#Node-js-服务" class="headerlink" title="Node.js 服务"></a>Node.js 服务</h4><p>Next.js 可以被部署到任何支持 Node.js 的托管服务器上。如果你使用自定义服务应该采用这种方法。<br>保证你 package.json 有 build 和 start 脚本：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"next"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"next build"</span><span class="token punctuation">,</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"next start"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>next build 构建的生产应用丢到.next 文件夹下。构建之后，next start 启动 Node 服务支持<a href="https://nextjs.org/docs/basic-features/pages" target="_blank" rel="noopener">混合页面</a>，服务静态生成和服务端渲染页面。</p><h4 id="静态-HTML-导出"><a href="#静态-HTML-导出" class="headerlink" title="静态 HTML 导出"></a>静态 HTML 导出</h4><p>如果你喜欢为你的 Next.js 应用导出静态 HTML，跟随着<a href="https://nextjs.org/docs/advanced-features/static-html-export" target="_blank" rel="noopener">我们文档</a>的指示。默认，next export 将生成 out 文件夹，可以被放到任何静态托管服务或者 CDN。</p><blockquote><p>我们强力建议使用 Vercel，即使如果你的 Next.js 应用是全静态的。Vercel 优化过的使得静态 Next.js 应用更快。next export 在 Vercel 部署 0 配置。</p></blockquote><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="预览模式"><a href="#预览模式" class="headerlink" title="预览模式"></a>预览模式</h3><p>在页面文档和数据获取文档中，我们讨论了在构建时（静态生成）使用 getStaticProps 和 getStaticPaths 来预渲染页面。</p><p>静态生成在你从无头的 CMS 中获取数据非常有用。然而，当你在无头的 CMS 上写下草稿并且想要马上预览它无法实现。你想要 Next.js 在请求时预渲染这些页面而不是在构建时，获取的是草稿箱内容而不是发布内容。你想在这种情况下 Next.js 可以跳过静态生成。</p><p>Next.js 有预览功能可以解决这个问题。这里有如何使用的指令。</p><h4 id="步骤-1-创建和访问预览-API-路由"><a href="#步骤-1-创建和访问预览-API-路由" class="headerlink" title="步骤 1.创建和访问预览 API 路由"></a>步骤 1.创建和访问预览 API 路由</h4><blockquote><p>如果你不熟悉 Next.js API 路由，你需要看下<a href="https://nextjs.org/docs/api-routes/introduction" target="_blank" rel="noopener">API 路由 文档</a></p></blockquote><p>首先创建预览 API 路由。它可以有任何名字。比如<code>pages/api/preview.js</code>(或者如果使用 TypeScript 则是.ts)。</p><p>在 API 路由上，你需要在响应对象上调用 setPreviewData。setPreviewData 的参数应该是一个对象，并且它可以被 getStaticProps 使用。现在我们使用的是一个<code>{}</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  res<span class="token punctuation">.</span><span class="token function">setPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>res.setPreviewData</code>在浏览器上设置一些 cookie 来启动预览模式。Next.js 任何请求包含这个 cookie 都会可能变成预览模式，并且静态生成页面的行为将会发生变化（更详细的在后面）</p><p>你可以像下面这样手动创建 API 路由，并通过浏览器访问它：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 一个在浏览器上手动测试的简单案例</span><span class="token comment" spellcheck="true">//如果是在 pages/api/preview.js上,</span><span class="token comment" spellcheck="true">//然后在你的浏览器上打开 `/api/preview`</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">setPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"Preview mode enabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你使用的是浏览器开发工具，你可能注意到每次请求，cookie 都设置<code>__prerender_bypass</code>和<code>__next_preview_data</code></p><p><strong>安全访问无头 CMS</strong></p><p>实践中，你可能想要安全的调用这个 API 访问无头 CMS。具体步骤可能会因为使用的不同的 CMS 而不一样，但是有一些公共的步骤你需要关心。</p><p>这些步骤假设你用的无头 CMS 支持设置自定义预览 URLs。否则，你仍然可以使用这个方法来保护你的预览 URLs，但是你需要手动构造和访问这个预览 URL。</p><p>首先，你应该使用你选择的 token 生成器来生成一个私密的 token 字符串。这个 token 只有你 Next.js 应用和你的无头 CMS 知道。这个 token 阻止那些没有权限的人访问预览 URL。</p><p>然后，如果你的无头 CMS 支持设置自定义 URLs，指定下面的作为预览 URL。（它假设你的预览 API 路由是这样的<code>pages/api/preview.js</code>）</p><pre><code>https://&lt;your-site&gt;/api/preview?secret=&lt;token&gt;&amp;slug=&lt;path&gt;</code></pre><ul><li><code>&lt;your-site&gt;</code> 应该是你部署的域名</li><li><code>&lt;token&gt;</code> 应该被替换成你生成的私密 token</li><li><code>&lt;path&gt;</code> 应该是你想要预览的页面的路径。如果你想要预览<code>/posts/foo</code>, 你应该使用<code>&amp;slug=/posts/foo</code></li></ul><p>你无头 CMS 应该允许你在预览 URL 中使用变量，所以<code>&lt;path&gt;</code>可以被动态根据 CMS 数据设置，比如：<code>&amp;slug=/posts/{entry.fields.slug}</code></p><p>最后，在这个预览 API 路由：</p><ul><li>检查私密 token 匹配并且 slug 参数存在（如果没有，这个请求应该失败）</li><li>调用<code>res.setPreviewData</code></li><li>然后重定向浏览器到 slug 指定的路径。（下面的案例使用 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307" target="_blank" rel="noopener">307 重定向</a>）</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 检查secret和next参数</span>  <span class="token comment" spellcheck="true">// 这个secret应该只有这个API路由和CMS知道</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>secret <span class="token operator">!==</span> <span class="token string">"MY_SECRET_TOKEN"</span> <span class="token operator">||</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>slug<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">"Invalid token"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 如果提供了slug，获取无头 CMS 数据</span>  <span class="token comment" spellcheck="true">// getPostBySlug 应该事先获取无头 CMS 逻辑</span>  <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPostBySlug</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>slug<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果slug不存在，阻止预览模式启用</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>post<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">"Invalid slug"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置cookie启用预览模式</span>  res<span class="token punctuation">.</span><span class="token function">setPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 重定向路径到获取到的post的slug</span>  <span class="token comment" spellcheck="true">// 我们不能重定向查询参数的slug,因为可能会造成潜在的漏洞</span>  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">307</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> Location<span class="token punctuation">:</span> post<span class="token punctuation">.</span>slug <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果成功，浏览器都会重定向你想要预览的路径。</p><h4 id="步骤-2-更新-getStaticProps"><a href="#步骤-2-更新-getStaticProps" class="headerlink" title="步骤 2.更新 getStaticProps"></a>步骤 2.更新 getStaticProps</h4><p>下一个步骤就是更新 getStaticProps 来支持预览模式。</p><p>如果你请求的页面的 getStaticProps 支持预览模式设置(通过 <code>res.setPreviewData</code>)，然后 getStaticProps 将在请求时被调用（而不是在构建时）</p><p>进一步，它会带着 context 对象调用：</p><ul><li>context.preview 将是 true</li><li>context.previewData 将与 setPreviewData 的参数相同</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果设置了预览模式请求页面</span>  <span class="token comment" spellcheck="true">//</span>  <span class="token comment" spellcheck="true">// - context.preview 是 true</span>  <span class="token comment" spellcheck="true">// - context.previewData 将与 setPreviewData 的参数相同</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们在预览 API 路由中使用<code>res.setPreviewData({})</code>，所以 context.previewData 将被设置成 <code>{}</code>。你如果需要你可以在预览 API 路由中像 getStaticProps 传递会话信息。</p><p>如果你也使用了 getStaticPaths，context.params 也会生效。</p><p><strong>获取预览数据</strong></p><p>你可以更新 getStaticProps 根据 context.preview 和 context.previewData 获取不同的数据。</p><p>举例，你无头 CMS 可能访问草稿文章用不同的 API。如果这样，你可以使用 context.preview 来修改 API,比如下面这样。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果 context.preview is true, 则向API路径添加 "/preview"</span>  <span class="token comment" spellcheck="true">// 去请求草稿内容而不是发布内容. 这非常依赖于你使用的CMS.</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`https://.../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>context<span class="token punctuation">.</span>preview <span class="token operator">?</span> <span class="token string">"preview"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此！如果你带着 secret 和 slug 访问你的预览 API 路由，你应该看到预览内容。并且如果你更新草稿内容，你应该可以预览这个草稿。</p><pre><code># Set this as the preview URL on your headless CMS or access manually,# and you should be able to see the preview.https://&lt;your-site&gt;/api/preview?secret=&lt;token&gt;&amp;slug=&lt;path&gt;</code></pre><h4 id="更多案例"><a href="#更多案例" class="headerlink" title="更多案例"></a>更多案例</h4><p>…略</p><h4 id="更多详情"><a href="#更多详情" class="headerlink" title="更多详情"></a>更多详情</h4><p><strong>清除预览模式 cookies</strong></p><p>默认情况下，没有给预览模式 cookie 设置有效期，所以当浏览器关闭预览模式结束。</p><p>为手动清除预览模式 cookies,你可以创建 API 路由来调用 clearPreviewData，然后访问这个 API 路由。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Clears the preview mode cookies.</span>  <span class="token comment" spellcheck="true">// This function accepts no arguments.</span>  res<span class="token punctuation">.</span><span class="token function">clearPreviewData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>指定预览模式有效期</strong></p><p>setPreviewData 的第二个可选参数，它是一个 options 对象。它接受下面的 keys：</p><ul><li>maxAge：指定预览回话要持续的时间（但为是秒）</li></ul><pre class="line-numbers language-js"><code class="language-js"><span class="token function">setPreviewData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>  maxAge<span class="token punctuation">:</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// The preview mode cookies expire in 1 hour</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>previewData 大小限制</strong></p><p>你可以传递对象给 setPreviewData，它在 getStaticProps 中有效。然而，因为数据是存在 cookie 中，它们有大小限制。当前预览数据限制为 2KB。</p><p><strong>getServerSideProps 一起工作</strong></p><p>预览模式统一可以在 getServerSideProps 工作很好。它的 context 对象也包含 preview 和 previewData</p><p><strong>每次<code>next build</code>唯一</strong></p><p>当 next build 运行，旁路的 cookie 和加密的 previewData 的私钥会更改，它会保证旁路的 cookie 不会被猜到。</p><h3 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h3><p>Next.js 支持 JavaScript 的 ES2020 动态导入。用它你可以动态导入 JavaScript 模块（包括 React 组件）并使用它们。它们也可以在 SSR 中使用。</p><p>你可以考虑用到动态导入作为另外一种分割代码成可管理的 chunk。</p><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><p>下面的示例，模块 <code>../components/hello</code>将被页面动态导入：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">"next/dynamic"</span><span class="token punctuation">;</span><span class="token keyword">const</span> DynamicComponent <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DynamicComponent</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HOME PAGE is here<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DynamicComponent 将作为 default 组件被<code>../components/hello</code>返回。它就像常规的 React 组件一样工作，你可以正常传递属性给它。</p><h4 id="命名导出"><a href="#命名导出" class="headerlink" title="命名导出"></a>命名导出</h4><p>如果动态组件不是默认导出，你也可以使用命名导出。考虑模块<code>../components/hello.js</code>它有命名导出 Hello：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了动态导入 Hello 组件，你可以从<code>import()</code>返回的 Promise 中返回它，比如：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">"next/dynamic"</span><span class="token punctuation">;</span><span class="token keyword">const</span> DynamicComponent <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mod<span class="token punctuation">.</span>Hello<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DynamicComponent</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HOME PAGE is here<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义加载组件"><a href="#自定义加载组件" class="headerlink" title="自定义加载组件"></a>自定义加载组件</h4><p>loading 组件是可选的，它渲染表示当动态组件正在加载中的 loading 状态。例如：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">"next/dynamic"</span><span class="token punctuation">;</span><span class="token keyword">const</span> DynamicComponentWithCustomLoading <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> loading<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DynamicComponentWithCustomLoading</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HOME PAGE is here<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务端渲染不用"><a href="#服务端渲染不用" class="headerlink" title="服务端渲染不用"></a>服务端渲染不用</h4><p>你可能不想在服务端一直包含这个模块，例如，当模块包含的库只在浏览器端生效。</p><p>看下下面的示例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">"next/dynamic"</span><span class="token punctuation">;</span><span class="token keyword">const</span> DynamicComponentWithNoSSR <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello3"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> ssr<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Header</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DynamicComponentWithNoSSR</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>HOME PAGE is here<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Home<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动静态优化"><a href="#自动静态优化" class="headerlink" title="自动静态优化"></a>自动静态优化</h3><p>如果没有要求阻塞的数据，Next.js 自动决定页面是否是静态的（可以被预渲染）。这个的判断是依据页面中是否存在<code>getServerSideProps</code>和<code>getInitialProps</code>。<br>这个特性允许 Next.js 打包出包含服务端渲染和静态生成页面的混合应用</p><blockquote><p>静态生成的页面仍然是具有响应式的：Next.js 将混合你客户端的应用使其具有完整的交互性。</p></blockquote><p>这个特性最大的好处是页面无服务端计算，可以立刻从多个 CDN 的位置流式传递给终端用户。给你的用户带来极致的加载体验。</p><h4 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h4><p>如果<code>getInitialProps</code>存在，Next.js 将使用它默认的行为并且在后台渲染，提前请求（在服务端渲染的时候）<br>如果<code>getInitialProps</code>没有，Next.js 将自动静态化（预渲染页面成静态 HTML）。在预先渲染的时候，因为在这个阶段我们没有<code>query</code>信息，所以<code>query</code>对象是空的。混合之后，任何<code>query</code>值将填充到客户端。<br><code>next build</code>将为静态优化页面构建出.html 文件。举例，<code>pages/about.js</code>页面将会生成这的结果</p><pre><code>.next/server/static/\${BUILD_ID}/about.html</code></pre><p>如果你添加<code>getInitialProps</code>到页面，它的产物结果将是</p><pre><code>.next/server/static/\${BUILD_ID}/about.js</code></pre><p>在开发环境下，如果<code>pages/about.js</code>被优化，会包含静态优化指示符。</p><h4 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>如果你在<code>getInitialProps</code>中有自定义<code>App</code>,这个优化将对所有页面关闭</li><li>如果你在<code>getInitialProps</code>中有自定义<code>Document</code>，确保在服务端渲染之前就已经检查<code>ctx.req</code>已经被定义了。<code>ctx.req</code>在预渲染的时候是未定义的。</li></ul><h3 id="静态页面导出"><a href="#静态页面导出" class="headerlink" title="静态页面导出"></a>静态页面导出</h3><p>next export 允许你讲你的应用导出成静态 HTML，它可以独立允许，无需 Node.js 服务。</p><p>这个导出的应用支持几乎 Next.js 的所有特性，包括动态路由，预获取，预渲染和动态导入。</p><p>next export 的工作方式是将所有页面预渲染成 HTML；它基于 exportPathMap 的映射，exportPathMap 提供需要渲染成 HTML 的预定义路径。</p><blockquote><p>如果你的所有页面都没有 getInitialProps 你可能根本不需要 next export；next build 借助自动静态化已经足够。</p></blockquote><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>使用 Next.js 开发应用，然后运行：</p><pre><code>next build &amp;&amp; next export</code></pre><p>至此，你可能想要更新 package.json 的脚本：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"next build &amp;&amp; next export"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后只需要运行一次：</p><pre><code>npm run build</code></pre><p>然后你要的应用静态版本在 out 目录下</p><p>默认 next export 不需要任何配置。它会生成一个默认的 exportPathMap, exportPathMap 包含 pages 目录下的所有页面路由。</p><blockquote><p>为了学习更多关于 exportPathMap ，关注<a href="https://nextjs.org/docs/api-reference/next.config.js/exportPathMap" target="_blank" rel="noopener">exportPathMap API 文档</a></p></blockquote><h4 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>使用 next export,我们可以构建应用的 HTML 版本。在导出阶段我们将运行页面的 getInitialProps。context 对象的 req 和 res 字段在导出阶段将是空对象，因为没有服务器在运行。</li><li>在静态导出的时候你无法动态渲染 HTML，因为我们预先构建了 HTML 文件。当你不使用 next export 时，你的应用可以是静态生成和服务端渲染的混合体。你可以学习一下<a href="https://nextjs.org/docs/basic-features/pages" target="_blank" rel="noopener">pages 一节</a></li><li>API 路由不支持这个方法，因为它们不渲染 HTML。</li></ul><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>使用 Next.js 你可以将任何 React 页面变成 AMP 页面，只需最少的配置，而不需要离开 React。</p><p>你可以去<a href="https://amp.dev/" target="_blank" rel="noopener">amp.dev 官网</a>了解更多关于 AMP 的知识</p><h5 id="启用-AMP"><a href="#启用-AMP" class="headerlink" title="启用 AMP"></a>启用 AMP</h5><p>为了启用对页面 AMP 的支持，要了解更多关于 AMP 的配置，阅读<a href="https://nextjs.org/docs/api-reference/next/amp" target="_blank" rel="noopener">next/amp 的 API 文档</a></p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ul><li>只支持 CSS-in-JS，AMP 页面目前不支持 CSS 模块。你可以<a href="https://github.com/zeit/next.js/issues/10549" target="_blank" rel="noopener">贡献 CSS 模块给 Next.js</a></li></ul><h5 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h5><ul><li><a href="https://nextjs.org/docs/advanced-features/amp-support/adding-amp-components" target="_blank" rel="noopener">AMP 组件</a><br>使用 AMP 组件让你的页面更具交互性</li><li><a href="https://nextjs.org/docs/advanced-features/amp-support/amp-validation" target="_blank" rel="noopener">AMP 验证</a><br>学习更多关于 Next.js 如何验证 AMP 页面</li></ul><h4 id="添加-AMP-组件"><a href="#添加-AMP-组件" class="headerlink" title="添加 AMP 组件"></a>添加 AMP 组件</h4><p>AMP 社区提供了<a href="https://amp.dev/documentation/components/" target="_blank" rel="noopener">许多组件</a>使得 AMP 页面更交互性。Next.js 将自动导入页面上使用的 AMP 组件，并且不需要收到导入代码。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> amp<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyAmpPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Some time<span class="token punctuation">:</span> <span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-timeago</span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span>        <span class="token attr-name">datetime</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token punctuation">.</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-timeago</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyAmpPage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的案例使用了 amp-timeago 组件</p><p>默认，总是导入组件最近的版本。如果你想要自定义版本，你可以使用 next/head，如下案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Head <span class="token keyword">from</span> <span class="token string">"next/head"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> amp<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyAmpPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>          <span class="token attr-name">async</span>          <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amp-timeago<span class="token punctuation">"</span></span>          <span class="token attr-name">custom-element</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amp-timeago<span class="token punctuation">"</span></span>          <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.ampproject.org/v0/amp-timeago-0.1.js<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Some time<span class="token punctuation">:</span> <span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-timeago</span>        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>        <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span>        <span class="token attr-name">datetime</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>        <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token punctuation">.</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>amp-timeago</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyAmpPage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AMP-验证"><a href="#AMP-验证" class="headerlink" title="AMP 验证"></a>AMP 验证</h4><p>AMP 页面在开发期间使用<a href="https://www.npmjs.com/package/amphtml-validator" target="_blank" rel="noopener">amphtml-validator</a>自动验证。当你启动 Next.js 错误和警告都会出现在终端。</p><p>在静态 HTML 生成期间页面也会被验证，并且错误和警告也被打印在终端。任何 AMP 错误将导致 1 状态码退出，因为导出的不是一个有效的 AMP。</p><h4 id="静态导出-HTML-中的-AMP"><a href="#静态导出-HTML-中的-AMP" class="headerlink" title="静态导出 HTML 中的 AMP"></a>静态导出 HTML 中的 AMP</h4><p>当使用 next export 导出静态 HTML 预渲染页面，Next.js 检测如果页面支持 AMP，将根据下面改变导出行为。</p><p>例如，混合 AMP 页面 <code>pages/about.js</code>将导出：</p><ul><li><code>out/about.html</code> -带 React 客户端运行时渲染的 HTML 页面</li><li><code>out/about.amp.html</code> -AMP 页面</li></ul><p>如果<code>pages/about.js</code>只是 AMP 页面，将输出：</p><ul><li><code>out/about.html</code> - 优化过的 AMP 页面<br>Next.js 将自动插入 HTML 版本到你 AMP 版本页面，所以你不必这么做，比如：</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amphtml<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about.amp.html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>你页面的 AMP 版本将自动包括 HTML 页面的链接</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>canonical<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当为<code>pages/about.js</code>启动<a href="https://nextjs.org/docs/api-reference/next.config.js/exportPathMap#0cf7d6666b394c5d8d08a16a933e86ea" target="_blank" rel="noopener">exportTrailingSlash</a>导出页面：</p><ul><li><code>out/about/index.html</code> - HTML page</li><li><code>out/about.amp/index.html</code> - AMP page</li></ul><h4 id="TypeScript-1"><a href="#TypeScript-1" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>AMP 当前不支持内置的 TypeScript 类型，但是这里有它们的路线图<a href="https://github.com/ampproject/amphtml/issues/13791" target="_blank" rel="noopener">#13791</a></p><p>解决方案你可能需要手动创建<code>amp.d.ts</code>放到你项目中，并添加自定义类型<a href="https://stackoverflow.com/a/50601125" target="_blank" rel="noopener">描述</a></p><h3 id="自定义-Babel-配置"><a href="#自定义-Babel-配置" class="headerlink" title="自定义 Babel 配置"></a>自定义 Babel 配置</h3><p>Next.js 为你的应用包含 next/babel 预设，它包含编译 React 应用和服务端代码需要的一切。但是如果你想要扩展默认的 Babel 配置，是可能的。</p><p>开始，你只需要在你应用的顶层创建一个 .babelrc 文件，如果这个文件找到，我们将认为这是真理的源头，需要它定义 Next.js 的需求，是 next/babel 的预设。</p><p>这里是 .babelrc 文件的案例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"next/babel"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个 next/babel 预设包括：</p><ul><li>preset-env</li><li>preset-react</li><li>preset-typescript</li><li>plugin-proposal-class-properties</li><li>plugin-proposal-object-reset-spread</li><li>plugin-transform-runtime</li><li>styled-jsx</li></ul><p>为了配置这些预设插件，请不要添加它们到 presets 或者 plugins。而应该配置它们到 next/babel 预设中。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"presets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>      <span class="token string">"next/babel"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"preset-env"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"transform-runtime"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"styled-jsx"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"class-properties"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了学习每个配置更多有效的参数配置，访问这些文档站点。</p><blockquote><p>Next.js 使用当前的 Node.js 版本进行服务端编译。</p></blockquote><blockquote><p>preset-env 的 modules 参数配置应该一直是 false, 否则 将关闭 webpack 的代码拆分</p></blockquote><h3 id="自定义-PostCSS-配置"><a href="#自定义-PostCSS-配置" class="headerlink" title="自定义 PostCSS 配置"></a>自定义 PostCSS 配置</h3><p>Next.js 使用 PostCSS 为内置的 CSS 支持编译 CSS。</p><p>开箱即用，不需要任何配置，Next.js 使用下面的转换编译 CSS：</p><ol><li><a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a>自动添加供应商前缀给 CSS 规则（退回到 IE11）</li><li><a href="https://github.com/philipwalton/flexbugs" target="_blank" rel="noopener">扩浏览器的 Flexbox bugs</a>被修复使得它的行为和规范一致</li><li>新 CSS 特性将自动编译支持 IE11 的兼容</li></ol><ul><li><a href="所有属性">all Property</a></li><li><a href="断裂属性">Break Properties</a></li><li><a href="字体变化属性">font-variant Property</a></li><li><a href="间隙属性">Gap Properties</a></li><li><a href="媒体查询范围">Media Query Ranges</a></li></ul><p>默认，[自定义属性](CSS 变量)是不兼容 IE11</p><p>CSS 变量未编译，因为它还<a href="https://github.com/MadLittleMods/postcss-css-variables#caveats" target="_blank" rel="noopener">无法被安全的编译</a>。如果你一定要使用变量，考虑使用像 Sass 这样的变量，它被 Sass 给编译掉了。</p><blockquote><p>注意：为了支持<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/grid" target="_blank" rel="noopener">Grid Layout</a>, 你需要启用<code>grid: &quot;autoplace&quot;</code>自动前缀，看下面的自定义插件</p></blockquote><h4 id="自定义目标浏览器列表"><a href="#自定义目标浏览器列表" class="headerlink" title="自定义目标浏览器列表"></a>自定义目标浏览器列表</h4><p>Next.js 通过<a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">Browserslist</a>允许你配置目标浏览器列表(补充前缀和编译 css)</p><p>为了自定义 browserslist，在 package.json 中创建 browserslist 的 key：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">">0.3%"</span><span class="token punctuation">,</span> <span class="token string">"not ie 11"</span><span class="token punctuation">,</span> <span class="token string">"not dead"</span><span class="token punctuation">,</span> <span class="token string">"not op_mini all"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你可以使用<a href="https://browserl.ist/?q=%3E0.3%25%2C+not+ie+11%2C+not+dead%2C+not+op_mini+all" target="_blank" rel="noopener">browserl.ist</a>工具可视化你想要的浏览器</p><h4 id="CSS-模块"><a href="#CSS-模块" class="headerlink" title="CSS 模块"></a>CSS 模块</h4><p>支持 CSS 模块不需要任何配置。为文件启用 CSS 模块，请重命名文件为 .module.css 的扩展。</p><p>你可以学习关于[Next.js CSS 模块的支持]<a href="https://nextjs.org/docs/basic-features/built-in-css-support()" target="_blank" rel="noopener">https://nextjs.org/docs/basic-features/built-in-css-support()</a></p><h4 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h4><blockquote><p>警告：当你定义一个自定义 PostCSS 配置文件，Next.js 会完全禁止它的默认行为。确保你编译的所有功能都需要你手动配置，包括<a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a>。你需要手动安装你自定义配置中的所有插件，比如:<code>npm install postcss-flexbugs-fixes</code></p></blockquote><p>为了自定义 PostCSS 配置，在项目的根目录创建 postcss.config.json</p><p>Next.js 使用的默认配置：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token string">"postcss-flexbugs-fixes"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>      <span class="token string">"postcss-preset-env"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token string">"autoprefixer"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"flexbox"</span><span class="token punctuation">:</span> <span class="token string">"no-2009"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">"stage"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">"features"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"custom-properties"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：Next.js 也允许文件重命名成 .postcssrc.json，或者从 package.json 的 postcss key 中读取。</p></blockquote><p>也能通过 postcss.config.js 文件配置 PostCSS，当你想要根据环境来区别使用配置的时候很有用。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span>    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span>      <span class="token operator">?</span> <span class="token punctuation">[</span>          <span class="token string">"postcss-flexbugs-fixes"</span><span class="token punctuation">,</span>          <span class="token punctuation">[</span>            <span class="token string">"postcss-preset-env"</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>              autoprefixer<span class="token punctuation">:</span> <span class="token punctuation">{</span>                flexbox<span class="token punctuation">:</span> <span class="token string">"no-2009"</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              stage<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>              features<span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"custom-properties"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>      <span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// No transformations in development</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意： Next.js 也允许文件名重命名为 .postcssrc.js</p></blockquote><p>不要使用 <code>require()</code>来导入 PostCSS 插件，插件一定用字符串来提供。</p><blockquote><p>如果你的 postcss.config.js 需要在这个项目下支持其他非 Next.js 工具，你一定要使用客户操作的基于对象的格式</p></blockquote><h3 id="自定义-Server"><a href="#自定义-Server" class="headerlink" title="自定义 Server"></a>自定义 Server</h3><p>通常，你使用哪个 next start 来启动 next 服务。为了使用自定义路由模式，也可以百分百编程的方式启动服务。</p><blockquote><p>在决定使用自定义服务之前请思考下只有当 Next.js 的路由无法满足你 APP 要求时才能使用。自定义服务将会删除重要的性能优化，比如无服务器功能以及<a href="https://nextjs.org/docs/advanced-features/automatic-static-optimization" target="_blank" rel="noopener">自动静态优化</a></p></blockquote><p>看下下面的自定义服务案例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// server.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> createServer <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> next <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"next"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">!==</span> <span class="token string">"production"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span> dev <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> handle <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">getRequestHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Be sure to pass `true` as the second argument to `url.parse`.</span>    <span class="token comment" spellcheck="true">// This tells it to parse the query portion of the URL.</span>    <span class="token keyword">const</span> parsedUrl <span class="token operator">=</span> <span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname<span class="token punctuation">,</span> query <span class="token punctuation">}</span> <span class="token operator">=</span> parsedUrl<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">"/a"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      app<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token string">"/b"</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token operator">===</span> <span class="token string">"/b"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      app<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token string">"/a"</span><span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">handle</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> parsedUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"> Ready on http://localhost:3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>server.js 不会通过 babel 或者 webpack。确保文件的语法和源与你当前运行的 node 版本兼容。</p></blockquote><p>然后，为了运行自定义 server，你需要更新 scripts 和 package.json。比如</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"node server.js"</span><span class="token punctuation">,</span>  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"next build"</span><span class="token punctuation">,</span>  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production node server.js"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义服务使用以下导入将 Next.js 应用和 server 连接起来。<br>上面的 next 导入函数接收的是下面的参数对象：</p><ul><li>dev: Boolean - 是否在开发模式下启动 Next.js。 默认是 false</li><li>dir: String - Next.js 项目的路径，默认是.</li><li>quiet: Boolean - 隐藏包含服务信息的错误消息。默认是 false</li><li>conf: object - 这个对象和在 Next.config.js 使用的一样的对象，默认是{}</li></ul><p>返回的 app 可以让 Next.js 根据需求处理请求了</p><h4 id="关闭文件路由"><a href="#关闭文件路由" class="headerlink" title="关闭文件路由"></a>关闭文件路由</h4><p>默认，Next 用路径名匹配文件名来为在 pages 文件夹下的每个文件提供服务。如果你项目使用了自定义 server，这个行为可能会导致多个路径都可以为相同的内容提供服务，可能为 SEO 和用户体验造成问题。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  useFileSystemPublicRoutes<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>注意 useFileSystemPublicRoutes 是简单的让服务端渲染禁用了文件路由；客户端路由可能仍可以访问路由。当使用这个选项时，你应该避免使用手动编程的方式连接到页面</p></blockquote><blockquote><p>你可能还需要配置客户端路由，防止客户端跳转到这个文件路由。参考<a href="https://nextjs.org/docs/api-reference/next/router#routerbeforepopstate" target="_blank" rel="noopener">Router.beforePopState</a></p></blockquote><h3 id="自定义App"><a href="#自定义App" class="headerlink" title="自定义App"></a>自定义<code>App</code></h3><p>Next.js 使用 App 组件来初始化所有页面。你可以重写它并控制页面初始化。那些事情允许你做的：</p><ul><li>在不同页面之前持久化相同布局</li><li>当导航页面时保持状态</li><li>使用 componentDidCatch 来自定义错误处理</li><li>向页面注入额外的数据</li><li><a href="https://nextjs.org/docs/basic-features/built-in-css-support#adding-a-global-stylesheet" target="_blank" rel="noopener">添加全局 CSS</a></li></ul><p>为了重写默认的 App，创建如下的 <code>./pages/_app.js</code> 文件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// import App from 'next/app'</span><span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token punctuation">{</span><span class="token operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 只有在你每个页面都有阻塞数据请求的需求是才取消这些代码注释</span><span class="token comment" spellcheck="true">// 它会阻止自动静态优化，造成你应用的每个页面都被服务端渲染</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// MyApp.getInitialProps = async (appContext) => {</span><span class="token comment" spellcheck="true">//   // calls page's `getInitialProps` and fills `appProps.pageProps`</span><span class="token comment" spellcheck="true">//   const appProps = await App.getInitialProps(appContext);</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//   return { ...appProps }</span><span class="token comment" spellcheck="true">// }</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyApp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个 Component 原型是当前激活的页面，所以你在路由之间跳转，Component 都会变成这个新页面。然而，你发送给 Component 的任何属性都会被这个页面接收。</p><p>pageProps 是页面预加载初始属性的对象。如果你页面没有使用 getInitialProps 则是一个空对象。</p><blockquote><p>在你的 App 中添加 getInitialProps 将禁止自动静态优化</p></blockquote><h4 id="TypeScript-2"><a href="#TypeScript-2" class="headerlink" title="TypeScript"></a>TypeScript</h4><p>如果你使用 TypeScript，看下<a href="https://nextjs.org/docs/basic-features/typescript#custom-app" target="_blank" rel="noopener">TypeScript 文档</a></p><h3 id="自定义-Document"><a href="#自定义-Document" class="headerlink" title="自定义 Document"></a>自定义 <code>Document</code></h3><p>自定义 Document 通常被用来增加你应用的 html 和 body 标签。这非常有必要，因为 Next.js 页面需要跳过包括 document 的标签定义。</p><p>一个自定义 Document 可以包含 getInitialProps 来表达同步的服务端数据渲染要求。</p><p>为了重写默认的 Document，创建<code>./pages/_document.js</code>文件下面那样继承 Document 类：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Document<span class="token punctuation">,</span> <span class="token punctuation">{</span> Html<span class="token punctuation">,</span> Head<span class="token punctuation">,</span> Main<span class="token punctuation">,</span> NextScript <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/document"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> initialProps <span class="token operator">=</span> <span class="token keyword">await</span> Document<span class="token punctuation">.</span><span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>initialProps <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Html</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Head</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Main</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>NextScript</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Html</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyDocument<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><Html>, <Head />, <Main /> and <NextScript /> 页面正确渲染必须的。<p>自定义的 attributes 允许作为 props，比如 lang</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 ctx 对象等价于 getInitialProps 接收的，但是多了一项：</p><ul><li>renderPage: Function - 运行实际 React 渲染逻辑（同步）的回调。包装这个函数用来支持服务端渲染包装器比如 Aphrodite 的<a href="https://github.com/Khan/aphrodite#server-side-rendering" target="_blank" rel="noopener">renderStatic</a>非常有用。</li></ul><h4 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>Document 只在服务端渲染，事件处理器不会工作(onClick)</li><li><code>&lt;Main /&gt;</code>外部的 React 组件不会被浏览器初始化。不要在这里添加应用逻辑。如果你需要在页面之间共享组件（比如菜单栏目和工具栏目），尝试使用 App 组件来替代</li><li>Document 的 getInitialProps 函数不会再客户端转化期间调用，也不会在静态优化页面时执行。</li><li>确认是否在 getInitialProps 中定义了 ctx.req 和 ctx.res。当页面被自动静态化或者 next export 导出时，这些变量都是未定义的。</li><li>常见的错误包括添加 title 和 Head 标签或者使用 styled-jsx。因为在 <code>pages/_document.js</code>中避免它们，否则会造成意外行为。</li></ul><h4 id="自定义-renderPage"><a href="#自定义-renderPage" class="headerlink" title="自定义 renderPage"></a>自定义 renderPage</h4><blockquote><p>需要注意的是你使用自定义 renderPage 的唯一原因应该是使用 css-in-js 库时，这些库包裹应用程序以正确的显示服务端渲染。</p></blockquote><p>它采用一个 options 对象作为进一步自定义的参数：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Document <span class="token keyword">from</span> <span class="token string">"next/document"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyDocument</span> <span class="token keyword">extends</span> <span class="token class-name">Document</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> originalRenderPage <span class="token operator">=</span> ctx<span class="token punctuation">.</span>renderPage<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>renderPage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>      <span class="token function">originalRenderPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 包裹整个react树有用</span>        enhanceApp<span class="token punctuation">:</span> <span class="token punctuation">(</span>App<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> App<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 对每一页的基础包裹有用</span>        enhanceComponent<span class="token punctuation">:</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Component<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 运行父类的getInitialProps，它现在包括自定义的renderPage</span>    <span class="token keyword">const</span> initialProps <span class="token operator">=</span> <span class="token keyword">await</span> Document<span class="token punctuation">.</span><span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> initialProps<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyDocument<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><h4 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h4><p>404 页面可能访问非常频繁。每次访问都服务端渲染会增加 Next.js 服务的负载。这样会导致成本增加和很低的用户体验。</p><p>为了避免上诉的陷阱，Next.js 添加了静态的 404 页面，默认不需要任何额外的文件。</p><h5 id="自定义-404-页面"><a href="#自定义-404-页面" class="headerlink" title="自定义 404 页面"></a>自定义 404 页面</h5><p>为了自定义 404 页面，你可以创建一个<code>pages/404.js</code>文件。这个文件在构建时静态生成。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// pages/404.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Custom404</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token number">404</span> <span class="token operator">-</span> Page Not Found<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="500-页面"><a href="#500-页面" class="headerlink" title="500 页面"></a>500 页面</h4><p>默认 Next.js 提供 500 错误页，样式和默认的 404 页面一样。这个页面没有自动静态化，允许报告服务端错误。这是为什么 404 和 500（其他错误）被分隔的原因。</p><h5 id="自定义错误页面-1"><a href="#自定义错误页面-1" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h5><p>500 错误被客户端和服务端的 Error 组件处理掉。如果你希望重写它，定义错误文件<code>pages/_error.js</code>并添加以下代码：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">{</span> statusCode <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>statusCode        <span class="token operator">?</span> <span class="token template-string"><span class="token string">`An error </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>statusCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> occurred on server`</span></span>        <span class="token punctuation">:</span> <span class="token string">"An error occurred on client"</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Error<span class="token punctuation">.</span>getInitialProps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> res<span class="token punctuation">,</span> err <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> statusCode <span class="token operator">=</span> res <span class="token operator">?</span> res<span class="token punctuation">.</span>statusCode <span class="token punctuation">:</span> err <span class="token operator">?</span> err<span class="token punctuation">.</span>statusCode <span class="token punctuation">:</span> <span class="token number">404</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> statusCode <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Error<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>pages/_error.js</code>只在生产环境中被使用。在开发环境下你会获得完整的错误堆栈来知道原始错误出现在哪里。</p></blockquote><h5 id="复用内置的错误页面"><a href="#复用内置的错误页面" class="headerlink" title="复用内置的错误页面"></a>复用内置的错误页面</h5><p>如果要渲染内置的错误页，你可以导入 Error 组件：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Error <span class="token keyword">from</span> <span class="token string">"next/error"</span><span class="token punctuation">;</span><span class="token keyword">import</span> fetch <span class="token keyword">from</span> <span class="token string">"node-fetch"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getServerSideProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/zeit/next.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> errorCode <span class="token operator">=</span> res<span class="token punctuation">.</span>ok <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token punctuation">:</span> res<span class="token punctuation">.</span>statusCode<span class="token punctuation">;</span>  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">{</span> errorCode<span class="token punctuation">,</span> stars<span class="token punctuation">:</span> json<span class="token punctuation">.</span>stargazers_count <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> errorCode<span class="token punctuation">,</span> stars <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Error</span> <span class="token attr-name">statusCode</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>errorCode<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Next stars<span class="token punctuation">:</span> <span class="token punctuation">{</span>stars<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个错误组件同样也接收 title 作为属性，如果你想传递除了 statusCode 的文本消息。</p><h3 id="src目录"><a href="#src目录" class="headerlink" title="src目录"></a><code>src</code>目录</h3><p>也可以添加页面到<code>src/pages</code>下来替代根目录的 pages 目录。</p><p>src 目录在许多应用中都非常常用，Next.js 默认也支持</p><h4 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><code>src/pages</code>如果 pages 在根目录下存在，它将被忽略</li><li>像 next.config.js 和 tsconfig.json 文件都应该放到根目录下，迁移它们到 src 目录不会工作。public 目录也是如此。</li></ul><h3 id="多空间-zone"><a href="#多空间-zone" class="headerlink" title="多空间(zone)"></a>多空间(zone)</h3><p>一个空间是一个 Next.js 应用的部署。你应该有多个空间并合并它们成单个应用。</p><p>例如，假如你有以下应用程序：</p><ul><li>用于<code>/blog/**</code>的应用</li><li>另一个用于提供所有其他页面的应用</li></ul><p>使用多空间的支持，你可以合并两个应用成单个，允许你的用户在同一个 URL 上浏览它们，但是你可以独立开发和部署它们。</p><h4 id="如何定义一个空间-zone"><a href="#如何定义一个空间-zone" class="headerlink" title="如何定义一个空间(zone)"></a>如何定义一个空间(zone)</h4><p>没有特殊的 zone api，你只需要遵守下面的条件：</p><ul><li>确保仅将你应用需要的页面保留，意味着你不需要其他应用的页面，例如 应用 A 有<code>/blog</code>，应用 B 不会有</li><li>确保添加 assetPrefix 来避免静态资源的冲突</li></ul><h4 id="如何合并多个-zone"><a href="#如何合并多个-zone" class="headerlink" title="如何合并多个 zone"></a>如何合并多个 zone</h4><p>你可以使用 HTTP 代理合并多个 zones</p><p>对于 Vercel，你可以使用一个 now.json 来部署多个应用。它允许你定义多个应用的路由：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"builds"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"blog/package.json"</span><span class="token punctuation">,</span> <span class="token string">"use"</span><span class="token punctuation">:</span> <span class="token string">"@now/next"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"home/package.json"</span><span class="token punctuation">,</span> <span class="token string">"use"</span><span class="token punctuation">:</span> <span class="token string">"@now/next"</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"routes"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/blog/_next(.*)"</span><span class="token punctuation">,</span> <span class="token string">"dest"</span><span class="token punctuation">:</span> <span class="token string">"blog/_next$1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/blog(.*)"</span><span class="token punctuation">,</span> <span class="token string">"dest"</span><span class="token punctuation">:</span> <span class="token string">"blog/blog$1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"(.*)"</span><span class="token punctuation">,</span> <span class="token string">"dest"</span><span class="token punctuation">:</span> <span class="token string">"home$1"</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以使用上面的路由集合来配置代理服务的路由，比如 部署博客应用到 <code>https://blog.example.com</code>，然后首页应用部署到<code>https://home.example.com</code>。最后将两个应用添加到代理服务<code>https://example.com</code></p><h2 id="升级指南"><a href="#升级指南" class="headerlink" title="升级指南"></a>升级指南</h2><h3 id="升级从-8-到-9"><a href="#升级从-8-到-9" class="headerlink" title="升级从 8 到 9"></a>升级从 8 到 9</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><strong>在 Vercel 生产部署</strong></p><p>如果你之前为了动态路由在你的 now.json 文件中配置了 routes，当升级 Next.js9 的新动态路由功能时，这些规则可以被删除了。</p><p>Next.js 9 的动态路由是自动在 Now 上配置的，并不要求任何 now.json 的自定义</p><p>你可以阅读<a href="https://nextjs.org/docs/routing/dynamic-routes" target="_blank" rel="noopener">动态路由更多信息</a></p><p><strong>检查自定义的(<code>pages/_app.js</code>)</strong></p><p>如果你之前拷贝了自定义<code>&lt;app&gt;</code>的案例，你可以要删除你的 getInitialProps。</p><p>若有可能从<code>pages/_app.js</code>删除 getInitialProps，这是迁移 Next.js 新功能的关键。</p><p>下面的 getInitialProps 不做任何事情，可以删除掉</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token keyword">extends</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Remove me, I do nothing!</span>  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getInitialProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Component<span class="token punctuation">,</span> ctx <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pageProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Component<span class="token punctuation">.</span>getInitialProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>      pageProps <span class="token operator">=</span> <span class="token keyword">await</span> Component<span class="token punctuation">.</span><span class="token function">getInitialProps</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> pageProps <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ... etc</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重大变化"><a href="#重大变化" class="headerlink" title="重大变化"></a>重大变化</h4><p><strong><code>@zeit/next-typescript</code>不再需要</strong></p><p>Next.js 将忽略用法<code>@zeit/next-typescript</code>并警告你删除它。请从 next.config.js 中删除这个插件。</p><p>如果存在，从你自定义的.babelrc 中删除<code>@zeit/next-typescript/babel</code>的引用。</p><p>你的 next.config.js 的<code>fork-ts-checker-webpack-plugin</code>应该被删除</p><p>next 包发布了 TypeScript 定义，所以你需要卸载<code>@types/next</code>，否则会冲突。</p><p>它们的类型也有些不同：</p><blockquote><p>社区创建的列表帮助你升级，如果你其他不同的，请给这个 list 提 pull 请求，帮助其他人。</p></blockquote><p>From：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> NextContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NextAppContext<span class="token punctuation">,</span> DefaultAppIProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/app"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NextDocumentContext<span class="token punctuation">,</span> DefaultDocumentIProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/document"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>to</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> NextPageContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppContext<span class="token punctuation">,</span> AppInitialProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/app"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> DocumentContext<span class="token punctuation">,</span> DocumentInitialProps <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/document"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>现在 config key 是页面的特殊导出</strong></p><p>你可能不再从页面导出自定义的 config 变量(比如: <code>export { config }</code>/ <code>export const config ...</code>)。现在这个导出的变量被用哪个来指定页面级的 Next.js 配置，比如启用 AMP 和 API 路由功能。</p><p>你必须将非 Next.js 用途的 config 的导出重命名为其他</p><p><strong><code>next/dynamic</code>不再加载中渲染 loading…</strong></p><p>动态组件加载时默认不在渲染任何东西。你仍可以设置 loading 属性来自定义这个行为。</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">"next/dynamic"</span><span class="token punctuation">;</span><span class="token keyword">const</span> DynamicComponentWithCustomLoading <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    loading<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Loading<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>withAmp 已经被删除，为了导出配置对象</strong></p><p>Next.js 现在有页面级配置的概念，所以 withAmp 高级函数组件为了一致性可以删除。</p><p>这个改变可以通过在 Next.js 项目的根目录下运行这些命令自动完成迁移：</p><pre><code>curl -L https://github.com/zeit/next-codemod/archive/master.tar.gz | tar -xz --strip=2 next-codemod-master/transforms/withamp-to-config.js npx jscodeshift -t ./withamp-to-config.js pages/**/*.js</code></pre><p>手动执行这个迁移，或者想看下程序是如何做的，看下面：<br><strong>之前</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> withAmp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/amp"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>My AMP Page<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withAmp</span><span class="token punctuation">(</span>Home<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// or</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withAmp</span><span class="token punctuation">(</span>Home<span class="token punctuation">,</span> <span class="token punctuation">{</span> hybrid<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>之后</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>My AMP Page<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  amp<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// or</span>  amp<span class="token punctuation">:</span> <span class="token string">"hybrid"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>next export 不再导出页面成 index.html</strong></p><p>之前导出<code>pages/about.js</code>的结果是<code>out/about/index.html</code>。这个行为已经改成结果为<code>out/about.html</code>。</p><p>你可以通过创建带下面内容的 next.config.js 文件来还原之前的行为：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// next.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  exportTrailingSlash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>./pages/api/</code> 处理方式有些不一样</strong></p><p>页面中的<code>./pages/api/</code>被认为是 API 路由。这个目录的页面将不再被打包到客户端</p><h4 id="过时功能"><a href="#过时功能" class="headerlink" title="过时功能"></a>过时功能</h4><p><strong><code>next/dynamic</code> 已经废弃一次加载多个模块</strong><br><code>next/dynamic</code>一次加载多个模块的能力已经被废弃，为了更贴近 React 的实现(<code>React.lazy</code>和<code>Suspense</code>)。</p><p>依赖这个行为的代码更新相对简单！我们提供了 before/after 的案例来帮助你迁移应用。</p><p><strong>Before</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">"next/dynamic"</span><span class="token punctuation">;</span><span class="token keyword">const</span> HelloBundle <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> components <span class="token operator">=</span> <span class="token punctuation">{</span>      Hello1<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      Hello2<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> components<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> Hello1<span class="token punctuation">,</span> Hello2 <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello1</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello2</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">DynamicBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloBundle</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dynamic</span> <span class="token attr-name">Bundle"</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> DynamicBundle<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>after</strong></p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> dynamic <span class="token keyword">from</span> <span class="token string">"next/dynamic"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Hello1 <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Hello2 <span class="token operator">=</span> <span class="token function">dynamic</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"../components/hello2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">HelloBundle</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello1</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Hello2</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">DynamicBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloBundle</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Dynamic</span> <span class="token attr-name">Bundle"</span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> DynamicBundle<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="频繁问的问题"><a href="#频繁问的问题" class="headerlink" title="频繁问的问题"></a>频繁问的问题</h3><ul><li><p>那些浏览器支持<br>Next.js 使用<code>@babel/preset-env</code>开箱即用的支持 IE11 和其他现代浏览器。为了支持 IE11 添加全局的 Promise polyfill。</p><p>如果你自己的代码或者你使用的外部 npm 依赖用来你目标浏览器不支持的特性，你需要实现 polyfills。如果你需要实现 polyfills，这个<a href="https://github.com/zeit/next.js/tree/canary/examples/with-polyfills" target="_blank" rel="noopener">polyfills</a>案例演示了最佳实现方式</p></li><li><p>这个产品准备好了吗？<br>自 Next.js 成立依赖，一直为<a href="https://vercel.com" target="_blank" rel="noopener">https://vercel.com </a>提供支持。</p><p>我们对开发者的体验和用户端性能都非常满意，所以我们决定分享给社区。</p></li><li><p>有多大<br>客户端包带下应该每个应用衡量。最小的 Next 珠宝大约压缩后 65kb.</p></li><li><p>我如何改变内部 webpack 配置<br>Next.js 尽力消除 webpack 配置的开销，但是对于需要更多控制的高级情况，参考<a href="https://nextjs.org/docs/api-reference/next.config.js/custom-webpack-config" target="_blank" rel="noopener">自定义 webpack 配置文档</a></p></li><li><p>编译了那些语法功能？我如何修改它们？<br>我们跟随 v8。由于 v8 对 ES6 的 async 和 await 支持，所以我们编译它们。由于 v8 不支持 class 装饰器，我们也不会编译它们。</p><p>查看<a href="https://nextjs.org/docs/advanced-features/customizing-babel-config" target="_blank" rel="noopener">自定义 babel 配置</a>了解更多</p></li><li><p>为什么要用新 Router？<br>Next.js 特殊之处在于：</p><ul><li>路由不需要提前知道，我们不运送路由清单</li><li>路由一直是懒加载</li></ul></li><li><p>我如何获取数据？<br>由你决定，那你可以在你 React 组件中通过 fetch api 或者 SWR 获取远程数据；或者使用我们的数据获取方法来进行初始互数据的填充</p></li><li><p>我可以和 GraphQL 一起使用吗？<br>可以，这里是<a href="https://github.com/zeit/next.js/tree/canary/examples/with-apollo" target="_blank" rel="noopener">Apollo 案例</a></p></li><li><p>我可以和 Redux 一起使用吗？<br>可以，这里是<a href="https://github.com/zeit/next.js/tree/canary/examples/with-redux" target="_blank" rel="noopener">案例</a>。并且这里有其他的<a href="https://github.com/zeit/next.js/tree/canary/examples/with-redux-thunk" target="_blank" rel="noopener">带 thunk 的案例</a></p></li><li><p>静态资源我可以使用 CDN 吗？<br>可以，你可以在<a href="https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix" target="_blank" rel="noopener">这里</a>了解更多</p></li><li><p>我可以在 Next 中使用最喜爱的 js 库或者工具集吗？<br>自从我们第一个版本，我们有许多案例贡献。你可以在<a href="https://github.com/zeit/next.js/tree/canary/examples" target="_blank" rel="noopener">examples</a>目录下查看</p></li><li><p>这是受什么启发<br>我们设置的许多实现的目标都是 Guillermo Rauch 提出的<a href="https://rauchg.com/2014/7-principles-of-rich-web-applications" target="_blank" rel="noopener">7 个富 web 应用原则</a>之上</p><p>PHP 的易用性是一个很大的启发。我们认为 Next.js 应该是在很多场景下的替代品，否则你应该使用 PHP 输出 HTML。</p><p>与 PHP 不同，我们受益于 ES6 模块系统，每个页面导出的组件和函数都可以轻松的导入以进行懒惰评估或者测试。</p><p>在研究不涉及大量步骤的 React 服务端渲染配置项时，我们遇到了 React-page（已抛弃），这是 React Jordan Walke 的创建者与 Next.js 类似的方法</p></li></ul><h1 id="API-文档"><a href="#API-文档" class="headerlink" title="API 文档"></a>API 文档</h1><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>Next.js CLI 允许你启动，构建和导出那你的应用程序。</p><p>为了获得有效的 CLI 命令列表，在你的项目目录下运行这些命令：</p><pre><code>npx next -h</code></pre><p>(npx 出现在 npm5.2 及以上)<br>这个的输出应该是这样：</p><pre><code>Usage  $ next &lt;command&gt;Available commands  build, start, export, dev, telemetryOptions  --version, -v   Version number  --help, -h      Displays this messageFor more information run a command with the --help flag  $ next build --help</code></pre><p>你可以像 next 命令传递任何 <a href="https://nodejs.org/api/cli.html#cli_node_options_options" target="_blank" rel="noopener">node 参数</a></p><pre><code>NODE_OPTIONS=&#39;--throw-deprecation&#39; nextNODE_OPTIONS=&#39;-r esm&#39; nextNODE_OPTIONS=&#39;--inspect&#39; next</code></pre><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>next build 为你的应用穿件一个优化过的生产构建。每个路由输出的信息是这样的：</p><ul><li>Size -在客户端跳转到页面需要下载的资源大小。每个路由大小只包含它自己的依赖</li><li>First Load JS - 访问服务端这个页面需要下载的资源大小。所有共享的 JS 大小作为单独的指标</li></ul><p>第一次加载的颜色会是绿色，黄色，或者红色。为高性能一能用提供的是绿色。</p><h3 id="遥测"><a href="#遥测" class="headerlink" title="遥测"></a>遥测</h3><p>Next.js 收集有关常用使用的完全异步的遥测数据。<br>参与此匿名程序是可选的，如果你不喜欢共享这些数据你可以退出。</p><p><a href="https://nextjs.org/telemetry/" target="_blank" rel="noopener">读这个文档</a>进一步学习遥测</p><h2 id="next-router"><a href="#next-router" class="headerlink" title="next/router"></a>next/router</h2><p>路由管理器</p><h3 id="useRouter"><a href="#useRouter" class="headerlink" title="useRouter"></a>useRouter</h3><p>如果你想要在你应用的任何函数组件中访问<a href="https://nextjs.org/docs/api-reference/next/router#router-object" target="_blank" rel="noopener">路由管理器对象</a>，你应该使用 useRouter 钩子，看下下面的示例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ActiveLink</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children<span class="token punctuation">,</span> href <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">{</span>    marginRight<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    color<span class="token punctuation">:</span> router<span class="token punctuation">.</span>pathname <span class="token operator">===</span> href <span class="token operator">?</span> <span class="token string">"red"</span> <span class="token punctuation">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>href<span class="token punctuation">}</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>children<span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ActiveLink<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>useRouter 是一个 React 钩子，意味着它无法被使用在类中。你可以选择使用 <a href="https://nextjs.org/docs/api-reference/next/router#withrouter" target="_blank" rel="noopener">withRouter</a> 或者将 class 包装在函数组件中</p></blockquote><h4 id="router-object"><a href="#router-object" class="headerlink" title="router object"></a>router object</h4><p>下面是 router 对象的定义，useRouter 和 withRouter 都会返回改对象：</p><ul><li>pathname: String - 当前路由，它是<code>/pages</code>下页面的路径</li><li>query: Object - 查询参数被解析成对象，默认是 {}</li><li>asPath: String - 限制在浏览器中实际路径（包括查询）</li></ul><p>另外，Router API 也被包含在这个对象中。</p><blockquote><p>如果页面被静态优化，那么在预渲染期间这个 query 对象是空的</p></blockquote><h3 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a>withRouter</h3><p>如果 useRouter 不适合你，withRouter 同样可以添加相同的 router 对象给任何组件，这里是如何使用它：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> withRouter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span> router <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>router<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">withRouter</span><span class="token punctuation">(</span>Page<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Router-API"><a href="#Router-API" class="headerlink" title="Router API"></a>Router API</h3><p>Router 的 API，由<code>next/router</code>导出，api 定义如下。</p><h4 id="Router-push"><a href="#Router-push" class="headerlink" title="Router.push"></a>Router.push</h4><p>处理客户端过度，当<a href="https://nextjs.org/docs/api-reference/next/link" target="_blank" rel="noopener">next/link</a>不够用的时候，这个方法非常有用。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span>Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>url - 导航的 URL。它通常是页面的名字</li><li>as - 显示到浏览器上 URL 的可选装饰器，默认是 url</li><li>options - 具有以下配置选项的可选对象<ul><li>shallow: 只更新当前页面的路径，而不重新运行 getStaticProps，getServerSideProps 或者 getInitialProps。默认是 false</li></ul></li></ul><blockquote><p>对于外部 URL，你不需要使用 Router，window.location 是更适合这些情况。</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>导航到<code>pages/about.js</code>这个预定义路由：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/about"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>导航到<code>pages/post/[pid].js</code>这样的动态路由：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/post/[pid]"</span><span class="token punctuation">,</span> <span class="token string">"/post/abc"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      Click me    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带-URL-对象"><a href="#带-URL-对象" class="headerlink" title="带 URL 对象"></a>带 URL 对象</h4><p>你可以像<code>next/link</code>那样的方式带 URL 对象。适用 url 和 as 参数：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  Router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    pathname<span class="token punctuation">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>    query<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Zeit"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ReadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      Click <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>handler<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span> to read more    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ReadMore<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Router-replace"><a href="#Router-replace" class="headerlink" title="Router.replace"></a>Router.replace</h4><p>类似于<code>next/link</code>的 replace 属性，Router.replace 将阻止添加新的 URL 到 history 堆栈，看下下面的实例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span>Router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Router.replace 的 API 和 Router.push 的用法完全相同</p><h4 id="Router-beforePopState"><a href="#Router-beforePopState" class="headerlink" title="Router.beforePopState"></a>Router.beforePopState</h4><p>在某些情况下（举例，如果使用的是自定义 Server），你可能希望监听<a href="https://developer.mozilla.org/en-US/docs/Web/Events/popstate" target="_blank" rel="noopener">弹出状态</a>并想在路由管理执行动作之前做些事情。</p><p>你可以使用它来操作请求，或者强制 SSR 刷新，如下案例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span>Router<span class="token punctuation">.</span><span class="token function">beforePopState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token punctuation">,</span> <span class="token keyword">as</span><span class="token punctuation">,</span> options <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 我只想允许这两个路由</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">as</span> <span class="token operator">!==</span> <span class="token string">"/"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">as</span> <span class="token operator">!==</span> <span class="token string">"/other"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让SSR呈现错误路由为404</span>    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token keyword">as</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Router.beforePopState(cb: () =&gt; boolean)</code></p><ul><li>cb -在传入的 popstate 事件上运行这个函数。这个函数接收事件状态，该事件是具有以下属性的对象：<ul><li>url: String - 新状态的路由。通常是页面的名字</li><li>as: String - 显示在浏览器的 url</li><li>options: Object - Router.push 发送的额外选项</li></ul></li></ul><p>如果你传递给 beforePopState 的函数返回了 false,Router 将不处理 popstate 并且 你将响应处理它。看<a href="https://nextjs.org/docs/advanced-features/custom-server#disabling-file-system-routing" target="_blank" rel="noopener">禁止文件路由</a></p><h4 id="Router-events"><a href="#Router-events" class="headerlink" title="Router.events"></a>Router.events</h4><p>你可以监听发生在 Router 内部的不同事件。这里是支持的事件列表：</p><ul><li>routeChangeStart(url) - 当路由开始变化</li><li>routeChangeComplete(url) - 当路由变化完成</li><li>routeChangeError(err, url) - 当改变路由时发生错误或者路由加载被取消<ul><li>err.cancelled - 表明导航是否被取消</li></ul></li><li>beforeHistoryChange(url) - 只在浏览器 history 变化之前触发</li><li>hashChangeStart(url) - hash 值将发生变化但页面不变化</li><li>hashChangeComplete(url) - 当 has 变化完成页面不变化</li></ul><blockquote><p>这里的 URL 是显示在浏览器的 url。如果你调用<code>Router.push(url, as)</code>，然后这个 url 值将是 as 的值</p></blockquote><p>例如，监听路由事件 routeChangeStart：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token keyword">const</span> handleRouteChange <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"App is changing to: "</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"routeChangeStart"</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你不在想监听这个事件，使用 off 函数取消订阅：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span>Router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"routeChangeStart"</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果路由加载被取消（举例，通过快速的连续点击两次链接），routeChangeError 将触发。并且传入的 err 将包含 cancelled 为 true，如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span>Router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"routeChangeError"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>cancelled<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Route to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was cancelled!`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路由事件应该在页面被挂载的时候注册（useEffect 或者 componentDidMount/ComponentWillUnmount)或者事件必定发生，如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"next/router"</span><span class="token punctuation">;</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> handleRouteChange <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"App is changing to: "</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"routeChangeStart"</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Router<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"routeChangeStart"</span><span class="token punctuation">,</span> handleRouteChange<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="next-head"><a href="#next-head" class="headerlink" title="next/head"></a>next/head</h2><p>我们暴露内置组件用于将元素添加到页面的顶部</p><pre><code>import Head from &#39;next/head&#39;function IndexPage() {  return (    &lt;div&gt;      &lt;Head&gt;        &lt;title&gt;My page title&lt;/title&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1.0, width=device-width&quot; /&gt;      &lt;/Head&gt;      &lt;p&gt;Hello world!&lt;/p&gt;    &lt;/div&gt;  )}export default IndexPage</code></pre><p>为了避免在你的<code>head</code>中使用重复标签，你可以用<code>key</code>属性，这样会保证一个标签只会渲染一次。例子如下</p><pre><code>import Head from &#39;next/head&#39;function IndexPage() {  return (    &lt;div&gt;      &lt;Head&gt;        &lt;title&gt;My page title&lt;/title&gt;        &lt;meta          name=&quot;viewport&quot;          content=&quot;initial-scale=1.0, width=device-width&quot;          key=&quot;viewport&quot;        /&gt;      &lt;/Head&gt;      &lt;Head&gt;        &lt;meta          name=&quot;viewport&quot;          content=&quot;initial-scale=1.2, width=device-width&quot;          key=&quot;viewport&quot;        /&gt;      &lt;/Head&gt;      &lt;p&gt;Hello world!&lt;/p&gt;    &lt;/div&gt;  )}export default IndexPage</code></pre><p>在这个例子中只有第二个会被渲染</p><blockquote><p>卸载组件时会清除在<code>head</code>上的内容，保证每个页面需要的<code>head</code>都是干净完整定义，不用关心会有其他页面的 Head 干扰它</p></blockquote><blockquote><p><code>title</code>和<code>meta</code>元素是<code>Head</code>的直接子组件，或者包裹在<code>&lt;React.Fragment&gt;</code>下，否则 meta 标签不会正确的被服务端渲染找到</p></blockquote><h2 id="next-amp"><a href="#next-amp" class="headerlink" title="next/amp"></a>next/amp</h2><blockquote><p>AMP 支持是我们的一个高级特性，你可以进一步<a href="https://nextjs.org/docs/advanced-features/amp-support/introduction" target="_blank" rel="noopener">阅读</a></p></blockquote><p>为了启用 AMP，添加下面的配置给你的页面：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> amp<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个 amp 配置接收下面的值：</p><ul><li>true -页面只是 AMP</li><li>‘hybird’ - 页面只有两个版本，AMP 和 HTML</li></ul><h3 id="AMP-第一页"><a href="#AMP-第一页" class="headerlink" title="AMP 第一页"></a>AMP 第一页</h3><p>看下面的案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> amp<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>My AMP About Page<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> About<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面页面只是 AMP,意味着：</p><ul><li>该页面没有 Next.js 或者 React 客户端运行时</li><li>该页面使用<a href="https://github.com/ampproject/amp-toolbox/tree/master/packages/optimizer" target="_blank" rel="noopener">AMP 优化器</a>自动优化，这个优化器用 AMP 缓存（将性能多提高 42%）</li><li>这个页面有优化的用户可访问版本，和未优化过的搜索引擎索引的版本</li></ul><h3 id="混合-AMP-页面"><a href="#混合-AMP-页面" class="headerlink" title="混合 AMP 页面"></a>混合 AMP 页面</h3><p>看下面的案例：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useAmp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next/amp"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> amp<span class="token punctuation">:</span> <span class="token string">"hybrid"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">About</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> isAmp <span class="token operator">=</span> <span class="token function">useAmp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>My AMP About Page<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>isAmp <span class="token operator">?</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>amp-img</span>          <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>          <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span>          <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/my-img.jpg<span class="token punctuation">"</span></span>          <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a</span> <span class="token attr-name">cool</span> <span class="token attr-name">image"</span>          <span class="token attr-name">layout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responsive<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/my-img.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a</span> <span class="token attr-name">cool</span> <span class="token attr-name">image"</span> <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> About<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的页面是混合 AMP 页面，意味着：</p><ul><li>这个页面默认渲染成传统的 HTML，通过加?amp=1 渲染成 AMP HTML</li><li>页面的 AMP 版本只对 AMP 优化器应用了有效优化，所以它可以被搜索引擎索引</li></ul><p>这个页面使用了 useAmp 来区分两个模式，如果页面使用了 AMP，它的 React 钩子返回 true，否则 false。</p><h2 id="Data-Fetching"><a href="#Data-Fetching" class="headerlink" title="Data Fetching"></a>Data Fetching</h2><blockquote><p>建议: 你正在阅读新文档。<a href="https://nextjs.org/docs/old" target="_blank" rel="noopener">旧文档</a>仍然有效</p></blockquote><h3 id="getInitialProps"><a href="#getInitialProps" class="headerlink" title="getInitialProps"></a>getInitialProps</h3><p>推荐：<code>getStaticProps</code>或者<code>getServerSideProps</code><br>如果你使用 Next.js 9.3 或者更新，我们建议你使用它们来代替<code>getInitialProps</code><br>这两个新获取数据的方法允许在静态生成和服务端渲染时选择粒度更细。更多信息看<a href="https://nextjs.org/docs/basic-features/pages" target="_blank" rel="noopener">Pages</a>和<a href="https://nextjs.org/docs/basic-features/data-fetching" target="_blank" rel="noopener">Data fetching</a></p><p><strong>不贴 Examples</strong><br><code>getInitialProps</code>启用页面中的服务端渲染，并允许你初始化数据填充。这意味着从服务端过来的页面携带了已经填充好的数据了。它对<a href="https://en.wikipedia.org/wiki/Search_engine_optimization" target="_blank" rel="noopener">SEO</a>非常友好。</p><blockquote><p><code>getInitialProps</code> 将禁用自动静态优化</p></blockquote><p>它是一个添加到任何页面的静态异步函数。看下面这些示例</p><pre><code>import fetch from &#39;isomorphic-unfetch&#39;function Page({ stars }) {  return &lt;div&gt;Next stars: {stars}&lt;/div&gt;}Page.getInitialProps = async ctx =&gt; {  const res = await fetch(&#39;https://api.github.com/repos/zeit/next.js&#39;)  const json = await res.json()  return { stars: json.stargazers_count }}export default Page</code></pre><p>或者使用 class 组件</p><pre><code>import React from &#39;react&#39;import fetch from &#39;isomorphic-unfetch&#39;class Page extends React.Component {  static async getInitialProps(ctx) {    const res = await fetch(&#39;https://api.github.com/repos/zeit/next.js&#39;)    const json = await res.json()    return { stars: json.stargazers_count }  }  render() {    return &lt;div&gt;Next stars: {this.props.stars}&lt;/div&gt;  }}export default Page</code></pre><p><code>getInitialProps</code>用来异步获取数据，然后填充到<code>props</code>上<br>当服务端渲染时<code>getInitialProps</code>返回的数据是被序列化的。类似于<code>JSON.stringify</code>。保证返回的对象是一个 Plain 对象，而不是<code>Date</code>, <code>Map</code> or <code>Set</code><br>对于初始化页面的加载，<code>getInitialProps</code>将只在服务端执行。只有当页面间跳转<code>next/link</code>或者使用<code>next/router</code>会在客户端执行。</p><h3 id="Context-Object"><a href="#Context-Object" class="headerlink" title="Context Object"></a>Context Object</h3><p>getInitialProps 接收单个 context,带有下面属性：</p><ul><li>pathname - 当前路由。是<code>/pages</code>页面的路径</li><li>query - URL 的 query 部分字符串被解析成对象</li><li>asPath - 展示在浏览器中的真实地址</li><li>req - HTTP 请求对象（只在服务端）</li><li>res - HTTP 响应对象（只在服务端）</li><li>err - 在渲染期间的错误对象</li></ul><h3 id="Caveats"><a href="#Caveats" class="headerlink" title="Caveats"></a>Caveats</h3><ul><li>getInitialProps 无法被使用到子组件中，只能被页面导出</li><li>如果你某些模块只在 getInitialProps 服务端使用，保证<a href="https://arunoda.me/blog/ssr-and-server-only-modules" target="_blank" rel="noopener">正确导入它们</a>，否则就会降低 app 下载速度。</li></ul><h3 id="TypeScript-3"><a href="#TypeScript-3" class="headerlink" title="TypeScript"></a>TypeScript</h3><p>如果你使用 TypeScript,你可以在函数组件中使用 NextPage 类型</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> NextPage <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  userAgent<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Page<span class="token punctuation">:</span> NextPage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> userAgent <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>Your user agent<span class="token punctuation">:</span> <span class="token punctuation">{</span>userAgent<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>Page<span class="token punctuation">.</span>getInitialProps <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> req <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> userAgent <span class="token operator">=</span> req <span class="token operator">?</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"user-agent"</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> userAgent <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Page<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于 React.Component，你可以使用 NextPageContext：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> NextPageContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"next"</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  userAgent<span class="token operator">?</span><span class="token punctuation">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Props</span><span class="token punctuation">></span></span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> <span class="token keyword">async</span> <span class="token function">getInitialProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> req <span class="token punctuation">}</span><span class="token punctuation">:</span> NextPageContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> userAgent <span class="token operator">=</span> req <span class="token operator">?</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"user-agent"</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> userAgent <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> userAgent <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>Your user agent<span class="token punctuation">:</span> <span class="token punctuation">{</span>userAgent<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="next-config-js"><a href="#next-config-js" class="headerlink" title="next.config.js"></a>next.config.js</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>想要自定义 next.js 的高级行为，你可以在项目的根目录下创建 next.config.js（在 package.json 旁边）。</p><p>next.config.js 是 Node.js 的常规模块，而不是 json 文件。它被 Next.js 的服务和它的构建阶段使用，并不会再浏览器构建时使用。</p><p>在下面的实例中：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 在这里配置选项 */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>你也可以使用函数：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>phase<span class="token punctuation">,</span> <span class="token punctuation">{</span> defaultConfig <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 在这里配置选项 */</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phase 是已经加载配置的当前上下文。你可以在<a href="https://github.com/zeit/next.js/blob/canary/packages/next/next-server/lib/constants.ts#L1-L4" target="_blank" rel="noopener">这里</a>看到有哪些 Phases。Phases 可以从 next/constants 导入：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> PHASE_DEVELOPMENT_SERVER <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"next/constants"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>phase<span class="token punctuation">,</span> <span class="token punctuation">{</span> defaultConfig <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>phase <span class="token operator">===</span> PHASE_DEVELOPMENT_SERVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/* 只在开发时用的配置 */</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 除了开发环境下的其他所有阶段的配置*/</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>带注释的行是让你可以放配置的地方。</p><p>但是所有的配置都不强制要求，不需要知道每个配置都是干什么的。相反，你搜索你需要的属性去启用和修改，它将会显示你想要的结果。</p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>为了添加环境变量给 JS bundle，打开 next.config.js 文件并添加 env 配置：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  env<span class="token punctuation">:</span> <span class="token punctuation">{</span>    customKey<span class="token punctuation">:</span> <span class="token string">"my-value"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在你可以在你的代码中访问 process.env.customKey。例如：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span>The value <span class="token keyword">of</span> customKey is<span class="token punctuation">:</span> <span class="token punctuation">{</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>customKey<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> Page<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next.js 将在构建时使用 my-value 替换 process.env.customKey。尝试对 process.env 进行解构不会工作，因为 webpack <a href="https://webpack.js.org/plugins/define-plugin/" target="_blank" rel="noopener">DefinePlugin</a> 的性质。</p><p>例如，下面一行</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>The value <span class="token keyword">of</span> customKey is<span class="token punctuation">:</span> <span class="token punctuation">{</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>customKey<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会被替换成：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>The value <span class="token keyword">of</span> customKey is<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"my-value"</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义页面扩展"><a href="#自定义页面扩展" class="headerlink" title="自定义页面扩展"></a>自定义页面扩展</h3><p>和<a href="https://github.com/zeit/next.js/tree/canary/packages/next-mdx" target="_blank" rel="noopener">@next/mdx</a>的作用一样，mdx 支持页面以文件.mdx 结尾。你可以配置 pages 目录下那些扩展可以认为是页面。</p><p>打开 next.config.js 并添加 pageExtensions 配置：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  pageExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"mdx"</span><span class="token punctuation">,</span> <span class="token string">"jsx"</span><span class="token punctuation">,</span> <span class="token string">"js"</span><span class="token punctuation">,</span> <span class="token string">"ts"</span><span class="token punctuation">,</span> <span class="token string">"tsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="用资源前缀来支持-CDN"><a href="#用资源前缀来支持-CDN" class="headerlink" title="用资源前缀来支持 CDN"></a>用资源前缀来支持 CDN</h3><p>为了设置 CDN，你可以设置一个资源前缀并配置你 CDN 源去解析为 Next.js 项目运行所在的域名。</p><p>打开 next.config.js 并添加 assetPrefix 配置：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> isProd <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Use the CDN in production and localhost for development.</span>  assetPrefix<span class="token punctuation">:</span> isProd <span class="token operator">?</span> <span class="token string">"https://cdn.mydomain.com"</span> <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Next.js 将在加载的脚本自动使用你的前缀，但是对 public 目录下文件夹下的资源没有作用；如果你想要这写资源也用 CDN，你需要自己处理这个前缀。一种可以在你组件中因环境变量引入的前缀可以参考这个<a href="https://github.com/zeit/next.js/tree/canary/examples/with-universal-configuration-build-time" target="_blank" rel="noopener">案例</a></p><h3 id="构建目标"><a href="#构建目标" class="headerlink" title="构建目标"></a>构建目标</h3><p>Next.js 支持各种构建目标，每个都会让你的应用改变构建和运行方式。我们将在下面解释每个目标。</p><h4 id="server-目标"><a href="#server-目标" class="headerlink" title="server 目标"></a>server 目标</h4><blockquote><p>这是默认目标，然而，我们强烈建议使用无服务目标。无服务目标强制附加约束保证你走上正确的道路上。</p></blockquote><p>这个目标和 next start 以及自定义服务设置兼容（自定义服务强制支持）</p><p>你的应用将被构建并部署成一个整体。这是默认目标，你不需要任何动作就可以加入。</p><h4 id="serverless-目标"><a href="#serverless-目标" class="headerlink" title="serverless 目标"></a>serverless 目标</h4><blockquote><p>部署到<a href="https://zeit.co/" target="_blank" rel="noopener">ZEIT Now</a>将自动启用这个目标。你不需要自己加入。</p></blockquote><p>这个目标输出独立的页面，不需要作为一个整体服务。</p><p>它只兼容 next start 或者无服务部署平台（like ZEIT Now）–你无法使用自定义的服务 API。</p><p>为了加入这个目标。在你的 next.config.js 中用以下配置：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">"serverless"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="自定义-webpack-配置"><a href="#自定义-webpack-配置" class="headerlink" title="自定义 webpack 配置"></a>自定义 webpack 配置</h3><p>一些常见的功能可以作为插件使用：</p><ul><li><a href="https://github.com/zeit/next-plugins/tree/master/packages/next-sass" target="_blank" rel="noopener">@zeit/next-sass</a></li><li><a href="https://github.com/zeit/next-plugins/tree/master/packages/next-less" target="_blank" rel="noopener">@zeit/next-less</a></li><li><a href="https://github.com/zeit/next-plugins/tree/master/packages/next-stylus" target="_blank" rel="noopener">@zeit/next-stylus</a></li><li><a href="https://github.com/zeit/next-plugins/tree/master/packages/next-preact" target="_blank" rel="noopener">@zeit/next-preact</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/packages/next-mdx" target="_blank" rel="noopener">@next/mdx</a></li><li><a href="https://github.com/zeit/next.js/tree/canary/packages/next-bundle-analyzer" target="_blank" rel="noopener">@next/bundle-analyzer</a></li></ul><p>为了扩展 webpack 的使用，你可以在 next.config.js 定义一个函数扩展它的 config：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  webpack<span class="token punctuation">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">,</span> <span class="token punctuation">{</span> buildId<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> isServer<span class="token punctuation">,</span> defaultLoaders<span class="token punctuation">,</span> webpack <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注意: 我们在上面提供了 webpack，你不用在 require 它</span>    <span class="token comment" spellcheck="true">// 对 webpack 配置执行自定义化</span>    <span class="token comment" spellcheck="true">// 重点: 返回修改过的config</span>    config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>IgnorePlugin</span><span class="token punctuation">(</span><span class="token regex">/\/__tests__\//</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  webpackDevMiddleware<span class="token punctuation">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对webpack开发中间件配置执行自定义华</span>    <span class="token comment" spellcheck="true">// 重点: 返回修改过的config</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个 webpack 函数被执行两次，一次在服务端一次在客户端。它云心你通过 isServer 属性区分客户端和服务端的配置</p></blockquote><p>给 webpack 第二个参数是带下面属性的对象：</p><ul><li>buildId:String - 构建内 id，作为内部版本之间的标识</li><li>dev:Boolean - 指示编译是否将在开发环境中完成</li><li>isServer:Boolean - 如果是服务端编译是 true，否则就是客户端编译</li><li>defaultLoaders:Object - 默认加载器由 Next.js 内部提供：<ul><li>babel:Object - 默认 babel-loader 配置</li></ul></li></ul><p>defaultLoaders.babel 的使用案例：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 添加依赖于 babel-loader 的加载器的配置示例</span><span class="token comment" spellcheck="true">// 来源于 @next/mdx 插件:</span><span class="token comment" spellcheck="true">// https://github.com/zeit/next.js/tree/canary/packages/next-mdx</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  webpack<span class="token punctuation">:</span> <span class="token punctuation">(</span>config<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    config<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.mdx/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span>        options<span class="token punctuation">.</span>defaultLoaders<span class="token punctuation">.</span>babel<span class="token punctuation">,</span>        <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">"@mdx-js/loader"</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> pluginOptions<span class="token punctuation">.</span>options<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>Next.js 提供 gzip 压缩来压缩渲染内容和静态文件。压缩只在服务端工作。通常需要在 HTTP 代理上启用压缩(如 nginx)，减轻 Node.js 进程的负载。</p><p>为了禁止压缩，打开 next.config.js 来禁止 compress 配置：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  compress<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="静态优化指示器"><a href="#静态优化指示器" class="headerlink" title="静态优化指示器"></a>静态优化指示器</h3><p>当页面符合自动静态化优化条件时，我们会显示一个指示器让你知道。</p><p>它非常有用，如果页面符合条件，它会在开发环境下立刻执行自动静态优化并让你知道。</p><p>在某些情况下，指示器没用，比如在 electron 应用上工作时。为了在 next.config.js 删除并在 devIndicators 下禁用 autoPrerender 配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devIndicators<span class="token punctuation">:</span> <span class="token punctuation">{</span>    autoPrerender<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行时配置"><a href="#运行时配置" class="headerlink" title="运行时配置"></a>运行时配置</h3><blockquote><p>通常你想要为你的配置使用构建时环境变量。原因是因为运行时配置会增加渲染和初始化的开销，并且与自动静态化不兼容。<br>当使用 <a href="https://nextjs.org/docs/api-reference/next.config.js/build-target#serverless-target" target="_blank" rel="noopener">serverless 目标</a> 时运行时配置无效</p></blockquote><p>为了添加运行时配置到你的应用，打开 next.config.js 并添加 publicRuntimeConfig 和 serverRuntimeConfig 配置。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  serverRuntimeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Will only be available on the server side</span>    mySecret<span class="token punctuation">:</span> <span class="token string">"secret"</span><span class="token punctuation">,</span>    secondSecret<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>SECOND_SECRET<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// Pass through env variables</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  publicRuntimeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Will be available on both server and client</span>    staticFolder<span class="token punctuation">:</span> <span class="token string">"/static"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将只在服务端使用的运行时配置放到 serverRuntimeConfig 下</p><p>需要在客户端和服务端都要访问的变量应该放在 publicRuntimeConfig</p><blockquote><p>依赖 publicRuntimeConfig 的页面必须使用 getInitialProps 来退出自动静态化。没有 getInitialProps，运行时配置将不再任何页面或者页面中的组件上有效。</p></blockquote><p>使用 next/config 来访问运行时配置，比如</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> getConfig <span class="token keyword">from</span> <span class="token string">"next/config"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Only holds serverRuntimeConfig and publicRuntimeConfig</span><span class="token keyword">const</span> <span class="token punctuation">{</span> serverRuntimeConfig<span class="token punctuation">,</span> publicRuntimeConfig <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Will only be available on the server-side</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>serverRuntimeConfig<span class="token punctuation">.</span>mySecret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Will be available on both server-side and client-side</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>publicRuntimeConfig<span class="token punctuation">.</span>staticFolder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">MyImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>publicRuntimeConfig<span class="token punctuation">.</span>staticFolder<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/logo.png`</span></span><span class="token punctuation">}</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> MyImage<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="禁止-x-powered-by"><a href="#禁止-x-powered-by" class="headerlink" title="禁止 x-powered-by"></a>禁止 x-powered-by</h3><p>默认 Next.js 将添加 x-powered-by 到请求头。为了跳过它，可以在 next.config.js 中禁止 poweredByHeader 配置</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  poweredByHeader<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="禁止-ETag-生成"><a href="#禁止-ETag-生成" class="headerlink" title="禁止 ETag 生成"></a>禁止 ETag 生成</h3><p>Next.js 为每个页面默认生成<a href="https://en.wikipedia.org/wiki/HTTP_ETag" target="_blank" rel="noopener">etas</a>。你想要禁止给 HTML 页面生产 etag，具体取决于你的缓存策略。</p><p>打开 next.config.js 并禁止 generateEtags 选项：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  generateEtags<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置自定义构建目录"><a href="#设置自定义构建目录" class="headerlink" title="设置自定义构建目录"></a>设置自定义构建目录</h3><p>你可以对自定义构建目录制定名字来替换.next</p><p>打开 next.config.js 并添加 distDir 配置：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  distDir<span class="token punctuation">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>现在如果你运行 next build 将使用 build 来替换默认的.next 目录。</p><blockquote><p>distDir 不应该是你项目之外的目录。比如 ../build 是一个无效目录。</p></blockquote><h3 id="配置构建-ID"><a href="#配置构建-ID" class="headerlink" title="配置构建 ID"></a>配置构建 ID</h3><p>Next.js 使用构建时的生成的约定的 id 来识别你部署的应用是哪个版本。当在多服务上会造成麻烦（每个服务上都会执行 next build）。为了保证在各个构建之间保持同一个静态 id，你可以自己定义 id。</p><p>打开 next.config.js 并添加 generateBuildId 函数</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  generateBuildId<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// You can, for example, get the latest git commit hash here</span>    <span class="token keyword">return</span> <span class="token string">"my-build-id"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置-onDemandEntries"><a href="#配置-onDemandEntries" class="headerlink" title="配置 onDemandEntries"></a>配置 onDemandEntries</h3><p>Next.js 暴露了一些选项让你可以在开发中控制服务如何处理或者保持构建的页面内在内存中。</p><p>为了修改默认配置，打开 next.config.js 并添加 onDemandEntries 配置。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  onDemandEntries<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 服务器保存页面在缓存中的周期(ms)</span>    maxInactiveAge<span class="token punctuation">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 同时保存，不丢弃的页面数量</span>    pagesBufferLength<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="忽略-TypeScript-错误"><a href="#忽略-TypeScript-错误" class="headerlink" title="忽略 TypeScript 错误"></a>忽略 TypeScript 错误</h3><p>Next.js 默认报告 TypeScript 错误。如果你不想利用这个行为，可以选择其他方式，就像你编辑器集成一样，你可能想要禁止它。</p><p>打开 next.config.js 在 typescript 配置下启用 ignoreDevErrors 选项：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  typescript<span class="token punctuation">:</span> <span class="token punctuation">{</span>    ignoreDevErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当项目中仍存在 TypeScript 错误时，Next.js 生成构建仍旧会失败(next build)。</p><hr><p>如果你希望在应用有错误的情况下，Next.js 仍危险的运行生产代码，你可以禁止构建错误报告。</p><blockquote><p>确保在你构建和部署过程运行了类型检查，否则会非常危险。</p></blockquote><p>打开 next.config.js 并在 typescript 配置中启用 ignoreBuildErrors:</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  typescript<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// !! WARN !!</span>    <span class="token comment" spellcheck="true">// 如果你项目有类型错误，让产品构建成功非常危险</span>    <span class="token comment" spellcheck="true">// 很少需要用到这个选项，暴露此选项用于高级配置。</span>    <span class="token comment" spellcheck="true">// 你可能要寻找`ignoreDevErrors` 代替</span>    <span class="token comment" spellcheck="true">// !! WARN !!</span>    ignoreBuildErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exportPathMap"><a href="#exportPathMap" class="headerlink" title="exportPathMap"></a>exportPathMap</h3><blockquote><p>这个功能只为 next export 服务。如果想了解更多看<a href="https://nextjs.org/docs/advanced-features/static-html-export" target="_blank" rel="noopener">静态 HTML 导出</a></p></blockquote><p>开始例子，为带有下面页面的应用创建自定义的 exportPathMap：</p><ul><li><code>pages/index.js</code></li><li><code>pages/about.js</code></li><li><code>pages/post.js</code></li></ul><p>打开 next.config.js 并添加下面的 exportPathMap 配置：</p><pre><code>module.exports = {  exportPathMap: async function(    defaultPathMap,    { dev, dir, outDir, distDir, buildId }  ) {    return {      &#39;/&#39;: { page: &#39;/&#39; },      &#39;/about&#39;: { page: &#39;/about&#39; },      &#39;/p/hello-nextjs&#39;: { page: &#39;/post&#39;, query: { title: &#39;hello-nextjs&#39; } },      &#39;/p/learn-nextjs&#39;: { page: &#39;/post&#39;, query: { title: &#39;learn-nextjs&#39; } },      &#39;/p/deploy-nextjs&#39;: { page: &#39;/post&#39;, query: { title: &#39;deploy-nextjs&#39; } },    }  },}</code></pre><p>这些页面将会导出成 HTML 文件，例如，<code>/about</code>将变成<code>/about.html</code>。</p><p>exportPathMap 是一个接收两个参数的异步函数： 第一个是 defaultPathMap，Next.js 的默认 map。第二个参数对象带有下面属性：</p><ul><li>dev - 当 exportPathMap 被开发时调用为 true.当运行 next export 是 false。开发时，exportPathMap 被用来定义路由。</li><li>dir -项目目录的绝对路径</li><li>outDir - out 目录(由-o 配置)的绝对路径。dang dev 是 true，outDir 将是 null</li><li>distDir - <code>.next/</code>目录的绝对路径（由<a href="https://nextjs.org/docs/api-reference/next.config.js/setting-a-custom-build-directory" target="_blank" rel="noopener">distDir</a>配置）</li><li>buildId - 生成的内部版本号</li></ul><p>返回的对象是页面 map，key 是 pathname 并且 value 是接收下面字段的对象</p><ul><li>page: String - 在 pages 目录下的页面</li><li>query: Object - query 对象是当预渲染时传递给 getInitialProps，默认是 {}</li></ul><blockquote><p>导出的 pathname 也可以是文件名(比如, <code>/readme.md</code>)，但是如果它的内容与.html 不同，你需要响应内容时将头 Content-Type 设置成 <code>text/html</code>.</p></blockquote><h4 id="添加结尾斜杠"><a href="#添加结尾斜杠" class="headerlink" title="添加结尾斜杠"></a>添加结尾斜杠</h4><p>可以配置 Next.js 导出页面成 index.html 文件，并要求结尾加/。比如 <code>/about</code> 变成 <code>/about/index.html</code>，并且可以通过<code>/about/</code>路由。这是 Next.js 9 之前的默认行为</p><p>回退添加结尾/，打开 next.config.js 并启用 exportTrailingSlash 配置：</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  exportTrailingSlash<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><ul><li>在 getInitialProps 返回空对象<br><strong>为什么出现这个错误</strong><br>在页面组件中的<code>getInitialProps</code>返回空对象。它会取消自动静态化优化。如果你知道自己的操作并且知道后果。你可以在开发环境下忽略这个消息。<br><strong>修复的方法</strong> (我反正没看懂)<br>查看<code>getInitialProps</code>返回空对象的页面。如果它们存在传递的组件，你可能需要给更新高阶组件添加<code>getInitialProps</code><br><strong>有用链接</strong></li><li>[自动静态优化文档](Automatic Static Optimization Documentation)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
            <tag> docs </tag>
            
            <tag> next.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ScrollView</title>
      <link href="/blog/scrollview/"/>
      <url>/blog/scrollview/</url>
      
        <content type="html"><![CDATA[<h1 id="ScrollView"><a href="#ScrollView" class="headerlink" title="ScrollView"></a><a href="https://reactnative.dev/docs/scrollview" target="_blank" rel="noopener">ScrollView</a></h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>这篇文章<a href="https://www.jianshu.com/p/29563c7c548b" target="_blank" rel="noopener">React-Native 之 ScrollView 使用</a>结合了使用案例非常棒</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一个对原生 ScrollView 的包装组件，同时还集成了触摸锁定“响应者”系统<br>记住 ScrollViews 需要有确定的高度才能正常工作，因为需要在确定的容器中填充不确定高度的子组件（这样就可以滚动操作）。为了确定 ScrollViews 的高度，可以直接给它设置高度或者让它所有的父组件都为确定高度。忘记{flex:1}会向下 View 栈传递会导致错误，通过元素诊断器来快速定位到那一层高度不确定。<br>不支持 ScrollView 内部其他响应者 block 掉 ScrollView，自己成为响应者<br><code>ScrollView</code>vs<a href="/blog/flatlist">FlatList</a>-应该用哪个？<br><code>ScrollView</code>一次性渲染所有子组件，但会降低性能<br>想象一下如果你要显示非常大的列表，可能需要几屏内容。会一次性创建所有的 js 组件以及原生组件，大部分甚至不会显示，会导致渲染很慢以及增加内容占用<br>因此<code>FlatList</code>出现，<code>FlatList</code>懒渲染，当要显示的时候才会去渲染，当滚动出屏幕外就会删除 view 实例节省内存和提高处理速度<br><code>FlatList</code>非常方便。可以渲染分割线，多列，无限加载指示器以及其他一些开箱即用的功能。<br><strong>ScrollView</strong></p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> StyleSheet<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> SafeAreaView<span class="token punctuation">,</span> ScrollView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Constants <span class="token keyword">from</span> <span class="token string">"expo-constants"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>SafeAreaView style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>ScrollView style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>scrollView<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">></span>          Lorem ipsum dolor sit amet<span class="token punctuation">,</span> consectetur adipiscing elit<span class="token punctuation">,</span> sed <span class="token keyword">do</span>          eiusmod tempor incididunt ut labore et dolore magna aliqua<span class="token punctuation">.</span> Ut enim ad          minim veniam<span class="token punctuation">,</span> quis nostrud exercitation ullamco laboris nisi ut          aliquip ex ea commodo consequat<span class="token punctuation">.</span> Duis aute irure dolor <span class="token keyword">in</span>          reprehenderit <span class="token keyword">in</span> voluptate velit esse cillum dolore eu fugiat nulla          pariatur<span class="token punctuation">.</span> Excepteur sint occaecat cupidatat non proident<span class="token punctuation">,</span> sunt <span class="token keyword">in</span>          culpa qui officia deserunt mollit anim id est laborum<span class="token punctuation">.</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>ScrollView<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>SafeAreaView<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>    flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> Constants<span class="token punctuation">.</span>statusBarHeight<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  scrollView<span class="token punctuation">:</span> <span class="token punctuation">{</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">"pink"</span><span class="token punctuation">,</span>    marginHorizontal<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  text<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fontSize<span class="token punctuation">:</span> <span class="token number">42</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>继承自<a href="https://reactnative.dev/docs/view#props" target="_blank" rel="noopener">View Props</a></p><h3 id="alwaysBounceHorizontal"><a href="#alwaysBounceHorizontal" class="headerlink" title="alwaysBounceHorizontal"></a>alwaysBounceHorizontal</h3><p>仅 iOS。当 scroll view 水平滚动触摸到底边时产生回弹效果，即使是内容小余 scroll view 大小。当<code>horizontal={true}</code>时，默认值 true，否则就是 false</p><h3 id="alwaysBounceVertical"><a href="#alwaysBounceVertical" class="headerlink" title="alwaysBounceVertical"></a>alwaysBounceVertical</h3><p>仅 iOS。当 scroll view 竖直滚动触摸到底边时产生回弹效果，即使是内容小余 scroll view 大小。当<code>horizontal={true}</code>时，默认值 false,否则就是 true</p><h3 id="automaticallyAdjustContentInsets"><a href="#automaticallyAdjustContentInsets" class="headerlink" title="automaticallyAdjustContentInsets"></a>automaticallyAdjustContentInsets</h3><p>仅 iOS。控制如果是 ios，自动适配 scroll views 的 content inset，将 content view 放到导航条和工具栏之间。默认是 true。</p><h3 id="bounces"><a href="#bounces" class="headerlink" title="bounces"></a>bounces</h3><p>仅 iOS。如果内容大于 scroll view 两个方向的大小，触摸到边就会产生回弹效果。如果设置 false，即使 alwaysBounce**设置了也没用。</p><h3 id="bouncesZoom"><a href="#bouncesZoom" class="headerlink" title="bouncesZoom"></a>bouncesZoom</h3><p>仅 iOS。true 的话手势会驱动缩放的动画效果，否则没有</p><h3 id="canCancelContentTouches"><a href="#canCancelContentTouches" class="headerlink" title="canCancelContentTouches"></a>canCancelContentTouches</h3><p>仅 iOS。false 的话触摸拖动元素将不会有反应，默认值是 true</p><h3 id="centerContent"><a href="#centerContent" class="headerlink" title="centerContent"></a>centerContent</h3><p>仅 iOS。当内容小余 scroll view，内容会居中显示。当大于 scroll view 则没有效果。默认值是 false</p><h3 id="contentContainerStyle"><a href="#contentContainerStyle" class="headerlink" title="contentContainerStyle"></a>contentContainerStyle</h3><p>样式应用到包裹所有子组件的 scroll content container 容器上</p><h3 id="contentInset"><a href="#contentInset" class="headerlink" title="contentInset"></a>contentInset</h3><p>仅 iOS。滚动视图的边缘相对于内容的距离。默认是<code>{top: 0, left: 0, bottom: 0, right: 0}</code></p><h3 id="contentInsetAdjustmentBehavior"><a href="#contentInsetAdjustmentBehavior" class="headerlink" title="contentInsetAdjustmentBehavior"></a>contentInsetAdjustmentBehavior</h3><p>仅 iOS。属性指定的话会用安全区的距离来调整内容区，默认值是”never”。只有在 ios 11 以上有效</p><h3 id="contentOffset"><a href="#contentOffset" class="headerlink" title="contentOffset"></a>contentOffset</h3><p>仅 iOS。用来设置起始滚动的偏移。默认值是<code>{x: 0, y: 0}</code></p><h3 id="decelerationRate"><a href="#decelerationRate" class="headerlink" title="decelerationRate"></a>decelerationRate</h3><p>浮点数值，确定用户释放手指之后 scroll view 滚动下降的速度。你可以用简短的字符串”normal”和”fast”来匹配响应 iOS 下的<code>UIScrollViewDecelerationRateNormal</code>和<code>UIScrollViewDecelerationRateFast</code></p><ul><li>“normal” (default)，在 iOS 上 0.998，Android 上 0.985</li><li>“fast”，iOS 上 0.99，Android 上 0.9</li></ul><h3 id="directionalLockEnabled"><a href="#directionalLockEnabled" class="headerlink" title="directionalLockEnabled"></a>directionalLockEnabled</h3><p>仅 iOS。true 的话，ScrollView 会能够滚动的方向。默认是 false</p><h3 id="disableIntervalMomentum"><a href="#disableIntervalMomentum" class="headerlink" title="disableIntervalMomentum"></a>disableIntervalMomentum</h3><p>这里意思含糊，云里雾里的。<br>如果是 true，无论手势滚动有多快，scroll view 都会停止在下一个 index 处(跟滚动释放的位置有关)。当 page 小余 ScrollView 的宽度时，可以用来水平分页。默认是 false</p><h3 id="disableScrollViewPanResponder"><a href="#disableScrollViewPanResponder" class="headerlink" title="disableScrollViewPanResponder"></a>disableScrollViewPanResponder</h3><p>如果是 true，会禁用 Scroll View 的 js 事件响应，并将触摸控制完全交给子组件。如果<code>snapToInterval</code>启用将非常有用，因为它不遵循典型的触摸模式。不要在没有<code>snapToInterval</code>的正常 Scroll View 去启用它，否则在滚动时会出现无法预知的异常。默认值是 false</p><h3 id="endFillColor"><a href="#endFillColor" class="headerlink" title="endFillColor"></a>endFillColor</h3><p>仅 Android。有时候 ScrollView 会比内容填充占用更多的空间。在这种情况下，这个属性的颜色会填充掉剩余空间，避免使用背景颜色从而避免的多余的绘制。这是一种高级的优化，通常情况下不需要。</p><h3 id="horizontal"><a href="#horizontal" class="headerlink" title="horizontal"></a>horizontal</h3><p>会将 item 从竖着堆叠变成横着摆放</p><h3 id="indicatorStyle"><a href="#indicatorStyle" class="headerlink" title="indicatorStyle"></a>indicatorStyle</h3><p>仅 iOS。滚动指示器的样式</p><ul><li>“default” (默认)，像”black”</li><li>“black”，滚动指示器是黑色，在浅色背景下效果更好</li><li>“white”，滚动指示器是白色，在黑色背景下效果更好</li></ul><h3 id="invertStickyHeaders"><a href="#invertStickyHeaders" class="headerlink" title="invertStickyHeaders"></a>invertStickyHeaders</h3><p>如果固定 Header 应该固定在底部而不是在 ScrollView 顶部。通常使用在翻转的 ScrollView</p><h3 id="keyboardDismissMode"><a href="#keyboardDismissMode" class="headerlink" title="keyboardDismissMode"></a>keyboardDismissMode</h3><p>用户拖动的时候是否应该隐藏键盘<br>跨平台</p><ul><li>“none” (默认)，拖动不隐藏键盘</li><li>“on-drag”，当拖动开始时键盘隐藏<br>仅 ios 有效</li><li>“interactive”，通过拖动的交互方式关闭键盘，同时同步触摸移动；向上拖动可以取消操作。在 Android 上不支持这种行为并且行为为 none</li></ul><h3 id="keyboardShouldPersistTaps"><a href="#keyboardShouldPersistTaps" class="headerlink" title="keyboardShouldPersistTaps"></a>keyboardShouldPersistTaps</h3><p>当敲击后键盘应该保留显示</p><ul><li>“never”</li><li>“always”</li><li>“handled”</li><li>“false”</li><li>“true”</li></ul><h3 id="maintainVisibleContentPosition"><a href="#maintainVisibleContentPosition" class="headerlink" title="maintainVisibleContentPosition"></a>maintainVisibleContentPosition</h3><p>(这里有点懵逼，每个字能看懂，连起来就不知道啥意思)<br>仅 iOS。滚动视图将会调整滚动位置让当前第一个子组件可见，并且<code>minIndexForVisible</code>及更高将不会改变位置。这对于双向加载内容的列表有用，比如在聊天线程，否则新消息进来时可能造成滚动位置跳转。0 是常见值。但是 1 被用来跳过加载指示器或者其他不需要保持位置的内容。<br>如果用户在进行调整之前位于顶部的阈值之内，则<code>autoscrollToTopThreshold</code>用于在内容调整之后自动滚动到顶部。当用户想看到新消息滚动到那的应用程序非常有用，但是如果用户已经向上某种方式滚动并且滚动一堆消息<br>警告 1：启用此功能，滚动视图元素将重新排序，可能会造成跳转混乱。它可以被修复，但是当前没有计划。现在，使用此功能更不要在 ScrollViews or List 进行重新排序<br>警告 2：这在本机代码中使用 contentOffset 和 frame.origin 来计算可见性。关于内容是否“可见”，将不考虑遮挡，变换和其他复杂性</p><h3 id="maximumZoomScale"><a href="#maximumZoomScale" class="headerlink" title="maximumZoomScale"></a>maximumZoomScale</h3><p>仅 iOS。最大允许的缩放比列，默认是 1</p><h3 id="minimumZoomScale"><a href="#minimumZoomScale" class="headerlink" title="minimumZoomScale"></a>minimumZoomScale</h3><p>仅 iOS。最小允许的缩放比列，默认是 1</p><h3 id="nestedScrollEnabled"><a href="#nestedScrollEnabled" class="headerlink" title="nestedScrollEnabled"></a>nestedScrollEnabled</h3><p>仅 Android。Android api21(5.0)以上才支持嵌套滚动。iOS 默认支持嵌套滚动</p><h3 id="onContentSizeChange"><a href="#onContentSizeChange" class="headerlink" title="onContentSizeChange"></a>onContentSizeChange</h3><p>当 ScrollView 的可滚动内容大小放生变化时调用<br>处理函数被传递了宽和高参数<br>它被附加到 ScrollView 的内容容器的 onLayout 处理函数实现</p><h3 id="onMomentumScrollBegin"><a href="#onMomentumScrollBegin" class="headerlink" title="onMomentumScrollBegin"></a>onMomentumScrollBegin</h3><p>当动量滚动开始时调用（ScrollView 滑动开始）</p><h3 id="onMomentumScrollEnd"><a href="#onMomentumScrollEnd" class="headerlink" title="onMomentumScrollEnd"></a>onMomentumScrollEnd</h3><p>当动量滚动停止时调用（ScrollView 滑动停止）</p><h3 id="onScroll"><a href="#onScroll" class="headerlink" title="onScroll"></a>onScroll</h3><p>在滚动的过程中，每帧最多调用一次此回调函数。调用的频率可以用<code>scrollEventThrottle</code>属性来控制。The event has the following shape (all values are numbers):</p><pre><code>{  nativeEvent: {    contentInset: {bottom, left, right, top},    contentOffset: {x, y},    contentSize: {height, width},    layoutMeasurement: {height, width},    zoomScale  }}</code></pre><h3 id="onScrollBeginDrag"><a href="#onScrollBeginDrag" class="headerlink" title="onScrollBeginDrag"></a>onScrollBeginDrag</h3><p>当用户开始拖动视图时调用</p><h3 id="onScrollEndDrag"><a href="#onScrollEndDrag" class="headerlink" title="onScrollEndDrag"></a>onScrollEndDrag</h3><p>当用户停止拖动并且 view 开始停止或者开始滑动时被动调用</p><h3 id="onScrollToTop"><a href="#onScrollToTop" class="headerlink" title="onScrollToTop"></a>onScrollToTop</h3><p>仅 iOS。状态栏被点击时触发滚动到顶部</p><h3 id="overScrollMode"><a href="#overScrollMode" class="headerlink" title="overScrollMode"></a>overScrollMode</h3><p>仅 Android。重写 overScrollMode 的默认值<br><strong>值可能为</strong></p><ul><li>“auto”：默认值，当内容足够大超过 ScrollView 时才允许用户滚动</li><li>“always”：允许用户滚动视图</li><li>“never”：不允许用户滚动</li></ul><h3 id="pagingEnabled"><a href="#pagingEnabled" class="headerlink" title="pagingEnabled"></a>pagingEnabled</h3><p>如果 true，scroll view 停止在可视视图大小的倍数上。可以用来水平分页。默认是 false<br>注意：竖直分页不支持 Android</p><h3 id="persistentScrollbar"><a href="#persistentScrollbar" class="headerlink" title="persistentScrollbar"></a>persistentScrollbar</h3><p>仅 Android。当它不被使用时不会变成透明。默认是 false</p><h3 id="pinchGestureEnabled"><a href="#pinchGestureEnabled" class="headerlink" title="pinchGestureEnabled"></a>pinchGestureEnabled</h3><p>仅 iOS。如果 true，允许通过捏的手势放大缩小。默认是 true</p><h3 id="refreshControl"><a href="#refreshControl" class="headerlink" title="refreshControl"></a>refreshControl</h3><p>刷新组件，提供下拉刷新的功能。只有在竖直状态下有效</p><h3 id="removeClippedSubviews"><a href="#removeClippedSubviews" class="headerlink" title="removeClippedSubviews"></a>removeClippedSubviews</h3><p>在大列表时可能会提高滚动性能</p><blockquote><p>有 bug，在某些场景下会导致内容丢失。谨慎使用</p></blockquote><h3 id="scrollBarThumbImage"><a href="#scrollBarThumbImage" class="headerlink" title="scrollBarThumbImage"></a>scrollBarThumbImage</h3><p>仅 VR。不想写….</p><h3 id="scrollEnabled"><a href="#scrollEnabled" class="headerlink" title="scrollEnabled"></a>scrollEnabled</h3><p>如果是 false，无法通过交互滚动。默认是 true。<br>注意仍然可以通过 scrollTo 来实现滚动</p><h3 id="scrollEventThrottle"><a href="#scrollEventThrottle" class="headerlink" title="scrollEventThrottle"></a>scrollEventThrottle</h3><p>仅 iOS。这个属性控制在滚动过程中，scroll 事件被调用的频率（单位是每秒事件数量）。更小的数值能够更及时的跟踪滚动位置，不过可能会带来性能问题，因为更多的信息会通过 bridge 传递。由于 JS 事件循环需要和屏幕刷新率同步，因此设置 1-16 之间的数值不会有实质区别。默认值为 0，意味着每次视图被滚动，scroll 事件只会被调用一次。</p><h3 id="scrollIndicatorInsets"><a href="#scrollIndicatorInsets" class="headerlink" title="scrollIndicatorInsets"></a>scrollIndicatorInsets</h3><p>仅 iOS。决定滚动条距离视图边缘的坐标。这个值应该和 contentInset 一样。默认值为{0, 0, 0, 0}。</p><h3 id="scrollPerfTag"><a href="#scrollPerfTag" class="headerlink" title="scrollPerfTag"></a>scrollPerfTag</h3><p>仅 Android。用于在此滚动视图上记录滚动性能的标签。将强制打开动量事件（请参见 sendMomentumEvents）,这并没有做任何开箱即用的事情，您需要实现自定义本机 FpsListener 才有用</p><h3 id="scrollToOverflowEnabled"><a href="#scrollToOverflowEnabled" class="headerlink" title="scrollToOverflowEnabled"></a>scrollToOverflowEnabled</h3><p>仅 iOS。scroll view 可以通过编程滚动超过内容大小。默认是 false</p><h3 id="scrollsToTop"><a href="#scrollsToTop" class="headerlink" title="scrollsToTop"></a>scrollsToTop</h3><p>仅 iOS。如果为 true，当状态被点击，scroll view 滚动到顶部。默认是 true</p><h3 id="DEPRECATED-sendUpdatedChildFrames"><a href="#DEPRECATED-sendUpdatedChildFrames" class="headerlink" title="DEPRECATED_sendUpdatedChildFrames"></a>DEPRECATED_sendUpdatedChildFrames</h3><p>仅 iOS。如果为 true，则 ScrollView 将在滚动事件中发出 updateChildFrames 数据，否则将不计算或发出子帧数据。存在是为了支持遗留问题，而应使用 onLayout 来检索帧数据。默认值为 false。</p><h3 id="showsHorizontalScrollIndicator"><a href="#showsHorizontalScrollIndicator" class="headerlink" title="showsHorizontalScrollIndicator"></a>showsHorizontalScrollIndicator</h3><p>如果 true，显示水平滚动的指示器。默认是 true</p><h3 id="showsVerticalScrollIndicator"><a href="#showsVerticalScrollIndicator" class="headerlink" title="showsVerticalScrollIndicator"></a>showsVerticalScrollIndicator</h3><p>如果 true，显示竖直滚动的指示器。默认是 true</p><h3 id="snapToAlignment"><a href="#snapToAlignment" class="headerlink" title="snapToAlignment"></a>snapToAlignment</h3><p>当设置了 snapToInterval，snapToAlignment 会定义 snap 与滚动视图之间的关系。</p><ul><li>start (默认值) 会将 snap 对齐在左侧（水平）或顶部（垂直）</li><li>center 会将 snap 对齐到中间</li><li>end 会将 snap 对齐到右侧（水平）或底部（垂直）</li></ul><h3 id="snapToEnd"><a href="#snapToEnd" class="headerlink" title="snapToEnd"></a>snapToEnd</h3><p>和<code>snapToOffsets</code>一起使用。默认，列表尾部作为 snap 的偏移量。设置<code>snapToEnd</code>为 false 禁用此行为，并允许列表在其结尾和最后一个 snapToOffsets 偏移量之间自由滚动。默认是 true</p><h3 id="snapToInterval"><a href="#snapToInterval" class="headerlink" title="snapToInterval"></a>snapToInterval</h3><p>当设置了此属性时，会让滚动视图滚动停止后，停止在 snapToInterval 的倍数的位置。这可以在一些子视图比滚动视图本身小的时候用于实现分页显示 <code>snapToAlignment</code>以及<code>decelerationRate=&quot;fast&quot;</code> 组合使用。覆盖可配置性较低的 pagesEnabled 属性。</p><h3 id="snapToOffsets"><a href="#snapToOffsets" class="headerlink" title="snapToOffsets"></a>snapToOffsets</h3><p>设置后，使滚动视图在定义的偏移处停止。这可用于对长度小于滚动视图的各种大小的子项进行分页,通常与<code>decelerationRate =&quot;fast&quot;</code>结合使用。重写可配置性较低<code>pagesEnabled</code>和 s<code>snapToInterval</code>属性。</p><h3 id="snapToStart"><a href="#snapToStart" class="headerlink" title="snapToStart"></a>snapToStart</h3><p>与<code>snapToOffsets</code>一起使用。默认，列表的开始作为停住点的偏移。设置<code>snapToStart</code>false 可以禁止此行为，允许礼包在开始和第一个 snap 偏移量之间滚动。默认是 true</p><h3 id="stickyHeaderIndices"><a href="#stickyHeaderIndices" class="headerlink" title="stickyHeaderIndices"></a>stickyHeaderIndices</h3><p>一组子元素索引，确定滚动时哪些子元素停靠在屏幕顶部。例子，传递<code>stickyHeaderIndices={[0]}</code>将固定第一个子元素显示在顶部。这个属性不支持与<code>horizontal={true}</code>一起使用。</p><h3 id="zoomScale"><a href="#zoomScale" class="headerlink" title="zoomScale"></a>zoomScale</h3><p>仅 iOS。滚动内容的当前缩放比列。默认是 1</p><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="flashScrollIndicators"><a href="#flashScrollIndicators" class="headerlink" title="flashScrollIndicators()"></a>flashScrollIndicators()</h3><p>让滚动指示器显示短暂</p><h3 id="scrollTo"><a href="#scrollTo" class="headerlink" title="scrollTo()"></a>scrollTo()</h3><p>滚动到指定的 x,y 位置。可以带着动画滚动或者直接到该位置<br>注意：这个混乱的函数签名由于历史原因，这个函数接受分隔的参数而不是对象。由于 x，y 传值模棱两可，应该被废弃</p><h3 id="scrollToEnd"><a href="#scrollToEnd" class="headerlink" title="scrollToEnd()"></a>scrollToEnd()</h3><p>竖直方向滚动到底部，水平方向滚动到右边。可以带动画滚动。Android 上可能需要制定滚动时常。如果不指定默认是包含动画</p><h3 id="scrollWithoutAnimationTo"><a href="#scrollWithoutAnimationTo" class="headerlink" title="scrollWithoutAnimationTo()"></a>scrollWithoutAnimationTo()</h3><p>废弃应该用 scrollTo 代替</p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> api </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VirtualizedList</title>
      <link href="/blog/virtualizedlist/"/>
      <url>/blog/virtualizedlist/</url>
      
        <content type="html"><![CDATA[<h1 id="VirtualizedList"><a href="#VirtualizedList" class="headerlink" title="VirtualizedList"></a><a href="https://reactnative.dev/docs/virtualizedlist" target="_blank" rel="noopener">VirtualizedList</a></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>是<a href="/blog/flatlist">FlatList</a>和<a href="https://reactnative.dev/docs/sectionlist" target="_blank" rel="noopener">SectionList</a>的父类实现。有更好的记录。通常情况下应该使用<code>FlatList</code>，除非需要更灵活采用它。比如你需要使用不可变数据<br><a href="https://reactnative.cn/docs/virtualizedlist/" target="_blank" rel="noopener">中文文档</a><br>虚拟化列表通过维护一个可见的元素在有限的窗口，不可见的元素维护一个空白空间来替代所有离开屏幕的所有元素。这种方式可以适配所有滚动行为，如果元素滚动离可视区域越远它就获得一个低优先级，否则就获得一个高优先级。通过这种方式来尽可能的减少见到空白空间<br><strong>一些警告</strong></p><ul><li>当内容滚动出可视的渲染窗口，滚出部分的状态将丢弃。保证每项的数据被外部存储保存，如 Flux,Redux 以及 Relay.</li><li>它是<code>PureComponent</code>意味着，如果<code>props</code>数据内容<code>浅对比</code>相等这不会重新渲染。保证<code>renderItem</code>函数依赖传入参数<code>data</code>以及父组件状态（<code>extraData</code>），否则不会刷新</li><li>为了优化内存的同时保持平滑滚动，内容被异步离屏渲染。这意味着可能滑动速度可能大于内容的填充速度，会看到短暂的白屏。这是优化而不得不做出的妥协，每个应用可以根据自己的需要来调整对应的参数，我们仍然在这方面的优化做努力。</li><li>默认列表会将 item 数据项的<code>key</code>属性作为单项组件的 React key。另外，你可以提供自定义函数<code>keyExtractor</code>来获取 key</li></ul><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>继承自<a href="/blog/scrollview#props">ScrollView Props</a></p><h3 id="renderItem"><a href="#renderItem" class="headerlink" title="renderItem"></a>renderItem</h3><pre><code>(info: any) =&gt; ?React.Element&lt;any&gt;</code></pre><p>从<code>data</code>数据中获取 item 数据，将它渲染到列表上</p><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>它是一个默认的访问器函数，默认认为数组中带有{key:string}属性。但是你可以重写<code>getItem</code>, <code>getItemCount</code>, 和 <code>keyExtractor</code>，来覆盖基于 data 的默认数据</p><h3 id="getItem"><a href="#getItem" class="headerlink" title="getItem"></a>getItem</h3><pre><code>(data: any, index: number) =&gt; object;</code></pre><p>用于从任何数据中提取 item,它是一个通用的数据提取器</p><h3 id="getItemCount"><a href="#getItemCount" class="headerlink" title="getItemCount"></a>getItemCount</h3><pre><code>(data: any) =&gt; number;</code></pre><p>决定有多少 item 的数量</p><h3 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h3><p><code>debug</code>将会打开额外的日志以及悬浮层来帮助 debug 和实现。但是对性能有影响</p><h3 id="extraData"><a href="#extraData" class="headerlink" title="extraData"></a>extraData</h3><p>告诉列表需要重绘的标记样式（因为列表是<code>PureComponent</code>）。<code>renderItem</code>, Header, Footer 依赖除了<code>data</code>以外的任何内容，变更都需要告知<code>extraData</code>，要将它作为不可变对象看待。</p><h3 id="getItemLayout"><a href="#getItemLayout" class="headerlink" title="getItemLayout"></a>getItemLayout</h3><p>这是一个可选的优化项，如果你提前知道单项的固定宽高可以跳过组件进行的动态布局计算。<br>利用它在上百项下有很难高的性能。<br>如果你指定了分割线，高度计算需要包括分隔线进去</p><h3 id="initialScrollIndex"><a href="#initialScrollIndex" class="headerlink" title="initialScrollIndex"></a>initialScrollIndex</h3><p>首次渲染不从顶部的第一项开始，取而代之的是<code>initialScrollIndex</code>开始。它会禁止掉<code>initialNumToRender</code>的优化的项目放在内容中，立刻从 initial index 开始的位置渲染。需要设置<code>getItemLayout</code>属性</p><h3 id="inverted"><a href="#inverted" class="headerlink" title="inverted"></a>inverted</h3><p>翻转滚动的方向（应该是下滑变成上拉吧），实质是将<code>scale</code>设置成-1</p><h3 id="CellRendererComponent"><a href="#CellRendererComponent" class="headerlink" title="CellRendererComponent"></a>CellRendererComponent</h3><p>单元格的渲染，可以是 component, function</p><h3 id="listKey"><a href="#listKey" class="headerlink" title="listKey"></a>listKey</h3><p>对于列表来说唯一的 key。如果有多个列表同级且嵌套在 VirtualizedList,它的 key 对于虚拟化列表的工作时必须的</p><h3 id="ListEmptyComponent"><a href="#ListEmptyComponent" class="headerlink" title="ListEmptyComponent"></a>ListEmptyComponent</h3><p>当列表内容是空的时候渲染它，可以是 component, function, element</p><h3 id="ListItemComponent"><a href="#ListItemComponent" class="headerlink" title="ListItemComponent"></a>ListItemComponent</h3><p>每项的渲染，可以是 component, function</p><h3 id="ListFooterComponent"><a href="#ListFooterComponent" class="headerlink" title="ListFooterComponent"></a>ListFooterComponent</h3><p>在所有列表元素底部，可以是 component, function, element</p><h3 id="ListFooterComponentStyle"><a href="#ListFooterComponentStyle" class="headerlink" title="ListFooterComponentStyle"></a>ListFooterComponentStyle</h3><p>为内部的<code>ListFooterComponent</code>提供样式</p><h3 id="ListHeaderComponent"><a href="#ListHeaderComponent" class="headerlink" title="ListHeaderComponent"></a>ListHeaderComponent</h3><p>在所有列表元素顶部，可以是 component, function, element</p><h3 id="ListHeaderComponentStyle"><a href="#ListHeaderComponentStyle" class="headerlink" title="ListHeaderComponentStyle"></a>ListHeaderComponentStyle</h3><p>为内部的<code>ListHeaderComponent</code>提供样式</p><h3 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h3><p>在 List 计算布局是会调用</p><h3 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h3><p>如果提供，一个平台标准的组件就会被添加到<code>下拉刷新</code>功能上。保证<code>refreshing</code>属性被正确设置</p><h3 id="onScrollToIndexFailed"><a href="#onScrollToIndexFailed" class="headerlink" title="onScrollToIndexFailed"></a>onScrollToIndexFailed</h3><pre><code>(info: {    index: number,    highestMeasuredFrameIndex: number,    averageItemLength: number,  }) =&gt; void</code></pre><p>当滚动到尚未测量的索引时，用于处理这个错误。推荐的操作是计算你自己的偏移量然后滚动到它，或者尽可能的滚，然后在呈现更多内容之后再试一次。</p><h3 id="onViewableItemsChanged"><a href="#onViewableItemsChanged" class="headerlink" title="onViewableItemsChanged"></a>onViewableItemsChanged</h3><pre><code>(info: {   viewableItems: array,   changed: array, }) =&gt; void</code></pre><p>可见行变化时被调用。可见范围和变化频次可以去设置<code>viewabilityConfig</code></p><h3 id="refreshing"><a href="#refreshing" class="headerlink" title="refreshing"></a>refreshing</h3><p>等待新数据刷新的状态为 true</p><h3 id="refreshControl"><a href="#refreshControl" class="headerlink" title="refreshControl"></a>refreshControl</h3><p>可以自定义刷新组件。当设置成功之后，它会覆盖掉内置的组件。</p><h3 id="removeClippedSubviews"><a href="#removeClippedSubviews" class="headerlink" title="removeClippedSubviews"></a>removeClippedSubviews</h3><p>在大列表时可能会提高滚动性能</p><blockquote><p>有 bug，在某些场景下会导致内容丢失。谨慎使用</p></blockquote><h3 id="renderScrollComponent"><a href="#renderScrollComponent" class="headerlink" title="renderScrollComponent"></a>renderScrollComponent</h3><pre><code>(props: object) =&gt; element;</code></pre><p>渲染一个自定义的滚动组件，跟<code>RefreshControl</code>有一点不一样</p><h3 id="viewabilityConfig"><a href="#viewabilityConfig" class="headerlink" title="viewabilityConfig"></a>viewabilityConfig</h3><p>看更全的文档可以去看<a href="https://github.com/facebook/react-native/blob/master/Libraries/Lists/ViewabilityHelper.js" target="_blank" rel="noopener">ViewabilityHelper.js</a>库<br>viewabilityConfig 是一个对象具有下面属性</p><table><thead><tr><th>PROPERTY</th><th>REQUIRED</th><th>TYPE</th></tr></thead><tbody><tr><td>minimumViewTime</td><td>No</td><td>number</td></tr><tr><td>viewAreaCoveragePercentThreshold</td><td>No</td><td>number</td></tr><tr><td>itemVisiblePercentThreshold</td><td>No</td><td>number</td></tr><tr><td>waitForInteraction</td><td>No</td><td>boolean</td></tr></tbody></table><p>要求至少有其中一个在<code>viewAreaCoveragePercentThreshold</code>，<code>itemVisiblePercentThreshold</code>之间。它需要在构造函数中赋值，避免报错<br><code>Error: Changing viewabilityConfig on the fly is not supported</code></p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">constructor</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>viewabilityConfig <span class="token operator">=</span> <span class="token punctuation">{</span>      waitForInteraction<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      viewAreaCoveragePercentThreshold<span class="token punctuation">:</span> <span class="token number">95</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts"><code class="language-ts"><span class="token operator">&lt;</span>FlatList    viewabilityConfig<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>viewabilityConfig<span class="token punctuation">}</span>  <span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>minimumViewTime<br>单个 Item 达到最小的物理显示时间（单位是毫秒）就会触发 viewability 回调。一个较大的值表明滚动不停的话，将没有内容会被标记已显示。</li><li>viewAreaCoveragePercentThreshold<br>部分被遮挡的 Item 必须大于可视窗口的百分之多少时才会被记为已显示（0-100）。如果全部显示则也会被认为已显示。0 表示离可视窗口为 0 像素是才被认为显示。100 表示被遮挡的内容填充满屏幕时才会被认为已显示</li><li>itemVisiblePercentThreshold<br>跟<code>viewAreaCoveragePercentThreshold</code>一样，但是会认为 Item 自身被显示了百分之多少才算已显示，而不是它覆盖可见区域的比列</li><li>waitForInteraction<br>只有在用户交互或者 recordInteraction 被调用才去计算 item 是否已显示</li></ul><h3 id="viewabilityConfigCallbackPairs"><a href="#viewabilityConfigCallbackPairs" class="headerlink" title="viewabilityConfigCallbackPairs"></a>viewabilityConfigCallbackPairs</h3><p><code>ViewabilityConfig</code>/<code>onViewableItemsChanged</code>值对的列表，<code>ViewabilityConfig</code>‘s 条件会触发响应的<code>onViewableItemsChanged</code>调用</p><h3 id="horizontal"><a href="#horizontal" class="headerlink" title="horizontal"></a>horizontal</h3><p>会将 item 从竖着堆叠变成横着摆放</p><h3 id="initialNumToRender"><a href="#initialNumToRender" class="headerlink" title="initialNumToRender"></a>initialNumToRender</h3><p>指定首屏需要有多少元素被渲染，应该刚好填充满屏幕。注意这些元素在窗口滚动过程中不会卸载，为了在提高执行<code>scroll-to-top</code>操作时不需要重新渲染。</p><h3 id="keyExtractor"><a href="#keyExtractor" class="headerlink" title="keyExtractor"></a>keyExtractor</h3><p>用来提取 item 下独一无二的 key，key 作为重绘时缓存的依据。默认是取 item.key，获取失败会回滚到 index，机制和 React 一样</p><h3 id="maxToRenderPerBatch"><a href="#maxToRenderPerBatch" class="headerlink" title="maxToRenderPerBatch"></a>maxToRenderPerBatch</h3><p>每个增量渲染批次最大的渲染项目数。一次渲染的越多，填充率越好。但是渲染内容会影响到按钮点击和其他交互行为的响应，因此可能会造成卡住</p><h3 id="onEndReached"><a href="#onEndReached" class="headerlink" title="onEndReached"></a>onEndReached</h3><pre><code>(info: {distanceFromEnd: number}) =&gt; void</code></pre><p>当滚动的位置在渲染内容的触摸区内就会调用</p><h3 id="onEndReachedThreshold"><a href="#onEndReachedThreshold" class="headerlink" title="onEndReachedThreshold"></a>onEndReachedThreshold</h3><p>距离列表底部多远时触发<code>onEndReached</code>回调，这是一个比值。比如 0.5 距离底部为可见内容一半长度时触发</p><h3 id="updateCellsBatchingPeriod"><a href="#updateCellsBatchingPeriod" class="headerlink" title="updateCellsBatchingPeriod"></a>updateCellsBatchingPeriod</h3><p>渲染低优先级批次的间隔时间，例如渲染屏幕外的项目。类似于填充率和响应度的妥协<code>maxToRenderPerBatch</code></p><h3 id="windowSize"><a href="#windowSize" class="headerlink" title="windowSize"></a>windowSize</h3><p>决定渲染的总数量，单位是项目数。默认是 21 个，如果单项占满整个屏幕，那么在上方会有 10 个屏幕，下放也会有 10 个屏幕。减少这个的数量会提高内存占用和性能，但是可能会带来快速滚动时带来的白屏</p><h3 id="disableVirtualization"><a href="#disableVirtualization" class="headerlink" title="disableVirtualization"></a>disableVirtualization</h3><blockquote><p>废弃。虚拟化可以提供高效的性能和内存占用，但是会将离开屏幕的元素卸载掉。你可能只在需要 debug 的时候需要它</p></blockquote><h3 id="persistentScrollbar"><a href="#persistentScrollbar" class="headerlink" title="persistentScrollbar"></a>persistentScrollbar</h3><p>是否一直显示滚动条</p><h3 id="progressViewOffset"><a href="#progressViewOffset" class="headerlink" title="progressViewOffset"></a>progressViewOffset</h3><p>当偏移的位置需要加上加载指示器，可以去设置。(Android)</p><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="scrollToEnd"><a href="#scrollToEnd" class="headerlink" title="scrollToEnd()"></a>scrollToEnd()</h3><p>滚动到底部，如果没有<code>getItemLayout</code>行为会比较混乱<br><strong>params</strong></p><ul><li>animated (boolean)：滚动时是否需要动画，默认是 true</li></ul><h3 id="scrollToIndex"><a href="#scrollToIndex" class="headerlink" title="scrollToIndex()"></a>scrollToIndex()</h3><p>滚动到指定行，且可以指定可显示的位置，<code>viewPosition</code>为 0 时会在视口的顶部，1 时在视口底部，0.5 在视口中间。</p><blockquote><p>注意：如果没有指定 getItemLayout 属性则没有办法滚动到渲染窗口之外的位置</p></blockquote><p><strong>params</strong></p><ul><li>animated (boolean)：滚动时是否需要动画，默认是 true</li><li>index (number)：滚动位置的索引，必须</li><li>viewOffset (number)：一个固定值标识指定行后的偏移距离</li><li>viewPosition (number)：表示指定行在可视窗口的位置，上面已经表述过了</li></ul><h3 id="scrollToItem"><a href="#scrollToItem" class="headerlink" title="scrollToItem()"></a>scrollToItem()</h3><p>滚动到指定数据的行，它会线性扫描 data。建议使用<code>scrollToIndex</code><br><strong>params</strong></p><ul><li>animated (boolean)：滚动时是否需要动画，默认是 true</li><li>item (object)：滚动位置的对象，必须</li><li>viewPosition (number)：表示指定行在可视窗口的位置，上面已经表述过了</li></ul><h3 id="scrollToOffset"><a href="#scrollToOffset" class="headerlink" title="scrollToOffset()"></a>scrollToOffset()</h3><p>滚动至列表内容下的偏移像素<br><strong>params</strong></p><ul><li>offset (number)：滚动的偏移距离。如果是在水平模式下，这个就是 x 轴距离。否则就是 y 轴距离。必须</li><li>animated (boolean)：滚动时是否需要动画，默认是 true</li></ul><h3 id="recordInteraction"><a href="#recordInteraction" class="headerlink" title="recordInteraction()"></a>recordInteraction()</h3><p>告诉列表有交互了，当<code>waitForInteractions</code>是 true 会触发 view 是否显示的计算（即使用户没有滚动）。在点击 item 或者导航跳转的时候该方法也会被调用</p><h3 id="flashScrollIndicators"><a href="#flashScrollIndicators" class="headerlink" title="flashScrollIndicators()"></a>flashScrollIndicators()</h3><p>让滚动指示器显示短暂</p><h3 id="getScrollResponder"><a href="#getScrollResponder" class="headerlink" title="getScrollResponder()"></a>getScrollResponder()</h3><p>提供滚动响应者的引用</p><h3 id="getScrollableNode"><a href="#getScrollableNode" class="headerlink" title="getScrollableNode()"></a>getScrollableNode()</h3><p>提供滚动节点的引用</p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> api </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FlatList</title>
      <link href="/blog/flatlist/"/>
      <url>/blog/flatlist/</url>
      
        <content type="html"><![CDATA[<h1 id="FlatList"><a href="#FlatList" class="headerlink" title="FlatList"></a><a href="https://reactnative.dev/docs/flatlist" target="_blank" rel="noopener">FlatList</a></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>一个高性能用于渲染基础列表，支持一些便利的特性<br>感觉<a href="https://reactnative.cn/docs/flatlist/" target="_blank" rel="noopener">FlatList 中文版</a>比英文原版都好。</p><ul><li>跨平台支持</li><li>可选的横向展示</li><li>可配置的已显示的回调函数</li><li>列表头支持</li><li>列表尾支持</li><li>分割线支持</li><li>下拉刷新</li><li>滚动加载</li><li>滚动到指定行支持</li><li>多列支持</li></ul><p>它是对<a href="/blog/virtualizedlist">virtualizedlist</a>封装，继承自它的所有属性（同样也继承自<a href="https://reactnative.dev/docs/scrollview" target="_blank" rel="noopener">ScrollView</a>),这些继承的属性在这里没有列出来。此外还有以下注意事项：</p><ul><li>当内容滚动出可视的渲染窗口，滚出部分的状态将丢弃。保证每项的数据被外部存储保存，如 Flux,Redux 以及 Relay.</li><li>它是<code>PureComponent</code>意味着，如果<code>props</code>数据内容<code>浅对比</code>相等这不会重新渲染。保证<code>renderItem</code>函数依赖传入参数<code>data</code>以及父组件状态（<code>extraData</code>），否则不会刷新</li><li>为了优化内存的同时保持平滑滚动，内容被异步离屏渲染。这意味着可能滑动速度可能大于内容的填充速度，会看到短暂的白屏。这是优化而不得不做出的妥协，每个应用可以根据自己的需要来调整对应的参数，我们仍然在这方面的优化做努力。</li><li>默认列表会将 item 数据项的<code>key</code>属性作为单项组件的 React key。另外，你可以提供自定义函数<code>keyExtractor</code>来获取 key</li></ul><p>如果需要 section 支持，请使用<a href="https://reactnative.dev/docs/sectionlist" target="_blank" rel="noopener">Section List</a><br><a href="https://snack.expo.io/?session_id=snack-session-fXpTgLMiC&preview=true&platform=web&iframeId=j4bavelnge&supportedPlatforms=ios,android,web&name=flatlist-simple&description=Example%20usage&waitForData=true" target="_blank" rel="noopener">flatlist-simple</a></p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> SafeAreaView<span class="token punctuation">,</span> View<span class="token punctuation">,</span> FlatList<span class="token punctuation">,</span> StyleSheet<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Constants <span class="token keyword">from</span> <span class="token string">"expo-constants"</span><span class="token punctuation">;</span><span class="token keyword">const</span> DATA <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"bd7acbea-c1b1-46c2-aed5-3ad53abb28ba"</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">"First Item"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"3ac68afc-c605-48d3-a4f8-fbd91aa97f63"</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">"Second Item"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"58694a0f-3da1-471f-bd96-145571e29d72"</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">"Third Item"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>item<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>SafeAreaView style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>FlatList        data<span class="token operator">=</span><span class="token punctuation">{</span>DATA<span class="token punctuation">}</span>        ItemSeparatorComponent<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> highlighted <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&lt;</span>Text<span class="token operator">></span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span><span class="token punctuation">}</span>        renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> separators <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Text<span class="token operator">></span>            <span class="token punctuation">{</span>item<span class="token punctuation">.</span>title<span class="token punctuation">}</span>            <span class="token punctuation">{</span>separators<span class="token punctuation">}</span>          <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>        keyExtractor<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>SafeAreaView<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>    flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> Constants<span class="token punctuation">.</span>statusBarHeight<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  item<span class="token punctuation">:</span> <span class="token punctuation">{</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">"#f9c2ff"</span><span class="token punctuation">,</span>    padding<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    marginVertical<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    marginHorizontal<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  title<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fontSize<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了渲染多列，请使用<a href="https://reactnative.dev/docs/flatlist#numcolumns" target="_blank" rel="noopener">numColumns</a>属性，用这种方式代替 flexWrap 布局解决单行高度的冲突</p><p>下面的复杂的多列显示使用案例演示了如何性能优化和避免 bug</p><ul><li>通过传<code>extraData={selected}</code>给<code>FlatList</code>,可以保证 state 变更时<code>FlatList</code>被重渲染。没有设置这个属性,<code>FlatList</code>将不会知道需要重渲染任何 item，因为它是个<code>PureComponent</code>对比属性发现没有任何改变。</li><li><code>keyExtractor</code>告诉列表使用 id 来作为每项的 key</li></ul><p><a href="https://snack.expo.io/?session_id=snack-session-IO5CwSQUH&preview=true&platform=web&iframeId=rua5k99frl&supportedPlatforms=ios,android,web&name=flatlist-selectable&description=Example%20usage&waitForData=true" target="_blank" rel="noopener">flatlist-selectable</a></p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  SafeAreaView<span class="token punctuation">,</span>  TouchableOpacity<span class="token punctuation">,</span>  FlatList<span class="token punctuation">,</span>  StyleSheet<span class="token punctuation">,</span>  Text<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Constants <span class="token keyword">from</span> <span class="token string">"expo-constants"</span><span class="token punctuation">;</span><span class="token keyword">const</span> DATA <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"bd7acbea-c1b1-46c2-aed5-3ad53abb28ba"</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">"First Item"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"3ac68afc-c605-48d3-a4f8-fbd91aa97f63"</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">"Second Item"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span> <span class="token string">"58694a0f-3da1-471f-bd96-145571e29d72"</span><span class="token punctuation">,</span>    title<span class="token punctuation">:</span> <span class="token string">"Third Item"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id<span class="token punctuation">,</span> title<span class="token punctuation">,</span> selected<span class="token punctuation">,</span> onSelect <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>TouchableOpacity      onPress<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">onSelect</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span>      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>        styles<span class="token punctuation">.</span>item<span class="token punctuation">,</span>        <span class="token punctuation">{</span> backgroundColor<span class="token punctuation">:</span> selected <span class="token operator">?</span> <span class="token string">"#6e3b6e"</span> <span class="token punctuation">:</span> <span class="token string">"#f9c2ff"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">}</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>Text style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>TouchableOpacity<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>selected<span class="token punctuation">,</span> setSelected<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onSelect <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useCallback</span><span class="token punctuation">(</span>    <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> newSelected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>selected<span class="token punctuation">)</span><span class="token punctuation">;</span>      newSelected<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token operator">!</span>selected<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">setSelected</span><span class="token punctuation">(</span>newSelected<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>selected<span class="token punctuation">]</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>SafeAreaView style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>FlatList        data<span class="token operator">=</span><span class="token punctuation">{</span>DATA<span class="token punctuation">}</span>        renderItem<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">{</span> item <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>          <span class="token operator">&lt;</span>Item            id<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>            title<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>title<span class="token punctuation">}</span>            selected<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token operator">!</span>selected<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span>            onSelect<span class="token operator">=</span><span class="token punctuation">{</span>onSelect<span class="token punctuation">}</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>        keyExtractor<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id<span class="token punctuation">}</span>        extraData<span class="token operator">=</span><span class="token punctuation">{</span>selected<span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>SafeAreaView<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>    flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> Constants<span class="token punctuation">.</span>statusBarHeight<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  item<span class="token punctuation">:</span> <span class="token punctuation">{</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">"#f9c2ff"</span><span class="token punctuation">,</span>    padding<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    marginVertical<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    marginHorizontal<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  title<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fontSize<span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>继承自<a href="/blog/scrollview#props">ScrollView Props</a>，当组件被嵌套在同方向的 FlastList 下这些属性将无效。</p><h3 id="renderItem"><a href="#renderItem" class="headerlink" title="renderItem"></a>renderItem</h3><pre><code>renderItem({item, index, separators});</code></pre><p>从<code>data</code>数据中获取 item 数据，将它渲染到列表上<br>提供一起其他参数，比如可能需要的<code>index</code>参数，还有后面的<code>separators</code>。<br><strong>separators</strong></p><ul><li>highlight (Function)</li><li>unhighlight (Function)</li><li>updateProps (Function)<ul><li>select (enum(‘leading’, ‘trailing’))</li><li>newProps (Object)</li></ul></li></ul><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><p>为了简单，data 是个纯数组。如果你想要使用其他数据结构，比如不可变数组，请直接使用<a href="/blog/virtualizedlist">virtualizedlist</a></p><h3 id="ItemSeparatorComponent"><a href="#ItemSeparatorComponent" class="headerlink" title="ItemSeparatorComponent"></a>ItemSeparatorComponent</h3><p>在每两项之间渲染一个，默认会给组件提供<code>highlighted</code>,<code>leadingItem</code>属性。<code>renderItem</code>提供属性<code>separators.highlight</code>/<code>unhighlight</code>来更新它的<code>highlighted</code>属性。你也可以通过<code>separators.updateProps</code>添加自定义属性给它</p><h3 id="ListEmptyComponent"><a href="#ListEmptyComponent" class="headerlink" title="ListEmptyComponent"></a>ListEmptyComponent</h3><p>当列表内容是空的时候渲染它，可以是 component, function, element</p><h3 id="ListFooterComponent"><a href="#ListFooterComponent" class="headerlink" title="ListFooterComponent"></a>ListFooterComponent</h3><p>在所有列表元素底部，可以是 component, function, element</p><h3 id="ListFooterComponentStyle"><a href="#ListFooterComponentStyle" class="headerlink" title="ListFooterComponentStyle"></a>ListFooterComponentStyle</h3><p>为内部的<code>ListFooterComponent</code>提供样式</p><h3 id="ListHeaderComponent"><a href="#ListHeaderComponent" class="headerlink" title="ListHeaderComponent"></a>ListHeaderComponent</h3><p>在所有列表元素顶部，可以是 component, function, element</p><h3 id="ListHeaderComponentStyle"><a href="#ListHeaderComponentStyle" class="headerlink" title="ListHeaderComponentStyle"></a>ListHeaderComponentStyle</h3><p>为内部的<code>ListHeaderComponent</code>提供样式</p><h3 id="columnWrapperStyle"><a href="#columnWrapperStyle" class="headerlink" title="columnWrapperStyle"></a>columnWrapperStyle</h3><p>为多列的列项提供包裹样式</p><h3 id="extraData"><a href="#extraData" class="headerlink" title="extraData"></a>extraData</h3><p>告诉列表需要重绘的标记样式（因为列表是<code>PureComponent</code>）。<code>renderItem</code>, Header, Footer 依赖除了<code>data</code>以外的任何内容，变更都需要告知<code>extraData</code>，要将它作为不可变对象看待。</p><h3 id="getItemLayout"><a href="#getItemLayout" class="headerlink" title="getItemLayout"></a>getItemLayout</h3><p>这是一个可选的优化项，如果你提前知道单项的固定宽高可以跳过组件进行的动态布局计算。<br>利用它在上百项下有很难高的性能。<br>如果你指定了分割线，高度计算需要包括分隔线进去</p><h3 id="horizontal"><a href="#horizontal" class="headerlink" title="horizontal"></a>horizontal</h3><p>会将 item 从竖着堆叠变成横着摆放</p><h3 id="initialNumToRender"><a href="#initialNumToRender" class="headerlink" title="initialNumToRender"></a>initialNumToRender</h3><p>指定首屏需要有多少元素被渲染，应该刚好填充满屏幕。注意这些元素在窗口滚动过程中不会卸载，为了在提高执行<code>scroll-to-top</code>操作时不需要重新渲染。</p><h3 id="initialScrollIndex"><a href="#initialScrollIndex" class="headerlink" title="initialScrollIndex"></a>initialScrollIndex</h3><p>首次渲染不从顶部的第一项开始，取而代之的是<code>initialScrollIndex</code>开始。它会禁止掉<code>initialNumToRender</code>的优化的项目放在内容中，立刻从 initial index 开始的位置渲染。需要设置<code>getItemLayout</code>属性</p><h3 id="inverted"><a href="#inverted" class="headerlink" title="inverted"></a>inverted</h3><p>翻转滚动的方向（应该是下滑变成上拉吧），实质是将<code>scale</code>设置成-1</p><h3 id="keyExtractor"><a href="#keyExtractor" class="headerlink" title="keyExtractor"></a>keyExtractor</h3><p>用来提取 item 下独一无二的 key，key 作为重绘时缓存的依据。默认是取 item.key，获取失败会回滚到 index，机制和 React 一样</p><h3 id="numColumns"><a href="#numColumns" class="headerlink" title="numColumns"></a>numColumns</h3><p>多列的数量，表现像 flexWrap 的 z 布局。所有的 item 一样高，<code>masonry</code>瀑布流布局不支持</p><h3 id="onEndReached"><a href="#onEndReached" class="headerlink" title="onEndReached"></a>onEndReached</h3><pre><code>(info: {distanceFromEnd: number}) =&gt; void</code></pre><p>当滚动的位置在渲染内容的触摸区内就会调用</p><h3 id="onEndReachedThreshold"><a href="#onEndReachedThreshold" class="headerlink" title="onEndReachedThreshold"></a>onEndReachedThreshold</h3><p>距离列表底部多远时触发<code>onEndReached</code>回调，这是一个比值。比如 0.5 距离底部为可见内容一半长度时触发</p><h3 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h3><p>如果提供，一个平台标准的组件就会被添加到<code>下拉刷新</code>功能上。保证<code>refreshing</code>属性被正确设置</p><h3 id="onViewableItemsChanged"><a href="#onViewableItemsChanged" class="headerlink" title="onViewableItemsChanged"></a>onViewableItemsChanged</h3><pre><code>(info: {   viewableItems: array,   changed: array, }) =&gt; void</code></pre><p>可见行变化时被调用。可见范围和变化频次可以去设置<code>viewabilityConfig</code></p><h3 id="progressViewOffset"><a href="#progressViewOffset" class="headerlink" title="progressViewOffset"></a>progressViewOffset</h3><p>当偏移的位置需要加上加载指示器，可以去设置。(Android)</p><h3 id="legacyImplementation"><a href="#legacyImplementation" class="headerlink" title="legacyImplementation"></a>legacyImplementation</h3><p>可能没有实现，仅在调试和性能对比时需要</p><blockquote><p>May not have full feature parity and is meant for debugging and performance comparison.</p></blockquote><h3 id="refreshing"><a href="#refreshing" class="headerlink" title="refreshing"></a>refreshing</h3><p>等待新数据刷新的状态为 true</p><h3 id="removeClippedSubviews"><a href="#removeClippedSubviews" class="headerlink" title="removeClippedSubviews"></a>removeClippedSubviews</h3><p>在大列表时可能会提高滚动性能</p><blockquote><p>有 bug，在某些场景下会导致内容丢失。谨慎使用</p></blockquote><h3 id="viewabilityConfig"><a href="#viewabilityConfig" class="headerlink" title="viewabilityConfig"></a>viewabilityConfig</h3><p>看更全的文档可以去看<a href="https://github.com/facebook/react-native/blob/master/Libraries/Lists/ViewabilityHelper.js" target="_blank" rel="noopener">ViewabilityHelper.js</a>库<br>viewabilityConfig 是一个对象具有下面属性</p><table><thead><tr><th>PROPERTY</th><th>REQUIRED</th><th>TYPE</th></tr></thead><tbody><tr><td>minimumViewTime</td><td>No</td><td>number</td></tr><tr><td>viewAreaCoveragePercentThreshold</td><td>No</td><td>number</td></tr><tr><td>itemVisiblePercentThreshold</td><td>No</td><td>number</td></tr><tr><td>waitForInteraction</td><td>No</td><td>boolean</td></tr></tbody></table><p>要求至少有其中一个在<code>viewAreaCoveragePercentThreshold</code>，<code>itemVisiblePercentThreshold</code>之间。它需要在构造函数中赋值，避免报错<br><code>Error: Changing viewabilityConfig on the fly is not supported</code></p><pre class="line-numbers language-ts"><code class="language-ts"><span class="token keyword">constructor</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>viewabilityConfig <span class="token operator">=</span> <span class="token punctuation">{</span>      waitForInteraction<span class="token punctuation">:</span> <span class="token keyword">true</span><span class="token punctuation">,</span>      viewAreaCoveragePercentThreshold<span class="token punctuation">:</span> <span class="token number">95</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ts"><code class="language-ts"><span class="token operator">&lt;</span>FlatList    viewabilityConfig<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>viewabilityConfig<span class="token punctuation">}</span>  <span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>minimumViewTime<br>单个 Item 达到最小的物理显示时间（单位是毫秒）就会触发 viewability 回调。一个较大的值表明滚动不停的话，将没有内容会被标记已显示。</li><li>viewAreaCoveragePercentThreshold<br>部分被遮挡的 Item 必须大于可视窗口的百分之多少时才会被记为已显示（0-100）。如果全部显示则也会被认为已显示。0 表示离可视窗口为 0 像素是才被认为显示。100 表示被遮挡的内容填充满屏幕时才会被认为已显示</li><li>itemVisiblePercentThreshold<br>跟<code>viewAreaCoveragePercentThreshold</code>一样，但是会认为 Item 自身被显示了百分之多少才算已显示，而不是它覆盖可见区域的比列</li><li>waitForInteraction<br>只有在用户交互或者 recordInteraction 被调用才去计算 item 是否已显示</li></ul><h3 id="viewabilityConfigCallbackPairs"><a href="#viewabilityConfigCallbackPairs" class="headerlink" title="viewabilityConfigCallbackPairs"></a>viewabilityConfigCallbackPairs</h3><p><code>ViewabilityConfig</code>/<code>onViewableItemsChanged</code>值对的列表，<code>ViewabilityConfig</code>‘s 条件会触发响应的<code>onViewableItemsChanged</code>调用</p><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="scrollToEnd"><a href="#scrollToEnd" class="headerlink" title="scrollToEnd()"></a>scrollToEnd()</h3><p>滚动到底部，如果没有<code>getItemLayout</code>行为会比较混乱<br><strong>params</strong></p><ul><li>animated (boolean)：滚动时是否需要动画，默认是 true</li></ul><h3 id="scrollToIndex"><a href="#scrollToIndex" class="headerlink" title="scrollToIndex()"></a>scrollToIndex()</h3><p>滚动到指定行，且可以指定可显示的位置，<code>viewPosition</code>为 0 时会在视口的顶部，1 时在视口底部，0.5 在视口中间。</p><blockquote><p>注意：如果没有指定 getItemLayout 属性则没有办法滚动到渲染窗口之外的位置</p></blockquote><p><strong>params</strong></p><ul><li>animated (boolean)：滚动时是否需要动画，默认是 true</li><li>index (number)：滚动位置的索引，必须</li><li>viewOffset (number)：一个固定值标识指定行后的偏移距离</li><li>viewPosition (number)：表示指定行在可视窗口的位置，上面已经表述过了</li></ul><h3 id="scrollToItem"><a href="#scrollToItem" class="headerlink" title="scrollToItem()"></a>scrollToItem()</h3><p>滚动到指定数据的行，它会线性扫描 data。建议使用<code>scrollToIndex</code><br><strong>params</strong></p><ul><li>animated (boolean)：滚动时是否需要动画，默认是 true</li><li>item (object)：滚动位置的对象，必须</li><li>viewPosition (number)：表示指定行在可视窗口的位置，上面已经表述过了</li></ul><h3 id="scrollToOffset"><a href="#scrollToOffset" class="headerlink" title="scrollToOffset()"></a>scrollToOffset()</h3><p>滚动至列表内容下的偏移像素<br><strong>params</strong></p><ul><li>offset (number)：滚动的偏移距离。如果是在水平模式下，这个就是 x 轴距离。否则就是 y 轴距离。必须</li><li>animated (boolean)：滚动时是否需要动画，默认是 true</li></ul><h3 id="recordInteraction"><a href="#recordInteraction" class="headerlink" title="recordInteraction()"></a>recordInteraction()</h3><p>告诉列表有交互了，当<code>waitForInteractions</code>是 true 会触发 view 是否显示的计算（即使用户没有滚动）。在点击 item 或者导航跳转的时候该方法也会被调用</p><h3 id="flashScrollIndicators"><a href="#flashScrollIndicators" class="headerlink" title="flashScrollIndicators()"></a>flashScrollIndicators()</h3><p>让滚动指示器显示短暂</p><h3 id="getScrollResponder"><a href="#getScrollResponder" class="headerlink" title="getScrollResponder()"></a>getScrollResponder()</h3><p>提供滚动响应者的引用</p><h3 id="getScrollableNode"><a href="#getScrollableNode" class="headerlink" title="getScrollableNode()"></a>getScrollableNode()</h3><p>提供滚动节点的引用</p>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> api </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/blog//about//"/>
      <url>/blog//about//</url>
      
        <content type="html"><![CDATA[<p>93 | 男 | 单身</p><p>啥都搞点, 前端, 移动端, 略微了解后端和CI/CD。还喜欢研究点操作系统和编译原理。擅长 javascript, c++ 略知一二, 喜欢看它们的 HOPL 书籍</p><p>最近在学习 Unity 3D</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>react native render html 简单解析</title>
      <link href="/blog/react-native-render-html/"/>
      <url>/blog/react-native-render-html/</url>
      
        <content type="html"><![CDATA[<h1 id="react-native-render-html"><a href="#react-native-render-html" class="headerlink" title="react-native-render-html"></a><a href="https://github.com/archriss/react-native-render-html" target="_blank" rel="noopener">react-native-render-html</a></h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>需要将 html 的 UI 渲染标准迁移到 react-native 的跨平台组件上</p><h2 id="简单推测处理过程"><a href="#简单推测处理过程" class="headerlink" title="简单推测处理过程"></a>简单推测处理过程</h2><p>html parse-&gt;compute style-&gt; cssom+dom map 到 RNom（主要是组件映射，属性映射，<code>这个阶段可以干预</code>）-&gt;渲染成 RNElements<br>流程是阶段性流程</p><h2 id="源码流程梳理"><a href="#源码流程梳理" class="headerlink" title="源码流程梳理"></a>源码流程梳理</h2><ul><li>registerDOM：记录将要渲染的 html 内容</li><li>parseDOM：解析 html 出 dom</li><li>htmlparser2.Parser DomHandler:dom 解析完毕，拿到 DOMNodes（类型为 DomElement 的 dom 节点数组）</li><li>mapDOMNodesTORNElements 将 DOMNodes 转换成 RNElements<ul><li>可以选择 ignoreNodesFunction，ignoredTags 忽略某些 tag 标签以及指定 Node</li><li>可以操作替换节点，可以操作替换节点数据，可以操作替换孩子节点</li><li>如果是叶子节点（只是纯文本内容），映射成一个 Text 组件，样式就是 dom node 节点的样式属性</li><li>如果是标签节点（ps:标签就认为是一个容器）<ul><li>递归计算所有 children node 出 RNElements</li><li>当前标签不是只包含文本就需要被映射为 View 容器</li><li>tag 是那种纯文本的标签,被映射成 Text 容器</li><li>如果 tag 是自定义的，可以调用自定义的 renders 标签函数处理</li><li>最后条件都不满足默认就认为是 View 容器</li><li>将以上拿到组装 RNElements 的参数定义，尝试进行递归层次合并。（发现子节点和自己是同一个容器类型，且属性相同）</li><li>将以上参数转换成实际的 RNElements 组件</li><li>最后尝试合并那些不需要独立成行的 tag 文本的组件</li></ul></li></ul></li><li>RNNodes 被包裹一个容器渲染到页面</li></ul><h2 id="官方文档翻译"><a href="#官方文档翻译" class="headerlink" title="官方文档翻译"></a>官方文档翻译</h2><p>一个纯 js 实现用来将 html 内容 100%绘制到原生上的 rn 组件，支持 Android/iOS。它能够 easy 自定义和使用。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>从 4.2.0 版本开始，react-native-webview 是一个独立的库。你需要自行安装它</p><h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><table><thead><tr><th>属性</th><th>描述</th><th>类型</th><th>值要求</th></tr></thead><tbody><tr><td>renderers</td><td>你自定义标签渲染函数</td><td>custom renders</td><td>object</td></tr><tr><td>renderersProps</td><td>custom renders 函数里的第四个参数 props</td><td>object</td><td>可选</td></tr><tr><td>html</td><td>需要渲染的 html 文本</td><td>string</td><td>必须</td></tr><tr><td>uri</td><td>网址内容的解析和渲染（实验中）</td><td>string</td><td>可选</td></tr><tr><td>decodeEntities</td><td>这个是 html parse2 的参数，(大意是文档中的实体也会被解析?)</td><td>bool</td><td>默认是 true</td></tr><tr><td>imagesMaxWidth</td><td>调整图片到最大宽度</td><td>number</td><td>可选</td></tr><tr><td>staticContentMaxWidth</td><td>设置非响应式内容的最大宽度(iframe 实例)（ps：得验证）</td><td>number</td><td>可选</td></tr><tr><td>imagesInitialDimensions</td><td>图片的默认显示的宽高{width:100,height:100}</td><td>number</td><td>可选</td></tr><tr><td>onLinkPress</td><td>随着点击事件触发，url 和标签属性对象将作为回调函数的参数</td><td>function</td><td>可选</td></tr><tr><td>onParsed</td><td>当 html 内容被解析完成时触发，对调整渲染后续过程有帮助</td><td>function</td><td>可选</td></tr><tr><td>tagsStyles</td><td>可以指定 html 标签的显示的 rn style</td><td>object</td><td>可选</td></tr><tr><td>classesStyles</td><td>可以指定 html 中类的 rn style</td><td>object</td><td>可选</td></tr><tr><td>listsPrefixesRenderers</td><td>包含自定义 ul,ol 的前缀渲染函数对象</td><td>object</td><td>可选</td></tr><tr><td>containerStyle</td><td>html 容器的样式</td><td>object</td><td>可选</td></tr><tr><td>customWrapper</td><td>替换掉默认的 warpper 的函数，第一个参数是渲染的内容。</td><td>function</td><td>可选</td></tr><tr><td>remoteLoadingView</td><td>替换默认加载网络内容的加载框</td><td>function</td><td>可选</td></tr><tr><td>emSize</td><td>1em 对应的像素值</td><td>number</td><td>14</td></tr><tr><td>ptSize</td><td>1pt 对应的像素值</td><td>number</td><td>1.3</td></tr><tr><td>baseFontStyleText</td><td>组件的默认样式</td><td>object</td><td>{fontSize:14}</td></tr><tr><td>allowFontScaling</td><td>允许字体大小被缩放的开关</td><td>boolean</td><td>true</td></tr><tr><td>textSelectable</td><td>允许所有文本被选中</td><td>boolean</td><td>false</td></tr><tr><td>alterData</td><td>指定文本改变目标节点的内容</td><td>function</td><td>可选</td></tr><tr><td>alterChildren</td><td>修改目标的节点的 children</td><td>function</td><td>可选</td></tr><tr><td>alterNode</td><td>修改目标节点</td><td>function</td><td>可选</td></tr><tr><td>ignoreTags</td><td>指定不想渲染的 html 标签</td><td>array</td><td>可选</td></tr><tr><td>allowStyles</td><td>它只渲染给定的 style，如果这个 style 也在 ignoreStyles 下，则还是忽略</td><td>array</td><td>可选 (应该是 background 这类样式属性)</td></tr><tr><td>ignoredStyles</td><td>不想渲染的 style</td><td>array</td><td>可选</td></tr><tr><td>ignoreNodesFunction</td><td>忽略给定节点</td><td>function</td><td>可选</td></tr><tr><td>debug</td><td>打印 htmlparser2 的解析 result,渲染的结果</td><td>boolean</td><td>false</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 翻译 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
